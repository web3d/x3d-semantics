@prefix : <https://www.web3d.org/specifications/X3dOntology4.0#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema:  <http://schema.org/> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

###############################################

# X3D Ontology

<https://www.web3d.org/specifications/X3dOntology4.0> a owl:Ontology ;
  dcterms:title       "X3D Ontology"@en ;
  dcterms:description "The X3D Ontology for Semantic Web provides terms of reference for semantic query of X3D models." ;
  dcterms:reference   "https://www.web3d.org/x3d/content/semantics/semantics.html" .
  # TODO include further provenance information
            
# Maintained at
#	https://www.web3d.org/specifications/X3dOntology4.0.ttl
#	https://www.web3d.org/x3d/content/semantics/ontologies/X3dOntology4.0.ttl
#
# Support
#   https://www.web3d.org/x3d/content/semantics/semantics.html
#
# Version control
#	https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/semantics/
#	https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/semantics/ontologies/X3dOntology4.0.ttl
#	https://sourceforge.net/p/x3d/code/HEAD/tree/www.web3d.org/semantics/ontologies/X3dOntology4.0.ttl?format=raw

###############################################

# OWL validation available at
#   http://mowl-power.cs.man.ac.uk:8080/validator (Profile OWL 2, Report syntax: Manchester Owl Syntax)
#   http://visualdataweb.de/validator
#
# Protege Ontology Editor
#   https://protege.stanford.edu

###############################################
            
# Design Plan

# - Show current work and plans at Web3D 2019 for discussion and comment
# - Continue testing X3D Ontology with SPARQL queries
# - Show interesting inferencing within/among X3D models
# - Consider adding semantic metadata to models in X3D Examples Archive
# -    https://www.web3d.org/x3d/content/examples/X3dResources.html#Examples
# - Add relations and rules for mapping 3D-specific and domain-specific ontologies
# - Build knowledge bases from current X3D scenes (initially)
# - Continue following patterns in Leslie Sikos' t3dmo.ttl to provide relations
# -    to other 3D file formats (perhaps OBJ first, then Max and others)
# - Write parsers for other 3D formats using Data Format Description Language (DFDL)
# -    https://daffodil.apache.org
# - Demonstrate general 3D query and inferencing capabilities for multiple formats
# - Write SPARQL "smoke test" assertions to check these are working correctly.
            
###############################################

# Special Properties

:hasChild a owl:ObjectProperty ;
  rdfs:subPropertyOf :hasDescendant ;
  dcterms:description "X3D element (node or statement) has a child element" .

:hasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChild;
  rdfs:subPropertyOf :hasAncestor ;
  dcterms:description "X3D element (node or statement) has a parent element" .

:hasDescendant a owl:ObjectProperty ;
  owl:inverseOf :hasAncestor;
  dcterms:description "X3D element (node or statement) has descendant element" .
            
:hasAncestor a owl:ObjectProperty , owl:TransitiveProperty ;
  dcterms:description "X3D element (node or statement) has ancestor element" .

:accessTypeProperty a owl:DatatypeProperty ;
  dcterms:description "accessTypeProperty values denote accessType for a given field within a given node." .
:accessTypeInputOutput a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeProperty ;
  dcterms:description "accessTypeInputOutput values denote accessType=inputOutput for a given field within a given node." ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range  xsd:NMTOKEN .
 :accessTypeInitializeOnly a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeProperty ;
  dcterms:description "accessTypeInitializeOnly values denote accessType=initializeOnly for a given field within a given node." ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range  xsd:NMTOKEN .
:accessTypeInputOnly a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeProperty ;
  dcterms:description "accessTypeInputOnly values denote accessType=inputOnly for a given field within a given node." ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range  xsd:NMTOKEN .
:accessTypeOutputOnly a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeProperty ;
  dcterms:description "accessTypeOutputOnly values denote accessType=outputOnly for a given field within a given node." ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range  xsd:NMTOKEN .

###############################################
            
# FieldTypes

:X3DField a rdfs:Datatype ;
  rdfs:label "X3DField is the abstract field type from which all single-valued field types are derived." ;
  dcterms:reference   "https://www.web3d.org/x3d/tooltips/X3dTooltips.html#FieldTypesTable" ;
  dcterms:reference   "https://www.web3d.org/documents/specifications/19775-1/V3.3/Part01/fieldsDef.html#X3DField" .

:SFBool rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFBool is a logical type with possible values (true|false) to match the XML boolean type. Hint: XML boolean values are lower case (true|false) in order to maintain compatibility with HTML and other XML documents." .
:MFBool rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFBool is an array of boolean values. Type MFBool was previously undefined in the VRML97 Specification, but nevertheless needed for event utilities and scripting. Example use: MFBool is useful for defining a series of behavior states using a BooleanSequencer prototype. Hint: XML boolean values are lower case (true|false) in order to maintain compatibility with HTML and other XML documents." .
:SFColor rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFColor specifies one RGB (red-green-blue) color triple, where each color value is an RGB triple of floating point numbers in range [0,1]. The default value of an uninitialized SFColor field is (0 0 0). Warning: comma characters within singleton values do not pass strict XML validation." .
:MFColor rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFColor specifies zero or more SFColor RGB triples, where each color value is an RGB triple of floating point numbers in range [0,1]. The default value of an uninitialized MFColor field is the empty list. Individual SFColor array values are optionally separated by commas in XML syntax." .
:SFColorRGBA rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFColorRGBA specifies one RGBA (red-green-blue-alpha) color 4-tuple, where each color value is an RGBA 4-tuple of floating point numbers in range [0,1]. Alpha (opacity) values = (1 - transparency). The default value of an uninitialized SFColorRGBA field is (0 0 0 0). Warning: comma characters within singleton values do not pass strict XML validation." .
:MFColorRGBA rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFColorRGBA specifies zero or more SFColorRGBA 4-tuples, where each color value is an RGBA 4-tuple of floating point numbers in range [0,1]. Alpha (opacity) values = (1 - transparency). The default value of an uninitialized MFColor field is the empty list. Individual SFColorRGBA array values are optionally separated by commas in XML syntax." .
:SFDouble rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFDouble is a double-precision floating-point type. Array values are optionally separated by commas in XML syntax. See GeoVRML 1.0 Recommended Practice, Section 2.3, Limitations of Single Precision for rationale." .
:MFDouble rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFDouble is an array of Double values, meaning a double-precision floating-point array type. See GeoVRML 1.0 Recommended Practice, Section 2.3, Limitations of Single Precision for rationale. Array values are optionally separated by commas in XML syntax." .
:SFFloat rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFFloat is a single-precision floating-point type." .
:MFFloat rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFFloat is an array of SFFloat values, meaning a single-precision floating-point array type. Array values are optionally separated by commas in XML syntax." .
:SFImage rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFImage specifies a single uncompressed 2-dimensional pixel image. SFImage fields contain three integers representing the width, height and number of components in the image, followed by (width x height) hexadecimal or integer values representing the pixels in the image." .
:MFImage rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFImage is an array of SFImage values." .
:SFInt32 rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFInt32 specifies one 32-bit signed integer." .
:MFInt32 rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFInt32 defines an array of 32-bit signed integers. Array values are optionally separated by commas in XML syntax." .
:SFMatrix3d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFMatrix3d specifies a 3x3 matrix of double-precision floating point numbers, organized in row-major fashion. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFMatrix3d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFMatrix3d specifies zero or more 3x3 matrices of double-precision floating point numbers, organized in row-major fashion. Warning: comma characters can only appear between singleton 9-tuple values." .
:SFMatrix3f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFMatrix3f specifies a 3x3 matrix of single-precision floating point numbers, organized in row-major fashion. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFMatrix3f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFMatrix3f specifies zero or more 3x3 matrices of single-precision floating point numbers, organized in row-major fashion. Warning: comma characters can only appear between singleton 9-tuple values." .
:SFMatrix4d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFMatrix4d specifies a 4x4 matrix of double-precision floating point numbers, organized in row-major fashion. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFMatrix4d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFMatrix4d specifies zero or more 4x4 matrices of double-precision floating point numbers, organized in row-major fashion. Warning: comma characters can only appear between singleton 16-tuple values." .
:SFMatrix4f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFMatrix4f specifies a 4x4 matrix of single-precision floating point numbers, organized in row-major fashion. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFMatrix4f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFMatrix4f specifies zero or more 4x4 matrices of single-precision floating point numbers, organized in row-major fashion. Warning: comma characters can only appear between singleton 16-tuple values." .
# SFNode TODO questionable, remove or refactor? .
# MFNode TODO questionable, remove or refactor? .
:SFRotation rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFRotation is an axis-angle 4-tuple, indicating X-Y-Z direction axis plus angle orientation about that axis" .
:MFRotation rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFRotation is an array of SFRotation values. Individual singleton SFRotation array values are optionally separated by commas in XML syntax." .
:SFString rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFString defines a single string encoded with the UTF-8 universal character set." .
:MFString rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFString is an array of SFString values, each quoted and separated by whitespace. Individual SFString array values are optionally separated by commas in XML syntax." .
:SFTime rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFTime specifies a single time value, expressed as a double-precision floating point number. Typically, SFTime fields represent the number of seconds since Jan 1, 1970, 00:00:00 GMT." .
:MFTime rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFTime is an array of SFTime values. Array values are optionally separated by commas in XML syntax." .
:SFVec2d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec2d is a 2-tuple pair of SFDouble values. Hint: SFVec2d can be used to specify a 2D double-precision coordinate. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec2d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec2d is an array of SFVec2d values. Individual singleton SFVec2d array values are optionally separated by commas in XML syntax." .
:SFVec2f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec2f is a 2-tuple pair of SFFloat values. Hint: SFVec2f can be used to specify a 2D single-precision coordinate. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec2f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec2f is an array of SFVec2f values. Individual singleton SFVec2f array values are optionally separated by commas in XML syntax." .
:SFVec3d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec3d is a 3-tuple triplet of SFDouble values. See GeoVRML 1.0 Recommended Practice, Section 2.3, Limitations of Single Precision. Hint: SFVec3d can be used to specify a georeferenced 3D coordinate. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec3d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec3d is an array of SFVec3d values. Individual singleton SFVec3d array values are optionally separated by commas in XML syntax. Original rationale for inclusion: GeoVRML 1.0 Recommended Practice, Section 2.3, Limitations of Single Precision. Hint: MFVec3d can be used to specify a list of georeferenced 3D coordinates." .
:SFVec3f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec3f is a 3-tuple triplet of SFFloat values. Hint: SFVec3f can be used to specify a 3D coordinate or a 3D scale value. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec3f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec3f is an array of SFVec3f values. Individual singleton SFVec3f array values are optionally separated by commas in XML syntax." .
:SFVec4d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec4d is a 4-tuple set of double-precision floating-point values, specifying a 3D homogeneous vector. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec4d rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec4d is zero or more SFVec4d values. Individual singleton SFVec4d array values are optionally separated by commas in XML syntax." .
:SFVec4f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "SFVec4f is a 4-tuple set of single-precision floating-point values, specifying a 3D homogeneous vector. Warning: comma characters within singleton values do not pass strict XML validation." .
:MFVec4f rdf:type rdfs:Datatype ;
  rdfs:subClassOf :X3DField ;
  dcterms:description "MFVec4f is zero or more SFVec4f values. Individual singleton SFVec4f array values are optionally separated by commas in XML syntax." .

###############################################

# SimpleTypeEnumerations

# OWL 2 Web Ontology Language Quick Reference Guide (Second Edition)
# W3C Recommendation 11 December 2012
# 2.4 Data Ranges
# https://www.w3.org/TR/2012/REC-owl2-quick-reference-20121211/#Data_Ranges

:accessTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "accessTypeChoices" ;
  dcterms:description "accessTypeChoices are strictly allowed enumeration values for accessType, used when defining field declarations within a Script node or ProtoDeclare/ExternProtoDeclare statements. Original accessType name values in VRML97 were eventIn, eventOut, field, exposedField respectively. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/concepts.html#FieldSemantics" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'initializeOnly' 'inputOnly' 'outputOnly' 'inputOutput' ) ] .

:accessType__initializeOnly rdfs:label 'initializeOnly'^^xsd:string ;
  dcterms:description "A field with accessType initializeOnly can be initialized, but cannot send or receive events." .
:accessType__inputOnly rdfs:label 'inputOnly'^^xsd:string ;
  dcterms:description "A field with accessType inputOnly cannot be initialized or included in a scene file, but can receive input event values via a ROUTE." .
:accessType__outputOnly rdfs:label 'outputOnly'^^xsd:string ;
  dcterms:description "A field with accessType outputOnly cannot be initialized or included in a scene file, but can send output event values via a ROUTE." .
:accessType__inputOutput rdfs:label 'inputOutput'^^xsd:string ;
  dcterms:description "A field with accessType inputOutput can be initialized, and can also send or receive events." .

:alphaModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "alphaModeChoices" ;
  dcterms:description "Permitted values for Appearance alphaMode field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/Shape.html#Appearance" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'AUTO' 'OPAQUE' 'MASK' 'BLEND' ) ] .

:alphaMode__AUTO rdfs:label 'AUTO'^^xsd:string ;
  dcterms:description "Material transparency is applied to texture transparency" .
:alphaMode__OPAQUE rdfs:label 'OPAQUE'^^xsd:string ;
  dcterms:description "Ignore alpha channel texture transparency, opaque" .
:alphaMode__MASK rdfs:label 'MASK'^^xsd:string ;
  dcterms:description "Alpha-testing mode for transparent when alpha value less than 0.5 and opaque when greater than or equal to 0.5" .
:alphaMode__BLEND rdfs:label 'BLEND'^^xsd:string ;
  dcterms:description "Blend combines partial transparency of textures and materials" .

:appliedParametersChoices rdf:type rdfs:Datatype ;
  rdfs:label "appliedParametersChoices" ;
  dcterms:description "Default global parameters for collision outputs of rigid body physics system. Contact node can override parent CollisionCollection node. Multiple optional values, but appliedParameters enumerations cannot be extended. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/rigidBodyPhysics.html#t-AppliedParametersValidValues" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"BOUNCE"' '"USER_FRICTION"' '"FRICTION_COEFFICIENT-2"' '"ERROR_REDUCTION"' '"CONSTANT_FORCE"' '"SPEED-1"' '"SPEED-2"' '"SLIP-1"' '"SLIP-2"' ) ] .

:appliedParameters__BOUNCE rdfs:label 'BOUNCE'^^xsd:string ;
  dcterms:description "The bounce field value is used." .
:appliedParameters__USER_FRICTION rdfs:label 'USER_FRICTION'^^xsd:string ;
  dcterms:description "The system will normally calculate the friction direction vector that is perpendicular to the contact normal. This setting indicates that the user-supplied value in this contact should be used." .
:appliedParameters__FRICTION_COEFFICIENT2 rdfs:label 'FRICTION_COEFFICIENT-2'^^xsd:string ;
  dcterms:description "Apply frictionCoefficients values" .
:appliedParameters__ERROR_REDUCTION rdfs:label 'ERROR_REDUCTION'^^xsd:string ;
  dcterms:description "Apply softnessErrorCorrection value" .
:appliedParameters__CONSTANT_FORCE rdfs:label 'CONSTANT_FORCE'^^xsd:string ;
  dcterms:description "Apply softnessConstantForceMix value" .
:appliedParameters__SPEED1 rdfs:label 'SPEED-1'^^xsd:string ;
  dcterms:description "Apply first component of surfaceSpeed array" .
:appliedParameters__SPEED2 rdfs:label 'SPEED-2'^^xsd:string ;
  dcterms:description "Apply second component of surfaceSpeed array" .
:appliedParameters__SLIP1 rdfs:label 'SLIP-1'^^xsd:string ;
  dcterms:description "Apply first component of slipFactors array" .
:appliedParameters__SLIP2 rdfs:label 'SLIP-2'^^xsd:string ;
  dcterms:description "Apply second component of slipFactors array" .

:bboxSizeType rdf:type rdfs:Datatype ;
  rdfs:label "bboxSizeType" ;
  dcterms:description "bboxSizeType dimensions are non-negative values, default value (-1 -1 -1) indicates that no bounding box size has been computed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/grouping.html#Boundingboxes" .

:biquadTypeFilterChoices rdf:type rdfs:Datatype ;
  rdfs:label "biquadTypeFilterChoices" ;
  dcterms:description "Permitted values for BiquadFilter type. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#BiquadFilter" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'lowpass' 'highpass' 'bandpass' 'lowshelf' 'highshelf' 'peaking' 'notch' 'allpass' ) ] .

:biquadTypeFilter__lowpass rdfs:label 'lowpass'^^xsd:string  .
:biquadTypeFilter__highpass rdfs:label 'highpass'^^xsd:string  .
:biquadTypeFilter__bandpass rdfs:label 'bandpass'^^xsd:string  .
:biquadTypeFilter__lowshelf rdfs:label 'lowshelf'^^xsd:string  .
:biquadTypeFilter__highshelf rdfs:label 'highshelf'^^xsd:string  .
:biquadTypeFilter__peaking rdfs:label 'peaking'^^xsd:string  .
:biquadTypeFilter__notch rdfs:label 'notch'^^xsd:string  .
:biquadTypeFilter__allpass rdfs:label 'allpass'^^xsd:string  .

:channelCountModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "channelCountModeChoices" ;
  dcterms:description "Permitted values for channelCountMode in X3DSoundChannelNode and X3DSoundDestinationNode. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#SoundEffectsProcessing" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'max' 'clamped-max' 'explicit' ) ] .

:channelCountMode__max rdfs:label 'max'^^xsd:string  .
:channelCountMode__clampedmax rdfs:label 'clamped-max'^^xsd:string  .
:channelCountMode__explicit rdfs:label 'explicit'^^xsd:string  .

:channelInterpretationChoices rdf:type rdfs:Datatype ;
  rdfs:label "channelInterpretationChoices" ;
  dcterms:description "Permitted values for channelInterpretation in X3DSoundChannelNode and X3DSoundDestinationNode. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#SoundEffectsProcessing" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'speakers' 'discrete' ) ] .

:channelInterpretation__speakers rdfs:label 'speakers'^^xsd:string  .
:channelInterpretation__discrete rdfs:label 'discrete'^^xsd:string  .

:closureTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "closureTypeChoices" ;
  dcterms:description "closureTypeChoices are strictly allowed enumeration values for ArcClose2D closureType field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geometry2D.html#ArcClose2D" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'PIE' 'CHORD' ) ] .

:closureType__PIE rdfs:label 'PIE'^^xsd:string ;
  dcterms:description "Connects arc endpoints to center, forming a pie wedge" .
:closureType__CHORD rdfs:label 'CHORD'^^xsd:string ;
  dcterms:description "Connects arc endpoints directly to each other, as in chord on a circle" .

:componentNameChoices rdf:type rdfs:Datatype ;
  rdfs:label "componentNameChoices" ;
  dcterms:description "componentNameChoices are enumeration constants used to identify the profile for each scene-graph node, and also utilized by X3D element to identify the components required by the contained Scene. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/concepts.html#Components" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'Core' 'CADGeometry' 'CubeMapTexturing' 'DIS' 'EnvironmentalEffects' 'EnvironmentalSensor' 'EventUtilities' 'Followers' 'Geometry2D' 'Geometry3D' 'Geospatial' 'Grouping' 'HAnim' 'H-Anim' 'Interpolation' 'KeyDeviceSensor' 'Layering' 'Layout' 'Lighting' 'Navigation' 'Networking' 'NURBS' 'ParticleSystems' 'Picking' 'PointingDeviceSensor' 'TextureProjector' 'Rendering' 'RigidBodyPhysics' 'Scripting' 'Shaders' 'Shape' 'Sound' 'Text' 'Texturing' 'Texturing3D' 'Time' 'VolumeRendering' ) ] .

:componentName__Core rdfs:label 'Core'^^xsd:string ;
  dcterms:description "The Core component supplies the base functionality for the X3D run-time system, including the abstract base node type, field types, the event model, and routing.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/core.html" .
:componentName__CADGeometry rdfs:label 'CADGeometry'^^xsd:string ;
  dcterms:description "The CADGeometry component is provided for Computer-Aided Design (CAD) nodes.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/CADGeometry.html" .
:componentName__CubeMapTexturing rdfs:label 'CubeMapTexturing'^^xsd:string ;
  dcterms:description "The Cube Map Environmental Texturing component describes how additional texturing effects are defined to produce environmental effects such as reflections from objects.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/environmentalTexturing" .
:componentName__DIS rdfs:label 'DIS'^^xsd:string ;
  dcterms:description "The Distributed Interactive Simulation (DIS) component provides networked interoperability with the IEEE DIS protocol for sharing state and conducting real-time platform-level simulations across multiple host computers.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/dis.html" .
:componentName__EnvironmentalEffects rdfs:label 'EnvironmentalEffects'^^xsd:string ;
  dcterms:description "Nodes in the Environmental effects component support the creation of realistic environmental effects such as panoramic backgrounds and fog.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/environmentalEffects.html" .
:componentName__EnvironmentalSensor rdfs:label 'EnvironmentalSensor'^^xsd:string ;
  dcterms:description "The Environment Sensor nodes emit events indicating activity in the scene environment, usually based on interactions between the viewer and the world.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/environmentalSensor.html" .
:componentName__EventUtilities rdfs:label 'EventUtilities'^^xsd:string ;
  dcterms:description "The Event Utility nodes provide the capability to filter, trigger, convert, or sequence numerous event-types for common interactive applications without the use of a Script node.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/eventUtilities.html" .
:componentName__Followers rdfs:label 'Followers'^^xsd:string ;
  dcterms:description "The Follower nodes (Chasers and Dampers) support dynamic creation of smooth parameter transitions at run time.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/followers.html" .
:componentName__Geometry2D rdfs:label 'Geometry2D'^^xsd:string ;
  dcterms:description "The Geometry2D component defines how two-dimensional geometry is specified and what shapes are available.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geometry2D.html" .
:componentName__Geometry3D rdfs:label 'Geometry3D'^^xsd:string ;
  dcterms:description "The Geometry3D component describes how three-dimensional geometry is specified and defines ElevationGrid, Extrusion, IndexedFaceSet, and most primitive geometry nodes (Box, Cone, Cylinder, Sphere).";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geometry3D.html" .
:componentName__Geospatial rdfs:label 'Geospatial'^^xsd:string ;
  dcterms:description "The Geospatial component defines how to associate real-world locations in an X3D scene and specifies nodes particularly tuned for geospatial applications.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geospatial.html" .
:componentName__Grouping rdfs:label 'Grouping'^^xsd:string ;
  dcterms:description "The Grouping component describes how nodes are organized into groups to establish a transformation hierarchy for the X3D scene graph.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/grouping.html" .
:componentName__HAnim rdfs:label 'HAnim'^^xsd:string ;
  dcterms:description "The Humanoid Animation (HAnim) component for X3D defines node bindings and other details for implementing ISO/IEC 19774, the HAnim International Specification. Original name was H-Anim for X3D versions 3.0 through 3.3, both enumeration values HAnim and H-Anim are allowed to pass validation.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/hanim.html" .
:componentName__HAnim rdfs:label 'H-Anim'^^xsd:string ;
  dcterms:description "Legacy enumeration H-Anim for X3D versions 3.0-3.3 provides backwards compatibility with Humanoid Animation (HAnim) version 1, preferred form of enumeration value is HAnim.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/hanim.html" .
:componentName__Interpolation rdfs:label 'Interpolation'^^xsd:string ;
  dcterms:description "Interpolator nodes provide keyframe-based animation capability.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/interpolators.html" .
:componentName__KeyDeviceSensor rdfs:label 'KeyDeviceSensor'^^xsd:string ;
  dcterms:description "The Key Device Sensor defines how keyboard keystrokes are inserted into an X3D world.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/keyDeviceSensor.html" .
:componentName__Layering rdfs:label 'Layering'^^xsd:string ;
  dcterms:description "The Layering component describes how to layer a set of subscene layers into a composite scene.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/layering.html" .
:componentName__Layout rdfs:label 'Layout'^^xsd:string ;
  dcterms:description "The Layout component defines how to precisely position content in a scene in relation to the rendered results, especially for integrating 2D content with 3D content.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/layout.html" .
:componentName__Lighting rdfs:label 'Lighting'^^xsd:string ;
  dcterms:description "The Lighting component specifies how light sources are defined and positioned, as well as how lights effect the rendered image.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/lighting.html" .
:componentName__Navigation rdfs:label 'Navigation'^^xsd:string ;
  dcterms:description "The Navigation component specifies how a user can effectively and intuitively move through and around a 3D scene.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/navigation.html" .
:componentName__Networking rdfs:label 'Networking'^^xsd:string ;
  dcterms:description "The Networking component defines node types and other features used to access file-based and streaming resources on the World Wide Web.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/networking.html" .
:componentName__NURBS rdfs:label 'NURBS'^^xsd:string ;
  dcterms:description "The NURBS component describes Non-uniform Rational B-Spline (NURBS) geometry and interpolation nodes.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/nurbs.html" .
:componentName__ParticleSystems rdfs:label 'ParticleSystems'^^xsd:string ;
  dcterms:description "The Particle Systems component specifies how to model particles and their interactions through the application of basic physics principles to affect motion.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/particleSystems.html" .
:componentName__Picking rdfs:label 'Picking'^^xsd:string ;
  dcterms:description "The Picking component provides the ability to test for arbitrary object collision and provide basic capabilities to detecting object intersections and interactions.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/picking.html" .
:componentName__PointingDeviceSensor rdfs:label 'PointingDeviceSensor'^^xsd:string ;
  dcterms:description "Pointing device sensor nodes detect pointing events from user-interface devices, defining activities such as a user selecting a piece of geometry.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/pointingDeviceSensor.html" .
:componentName__TextureProjector rdfs:label 'TextureProjector'^^xsd:string ;
  dcterms:description "TextureProjector nodes project textures onto geometry in a scene.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/TextureProjector.html" .
:componentName__Rendering rdfs:label 'Rendering'^^xsd:string ;
  dcterms:description "The Rendering component includes fundamental rendering primitives such as TriangleSet and PointSet nodes, as well as geometric properties nodes that define how coordinate indices, colors, normals and texture coordinates are specified.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/rendering.html" .
:componentName__RigidBodyPhysics rdfs:label 'RigidBodyPhysics'^^xsd:string ;
  dcterms:description "The Rigid Body Physics component describes how to model rigid bodies and their interactions through the application of basic physics principles to effect motion.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/rigidBodyPhysics.html" .
:componentName__Scripting rdfs:label 'Scripting'^^xsd:string ;
  dcterms:description "The Scripting component describes how Script nodes are used to effect changes in X3D worlds.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/scripting.html" .
:componentName__Shaders rdfs:label 'Shaders'^^xsd:string ;
  dcterms:description "The Programmable Shaders component describes how programmable shaders are specified and how they affect the visual appearance of geometry.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/shaders.html" .
:componentName__Shape rdfs:label 'Shape'^^xsd:string ;
  dcterms:description "The Shape component defines nodes for associating geometry with their visible properties and the scene environment.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/shape.html" .
:componentName__Sound rdfs:label 'Sound'^^xsd:string ;
  dcterms:description "The Sound component defines how sound is delivered to an X3D world as well as how sounds are accessed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html" .
:componentName__Text rdfs:label 'Text'^^xsd:string ;
  dcterms:description "The Text component defines how text strings are rendered in an X3D scene.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/text.html" .
:componentName__Texturing rdfs:label 'Texturing'^^xsd:string ;
  dcterms:description "The Texturing component specifies how 2D texture images are defined and then positioned on associated geometry.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html" .
:componentName__Texturing3D rdfs:label 'Texturing3D'^^xsd:string ;
  dcterms:description "The Texturing3D component specifies how 3D volumetric textures describe surface properties as data points in a volume of space, rather than a flat surface.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texture3D.html" .
:componentName__Time rdfs:label 'Time'^^xsd:string ;
  dcterms:description "The Time component defines how time is sensed, computed and associated with events in an X3D scene.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/time.html" .
:componentName__VolumeRendering rdfs:label 'VolumeRendering'^^xsd:string ;
  dcterms:description "The Volume Rendering component provides the ability to specify and render volumetric data sets.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/volume.html" .

:distanceModelChoices rdf:type rdfs:Datatype ;
  rdfs:label "distanceModelChoices" ;
  dcterms:description "Permitted values for SpatialSound distanceModel. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#SpatialSound" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'linear' 'inverse' 'exponential' ) ] .

:distanceModel__linear rdfs:label 'linear'^^xsd:string  .
:distanceModel__inverse rdfs:label 'inverse'^^xsd:string  .
:distanceModel__exponential rdfs:label 'exponential'^^xsd:string  .

:fieldTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "fieldTypeChoices" ;
  dcterms:description "fieldTypeChoices are enumerations for all allowed names of X3DField types. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/fieldsDef.html" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'SFBool' 'MFBool' 'SFColor' 'MFColor' 'SFColorRGBA' 'MFColorRGBA' 'SFDouble' 'MFDouble' 'SFFloat' 'MFFloat' 'SFImage' 'MFImage' 'SFInt32' 'MFInt32' 'SFNode' 'MFNode' 'SFRotation' 'MFRotation' 'SFString' 'MFString' 'SFTime' 'MFTime' 'SFVec2d' 'MFVec2d' 'SFVec2f' 'MFVec2f' 'SFVec3d' 'MFVec3d' 'SFVec3f' 'MFVec3f' 'SFVec4d' 'MFVec4d' 'SFVec4f' 'MFVec4f' 'SFMatrix3d' 'MFMatrix3d' 'SFMatrix3f' 'MFMatrix3f' 'SFMatrix4d' 'MFMatrix4d' 'SFMatrix4f' 'MFMatrix4f' ) ] .

:fieldType__SFBool rdfs:label 'SFBool'^^xsd:string ;
  dcterms:description "Single Field (singleton) Boolean" .
:fieldType__MFBool rdfs:label 'MFBool'^^xsd:string ;
  dcterms:description "Multiple Field (list) Boolean" .
:fieldType__SFColor rdfs:label 'SFColor'^^xsd:string ;
  dcterms:description "Single Field (singleton) color value, red-green-blue" .
:fieldType__MFColor rdfs:label 'MFColor'^^xsd:string ;
  dcterms:description "Multiple Field (list) color value, red-green-blue" .
:fieldType__SFColorRGBA rdfs:label 'SFColorRGBA'^^xsd:string ;
  dcterms:description "Single Field (singleton) color value, red-green-blue alpha (opacity)" .
:fieldType__MFColorRGBA rdfs:label 'MFColorRGBA'^^xsd:string ;
  dcterms:description "Multiple Field (list) color value, red-green-blue alpha (opacity)" .
:fieldType__SFDouble rdfs:label 'SFDouble'^^xsd:string ;
  dcterms:description "Single Field (singleton) double-precision (64-bit) float" .
:fieldType__MFDouble rdfs:label 'MFDouble'^^xsd:string ;
  dcterms:description "Multiple Field (list) 2-tuple double-precision (64-bit) float vector" .
:fieldType__SFFloat rdfs:label 'SFFloat'^^xsd:string ;
  dcterms:description "Single Field (singleton) single-precision (32-bit) float" .
:fieldType__MFFloat rdfs:label 'MFFloat'^^xsd:string ;
  dcterms:description "Multiple Field (list) single-precision (32-bit) float vector" .
:fieldType__SFImage rdfs:label 'SFImage'^^xsd:string ;
  dcterms:description "Single Field (singleton) image value" .
:fieldType__MFImage rdfs:label 'MFImage'^^xsd:string ;
  dcterms:description "Multiple Field (list) image values" .
:fieldType__SFInt32 rdfs:label 'SFInt32'^^xsd:string ;
  dcterms:description "Single Field (singleton) 32-bit integer" .
:fieldType__MFInt32 rdfs:label 'MFInt32'^^xsd:string ;
  dcterms:description "Multiple Field (list) 32-bit integer" .
:fieldType__SFNode rdfs:label 'SFNode'^^xsd:string ;
  dcterms:description "Single Field (singleton) node" .
:fieldType__MFNode rdfs:label 'MFNode'^^xsd:string ;
  dcterms:description "Multiple Field (list) nodes" .
:fieldType__SFRotation rdfs:label 'SFRotation'^^xsd:string ;
  dcterms:description "Single Field (singleton) rotation value using 3-tuple axis, radian angle" .
:fieldType__MFRotation rdfs:label 'MFRotation'^^xsd:string ;
  dcterms:description "Multiple Field (list) rotation values using 3-tuple axis, radian angle" .
:fieldType__SFString rdfs:label 'SFString'^^xsd:string ;
  dcterms:description "Single Field (singleton) string value" .
:fieldType__MFString rdfs:label 'MFString'^^xsd:string ;
  dcterms:description "Multiple Field (list) SFString array" .
:fieldType__SFTime rdfs:label 'SFTime'^^xsd:string ;
  dcterms:description "Single Field (singleton) time value in seconds" .
:fieldType__MFTime rdfs:label 'MFTime'^^xsd:string ;
  dcterms:description "Multiple Field (list) time array in seconds" .
:fieldType__SFVec2d rdfs:label 'SFVec2d'^^xsd:string ;
  dcterms:description "Single Field (singleton) 2-tuple double-precision float vector" .
:fieldType__MFVec2d rdfs:label 'MFVec2d'^^xsd:string ;
  dcterms:description "Multiple Field (list) 2-tuple double-precision float vectors" .
:fieldType__SFVec2f rdfs:label 'SFVec2f'^^xsd:string ;
  dcterms:description "Single Field (singleton) 2-tuple single-precision float vector" .
:fieldType__MFVec2f rdfs:label 'MFVec2f'^^xsd:string ;
  dcterms:description "Multiple Field (list) 2-tuple single-precision float vectors" .
:fieldType__SFVec3d rdfs:label 'SFVec3d'^^xsd:string ;
  dcterms:description "Single Field (singleton) 3-tuple double-precision float vector" .
:fieldType__MFVec3d rdfs:label 'MFVec3d'^^xsd:string ;
  dcterms:description "Multiple Field (list) 3-tuple double-precision float vectors" .
:fieldType__SFVec3f rdfs:label 'SFVec3f'^^xsd:string ;
  dcterms:description "Single Field (singleton) 3-tuple single-precision float vector" .
:fieldType__MFVec3f rdfs:label 'MFVec3f'^^xsd:string ;
  dcterms:description "Multiple Field (list) 3-tuple single-precision float vectors" .
:fieldType__SFVec4d rdfs:label 'SFVec4d'^^xsd:string ;
  dcterms:description "Single Field (singleton) 4-tuple double-precision float vector" .
:fieldType__MFVec4d rdfs:label 'MFVec4d'^^xsd:string ;
  dcterms:description "Multiple Field (list) 4-tuple double-precision float vectors" .
:fieldType__SFVec4f rdfs:label 'SFVec4f'^^xsd:string ;
  dcterms:description "Single Field (singleton) 4-tuple single-precision float vector" .
:fieldType__MFVec4f rdfs:label 'MFVec4f'^^xsd:string ;
  dcterms:description "Multiple Field (list) 4-tuple single-precision float vectors" .
:fieldType__SFMatrix3d rdfs:label 'SFMatrix3d'^^xsd:string ;
  dcterms:description "Single Field (singleton) 3×3 matrix of double-precision floating point numbers" .
:fieldType__MFMatrix3d rdfs:label 'MFMatrix3d'^^xsd:string ;
  dcterms:description "Multiple Field (list) 3×3 matrices of double-precision floating point numbers" .
:fieldType__SFMatrix3f rdfs:label 'SFMatrix3f'^^xsd:string ;
  dcterms:description "Single Field (singleton) 3×3 matrix of single-precision floating point numbers" .
:fieldType__MFMatrix3f rdfs:label 'MFMatrix3f'^^xsd:string ;
  dcterms:description "Multiple Field (list) 3×3 matrices of double-precision floating point numbers" .
:fieldType__SFMatrix4d rdfs:label 'SFMatrix4d'^^xsd:string ;
  dcterms:description "Single Field (singleton) 4×4 matrix of double-precision floating point numbers" .
:fieldType__MFMatrix4d rdfs:label 'MFMatrix4d'^^xsd:string ;
  dcterms:description "Multiple Field (list) 4×4 matric3w of double-precision floating point numbers" .
:fieldType__SFMatrix4f rdfs:label 'SFMatrix4f'^^xsd:string ;
  dcterms:description "Single Field (singleton) 4×4 matrix of single-precision floating point numbers" .
:fieldType__MFMatrix4f rdfs:label 'MFMatrix4f'^^xsd:string ;
  dcterms:description "Multiple Field (list) 4×4 matrices of single-precision floating point numbers" .

:fogTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "fogTypeChoices" ;
  dcterms:description "fogTypeChoices are strictly allowed enumeration values for Fog node fogType field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/environmentalEffects.html#Fog" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'LINEAR' 'EXPONENTIAL' ) ] .

:fogType__LINEAR rdfs:label 'LINEAR'^^xsd:string ;
  dcterms:description "linear blending as a function of distance" .
:fogType__EXPONENTIAL rdfs:label 'EXPONENTIAL'^^xsd:string ;
  dcterms:description "exponential blending as a function of distance" .

:fontFamilyValues rdf:type rdfs:Datatype ;
  rdfs:label "fontFamilyValues" ;
  dcterms:description "fontFamilyValues are supported enumeration values for FontStyle/ScreenFontStyle node family field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/text.html#Fontfamilyandstyle" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"SANS"' '"SERIF"' '"TYPEWRITER"' ) ] .

:fontFamily__SANS rdfs:label 'SANS'^^xsd:string ;
  dcterms:description "default font family for sans-serif font such as Helvetica" .
:fontFamily__SERIF rdfs:label 'SERIF'^^xsd:string ;
  dcterms:description "default font family for serif font such as Times-Roman" .
:fontFamily__TYPEWRITER rdfs:label 'TYPEWRITER'^^xsd:string ;
  dcterms:description "default font family for a fixed-pitch font such as Courier" .

:fontStyleChoices rdf:type rdfs:Datatype ;
  rdfs:label "fontStyleChoices" ;
  dcterms:description "fontStyleChoices are strictly allowed enumeration values for FontStyle/ScreenFontStyle node style field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/text.html#Fontfamilyandstyle" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'PLAIN' 'BOLD' 'ITALIC' 'BOLDITALIC' ) ] .

:fontStyle__PLAIN rdfs:label 'PLAIN'^^xsd:string ;
  dcterms:description "default plain type" .
:fontStyle__BOLD rdfs:label 'BOLD'^^xsd:string ;
  dcterms:description "boldface type" .
:fontStyle__ITALIC rdfs:label 'ITALIC'^^xsd:string ;
  dcterms:description "italic type" .
:fontStyle__BOLDITALIC rdfs:label 'BOLDITALIC'^^xsd:string ;
  dcterms:description "bold and italic type" .

:forceOutputValues rdf:type rdfs:Datatype ;
  rdfs:label "forceOutputValues" ;
  dcterms:description "forceOutputValues are supported enumeration values for X3DRigidJointNode type forceOutput field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/rigidBodyPhysics.html#X3DRigidJointNode" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"ALL"' '"NONE"' ) ] .

:forceOutput__ALL rdfs:label 'ALL'^^xsd:string ;
  dcterms:description "all forceOutput fields computed" .
:forceOutput__NONE rdfs:label 'NONE'^^xsd:string ;
  dcterms:description "no forceOutput fields computed" .

:generatedCubeMapTextureUpdateChoices rdf:type rdfs:Datatype ;
  rdfs:label "generatedCubeMapTextureUpdateChoices" ;
  dcterms:description "generatedCubeMapTextureUpdateChoices are strictly allowed enumeration values for GeneratedCubeMapTexture field named 'update'. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/environmentalTexturing#GeneratedCubeMapTexture" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'NONE' 'NEXT_FRAME_ONLY' 'ALWAYS' ) ] .

:generatedCubeMapTextureUpdate__NONE rdfs:label 'NONE'^^xsd:string ;
  dcterms:description "no further texture updates are rendered" .
:generatedCubeMapTextureUpdate__NEXT_FRAME_ONLY rdfs:label 'NEXT_FRAME_ONLY'^^xsd:string ;
  dcterms:description "render texture once at end of frame" .
:generatedCubeMapTextureUpdate__ALWAYS rdfs:label 'ALWAYS'^^xsd:string ;
  dcterms:description "texture to be rendered every frame" .

:geoMetadataSummaryKeyValues rdf:type rdfs:Datatype ;
  rdfs:label "geoMetadataSummaryKeyValues" ;
  dcterms:description "The enumeration keys for the GeoMetadata summary field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19775-1/V3.3/Part01/components/geodata.html#t-keywordsandvalues" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'title' 'description' 'coordinateSystem' 'horizontalDatum' 'verticalDatum' 'ellipsoid' 'extent' 'resolution' 'originator' 'copyright' 'date' 'metadataFormat' 'dataUrl' 'dataFormat' ) ] .

:geoMetadataSummaryKey__title rdfs:label 'title'^^xsd:string ;
  dcterms:description "A name to succinctly identify the dataset to user. For example, San Francisco, California." .
:geoMetadataSummaryKey__description rdfs:label 'description'^^xsd:string ;
  dcterms:description "A brief textual description or summary of the content of the dataset. For example, LANDSAT 7 satellite imagery taken over northern Scotland." .
:geoMetadataSummaryKey__coordinateSystem rdfs:label 'coordinateSystem'^^xsd:string ;
  dcterms:description "The spatial reference frame used to represent the data (e.g., GD, UTM, or LCC). The list of valid codes that can be used in this field are defined in ISO/IEC 18026. In the case of UTM, the zone number should also be specified in the format UTM Zx, where the zone number is in the range [1,60]. For example, UTM Z11." .
:geoMetadataSummaryKey__horizontalDatum rdfs:label 'horizontalDatum'^^xsd:string ;
  dcterms:description "The name of the geodetic datum. The list of valid codes that can be used in this field are defined in ISO/IEC 18026. For example, W84." .
:geoMetadataSummaryKey__verticalDatum rdfs:label 'verticalDatum'^^xsd:string ;
  dcterms:description "The name of the vertical datum (geoid). The list of valid codes that can be used in this field are defined in ISO/IEC 18026. For example, W84." .
:geoMetadataSummaryKey__ellipsoid rdfs:label 'ellipsoid'^^xsd:string ;
  dcterms:description "The name of the geodetic ellipsoid. The list of valid codes that can be used in this field are defined in ISO/IEC 18026. For example, WE." .
:geoMetadataSummaryKey__extent rdfs:label 'extent'^^xsd:string ;
  dcterms:description "The bounding coordinates for the dataset given in spatial reference frame specified by the coordinateSystem keyword. These are provided in the order eastmost, southmost, westmost, northmost. An example for GD is: -180.0 -90.0 180.0 90.0." .
:geoMetadataSummaryKey__resolution rdfs:label 'resolution'^^xsd:string ;
  dcterms:description "SFFloat resolution, or ground sample distance, given in units of length base units. For example, 30." .
:geoMetadataSummaryKey__originator rdfs:label 'originator'^^xsd:string ;
  dcterms:description "A string defining the originator of the data, for example the author, agency, organization, publisher, etc. For example, John Doe, Any Corporation, Some Town, Some Country" .
:geoMetadataSummaryKey__copyright rdfs:label 'copyright'^^xsd:string ;
  dcterms:description "Any appropriate copyright declaration that pertains to the data. For example, (c) Copyright 2000, Any Corporation. All rights reserved. Freely distributable." .
:geoMetadataSummaryKey__date rdfs:label 'date'^^xsd:string ;
  dcterms:description "A single date/time, or a date/time range, defining the valid time period to which the data pertains. Dates are specified in the format YYYY MM DD [HH:MM]. Years in the current time period should be specified using four digits (EXAMPLE 1999 or 2001). Years can have other than four digits and can be negative. A date range is specified by supplying two values separated by a - (hyphen) character. An optional time can be supplied should this level of accuracy be required. Times are to be specified in 24-hour format with respect to GMT. For example, 1999 01 01 00:00 - 1999 12 31 23:59." .
:geoMetadataSummaryKey__metadataFormat rdfs:label 'metadataFormat'^^xsd:string ;
  dcterms:description "A string that specifies the format of the external metadata description specified by the url field of the GeoMetadata node. For example, FGDC, ISO TC211, CEN TC287, or OGC." .
:geoMetadataSummaryKey__dataUrl rdfs:label 'dataUrl'^^xsd:string ;
  dcterms:description "A hypertext link to the source data used to create the X3D node(s) to which this metadata pertains. Multiple dataUrl keyword/value pairs can be specified in order to provide alternative locations for the same source data. For example, https://www.foo.bar/data/sf1." .
:geoMetadataSummaryKey__dataFormat rdfs:label 'dataFormat'^^xsd:string ;
  dcterms:description "A free-text string that describes the format of the source data used to create the X3D node(s) to which this metadata pertains. This refers to the source data specified by the dataUrl keyword (if present). For example, USGS 5.5-min DEM." .

:geoSystemEarthEllipsoidValues rdf:type rdfs:Datatype ;
  rdfs:label "geoSystemEarthEllipsoidValues" ;
  dcterms:description "geoSystemEarthEllipsoidValues are allowed enumeration values of earth ellipsoids, providing second value for any geoSystem field that has first value GD. This list is unbounded, additional enumeration values are allowed..";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geospatial.html#Specifyingaspatialreference" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( 'AM' 'AN' 'BN' 'BR' 'CC' 'CD' 'EA' 'EB' 'EC' 'ED' 'EE' 'EF' 'FA' 'HE' 'HO' 'ID' 'IN' 'KA' 'RF' 'SA' 'WD' 'WE' 'WGS84' 'Zn' 'S' ) ] .

:geoSystemEarthEllipsoid__AM rdfs:label 'AM'^^xsd:string ;
  dcterms:description "Modified Airy" .
:geoSystemEarthEllipsoid__AN rdfs:label 'AN'^^xsd:string ;
  dcterms:description "Australian National" .
:geoSystemEarthEllipsoid__BN rdfs:label 'BN'^^xsd:string ;
  dcterms:description "Bessel 1841 (Namibia)" .
:geoSystemEarthEllipsoid__BR rdfs:label 'BR'^^xsd:string ;
  dcterms:description "Bessel 1841 (Ethiopia Indonesia ...)" .
:geoSystemEarthEllipsoid__CC rdfs:label 'CC'^^xsd:string ;
  dcterms:description "Clarke 1866" .
:geoSystemEarthEllipsoid__CD rdfs:label 'CD'^^xsd:string ;
  dcterms:description "Clarke 1880" .
:geoSystemEarthEllipsoid__EA rdfs:label 'EA'^^xsd:string ;
  dcterms:description "Everest (India 1830)" .
:geoSystemEarthEllipsoid__EB rdfs:label 'EB'^^xsd:string ;
  dcterms:description "Everest (Sabah & Sarawak)" .
:geoSystemEarthEllipsoid__EC rdfs:label 'EC'^^xsd:string ;
  dcterms:description "Everest (India 1956)" .
:geoSystemEarthEllipsoid__ED rdfs:label 'ED'^^xsd:string ;
  dcterms:description "Everest (W. Malaysia 1969)" .
:geoSystemEarthEllipsoid__EE rdfs:label 'EE'^^xsd:string ;
  dcterms:description "Everest (W. Malaysia & Singapore 1948)" .
:geoSystemEarthEllipsoid__EF rdfs:label 'EF'^^xsd:string ;
  dcterms:description "Everest (Pakistan)" .
:geoSystemEarthEllipsoid__FA rdfs:label 'FA'^^xsd:string ;
  dcterms:description "Modified Fischer 1960" .
:geoSystemEarthEllipsoid__HE rdfs:label 'HE'^^xsd:string ;
  dcterms:description "Helmert 1906" .
:geoSystemEarthEllipsoid__HO rdfs:label 'HO'^^xsd:string ;
  dcterms:description "Hough 1960" .
:geoSystemEarthEllipsoid__ID rdfs:label 'ID'^^xsd:string ;
  dcterms:description "Indonesia 1974" .
:geoSystemEarthEllipsoid__IN rdfs:label 'IN'^^xsd:string ;
  dcterms:description "International 1924" .
:geoSystemEarthEllipsoid__KA rdfs:label 'KA'^^xsd:string ;
  dcterms:description "Krassovsky 1940" .
:geoSystemEarthEllipsoid__RF rdfs:label 'RF'^^xsd:string ;
  dcterms:description "Geodetic Reference System 1980 (GRS 80)" .
:geoSystemEarthEllipsoid__SA rdfs:label 'SA'^^xsd:string ;
  dcterms:description "South American 1969" .
:geoSystemEarthEllipsoid__WD rdfs:label 'WD'^^xsd:string ;
  dcterms:description "WGS 72" .
:geoSystemEarthEllipsoid__WE rdfs:label 'WE'^^xsd:string ;
  dcterms:description "WGS 84" .
:geoSystemEarthEllipsoid__WGS84 rdfs:label 'WGS84'^^xsd:string ;
  dcterms:description "WGS84 geoid" .
:geoSystemEarthEllipsoid__Zn rdfs:label 'Zn'^^xsd:string ;
  dcterms:description "Zone number (1..60) (only used with UTM)" .
:geoSystemEarthEllipsoid__S rdfs:label 'S'^^xsd:string ;
  dcterms:description "Southern hemisphere (only used with UTM)" .

:geoSystemSpatialReferenceFrameValues rdf:type rdfs:Datatype ;
  rdfs:label "geoSystemSpatialReferenceFrameValues" ;
  dcterms:description "geoSystemSpatialReferenceFrameValues are allowed enumeration values of spatial reference frames and earth ellipsoids, providing first value for geoSystem field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geospatial.html#Spatialreferenceframes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'GD' 'UTM' 'GC' 'GDC' 'GCC' ) ] .

:geoSystemSpatialReferenceFrame__GD rdfs:label 'GD'^^xsd:string ;
  dcterms:description "Geodetic spatial reference frame (latitude/longitude), to be followed by ellipsoid" .
:geoSystemSpatialReferenceFrame__UTM rdfs:label 'UTM'^^xsd:string ;
  dcterms:description "Universal Transverse Mercator. One further required argument must be supplied for UTM in order to specify the zone number (1..60) with optional suffix of S may be appended in order to specify that the coordinates are in the southern hemisphere. Optional arguments can follow." .
:geoSystemSpatialReferenceFrame__GC rdfs:label 'GC'^^xsd:string ;
  dcterms:description "Earth-fixed Geocentric with respect to the WGS84 ellipsoid. No additional arguments are supported." .
:geoSystemSpatialReferenceFrame__GDC rdfs:label 'GDC'^^xsd:string ;
  dcterms:description "Synonymous to GD, but may be subject to future deprecation" .
:geoSystemSpatialReferenceFrame__GCC rdfs:label 'GCC'^^xsd:string ;
  dcterms:description "Synonymous to GC, but may be subject to future deprecation" .

:geoSystemType rdf:type rdfs:Datatype ;
  rdfs:label "geoSystemType" ;
  dcterms:description "The first enumeration value of geoSystem is one of geoSystemSpatialReferenceFrameValues. If first value is GD, then second enumeration value is one of geoSystemEarthEllipsoidValues.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/geospatial.html#Specifyingaspatialreference" .

:hanimFeaturePointNameValues rdf:type rdfs:Datatype ;
  rdfs:label "hanimFeaturePointNameValues" ;
  dcterms:description "Feature point names for identification of HAnimSite/HAnimDIsplacer nodes as defined in the HAnim Architecture specification";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/FeaturePoints.html" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'skull_vertex' 'glabella' 'sellion' 'l_infraorbitale' 'l_tragion' 'l_gonion' 'r_infraorbitale' 'r_tragion' 'r_gonion' 'supramenton' 'cervicale' 'adams_apple' 'suprasternale' 'substernale' 'l_clavicle' 'l_acromion' 'l_axilla_proximal' 'l_axilla_distal' 'l_axilla_posterior_folds' 'r_clavicle' 'r_acromion' 'r_axilla_proximal' 'r_axilla_distal' 'r_axilla_posterior_folds' 'spine_1_middle_back' 'spine_2_lower_back' 'waist_preferred_anterior' 'waist_preferred_posterior' 'l_rib10' 'l_thelion' 'r_rib10' 'r_thelion' 'l_asis' 'l_iliocristale' 'l_psis' 'r_asis' 'r_iliocristale' 'r_psis' 'crotch' 'l_femoral_lateral_epicondyle' 'l_femoral_medial_epicondyle' 'l_suprapatella' 'l_trochanterion' 'r_femoral_lateral_epicondyle' 'r_femoral_medial_epicondyle' 'r_suprapatella' 'r_trochanterion' 'l_tibiale' 'l_medial_malleolus' 'l_lateral_malleolus' 'l_sphyrion' 'r_tibiale' 'r_medial_malleolus' 'r_lateral_malleolus' 'r_sphyrion' 'l_metatarsal_phalanx_1' 'l_metatarsal_phalanx_5' 'l_dactylion' 'l_calcaneus_posterior' 'r_metatarsal_phalanx_1' 'r_metatarsal_phalanx_5' 'r_dactylion' 'r_calcaneus_posterior' 'l_humeral_lateral_epicondyle' 'l_humeral_medial_epicondyle' 'l_olecranon' 'r_humeral_lateral_epicondyle' 'r_humeral_medial_epicondyle' 'r_olecranon' 'l_radiale' 'l_ulnar_styloid' 'l_radial_styloid' 'r_radiale' 'r_ulnar_styloid' 'r_radial_styloid' 'l_metacarpal_phalanx_2' 'l_metacarpal_phalanx_3' 'l_metacarpal_phalanx_5' 'r_metacarpal_phalanx_2' 'r_metacarpal_phalanx_3' 'r_metacarpal_phalanx_5' 'nuchale' 'l_neck_base' 'r_neck_base' 'navel' 'l_ectocanthus' 'r_ectocanthus' 'menton' 'mesosternale' 'opisthocranion' 'l_knee_crease' 'r_knee_crease' 'rear_center_midsagittal_plane' 'buttocks_standing_wall_contact_point' 'l_chest_midsagittal_plane' 'r_chest_midsagittal_plane' 'l_bideltoid' 'r_bideltoid' 'l_carpal_distal_phalanx_1' 'l_carpal_distal_phalanx_2' 'l_carpal_distal_phalanx_3' 'l_carpal_distal_phalanx_4' 'l_carpal_distal_phalanx_5' 'r_carpal_distal_phalanx_1' 'r_carpal_distal_phalanx_2' 'r_carpal_distal_phalanx_3' 'r_carpal_distal_phalanx_4' 'r_carpal_distal_phalanx_5' 'l_tarsal_distal_phalanx_1' 'l_tarsal_distal_phalanx_2' 'l_tarsal_distal_phalanx_3' 'l_tarsal_distal_phalanx_4' 'l_tarsal_distal_phalanx_5' 'r_tarsal_distal_phalanx_1' 'r_tarsal_distal_phalanx_2' 'r_tarsal_distal_phalanx_3' 'r_tarsal_distal_phalanx_4' 'r_tarsal_distal_phalanx_5' ) ] .

:hanimFeaturePointName__skull_vertex rdfs:label 'skull_vertex'^^xsd:string ;
  dcterms:description "CAESAR 2003 skull_vertex matches ISO 7250-1 part 5.22 Vertex (top of head). No corresponding landmark provided in CAESAR 2018.";
  dcterms:reference "https://en.wikipedia.org/wiki/Vertex_(anatomy)" .
:hanimFeaturePointName__glabella rdfs:label 'glabella'^^xsd:string ;
  dcterms:description "glabella is between the eyebrows and above the nose";
  dcterms:reference "https://en.wikipedia.org/wiki/Glabella" .
:hanimFeaturePointName__sellion rdfs:label 'sellion'^^xsd:string ;
  dcterms:description "osseocartilaginous junction of the nasal dorsum";
  dcterms:reference "https://en.wikipedia.org/wiki/Human_head" .
:hanimFeaturePointName__l_infraorbitale rdfs:label 'l_infraorbitale'^^xsd:string ;
  dcterms:description "Left Infraorbitale foramen is opening in maxillary bone of skull located below the infraorbital margin of the orbit.";
  dcterms:reference "https://en.wikipedia.org/wiki/Infraorbital_foramen" .
:hanimFeaturePointName__l_tragion rdfs:label 'l_tragion'^^xsd:string ;
  dcterms:description "notch just above the tragus of the ear";
  dcterms:reference "https://en.wiktionary.org/wiki/tragion" .
:hanimFeaturePointName__l_gonion rdfs:label 'l_gonion'^^xsd:string ;
  dcterms:description "Left Gonion is midpoint of mandibular angle of the jaw.";
  dcterms:reference "https://en.wikipedia.org/wiki/Angle_of_the_mandible" .
:hanimFeaturePointName__r_infraorbitale rdfs:label 'r_infraorbitale'^^xsd:string ;
  dcterms:description "Right Infraorbitale foramen is opening in maxillary bone of skull located below the infraorbital margin of the orbit.";
  dcterms:reference "https://en.wikipedia.org/wiki/Infraorbital_foramen" .
:hanimFeaturePointName__r_tragion rdfs:label 'r_tragion'^^xsd:string ;
  dcterms:description "notch just above the tragus of the ear";
  dcterms:reference "https://en.wiktionary.org/wiki/tragion" .
:hanimFeaturePointName__r_gonion rdfs:label 'r_gonion'^^xsd:string ;
  dcterms:description "Right Gonion is midpoint of the mandibular angle of the jaw.";
  dcterms:reference "https://en.wikipedia.org/wiki/Angle_of_the_mandible" .
:hanimFeaturePointName__supramenton rdfs:label 'supramenton'^^xsd:string ;
  dcterms:description "center point above tip of chin";
  dcterms:reference "http://www.cs.uu.nl/groups/MG/multimedia/publications/art/rsfp05.pdf" .
:hanimFeaturePointName__cervicale rdfs:label 'cervicale'^^xsd:string ;
  dcterms:reference "https://www.merriam-webster.com/dictionary/cervicale" .
:hanimFeaturePointName__adams_apple rdfs:label 'adams_apple'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Adam_s_apple" .
:hanimFeaturePointName__suprasternale rdfs:label 'suprasternale'^^xsd:string ;
  dcterms:description "Suprasternale";
  dcterms:reference "https://medical-dictionary.thefreedictionary.com/spatium+suprasternale" .
:hanimFeaturePointName__substernale rdfs:label 'substernale'^^xsd:string ;
  dcterms:reference "https://medical-dictionary.thefreedictionary.com/spatium+substernale" .
:hanimFeaturePointName__l_clavicle rdfs:label 'l_clavicle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Clavicle" .
:hanimFeaturePointName__l_acromion rdfs:label 'l_acromion'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Acromion" .
:hanimFeaturePointName__l_axilla_proximal rdfs:label 'l_axilla_proximal'^^xsd:string ;
  dcterms:description "Left Axilla Proximal (Anterior)";
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__l_axilla_distal rdfs:label 'l_axilla_distal'^^xsd:string ;
  dcterms:description "Left Axilla Distal (Posterior)";
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__l_axilla_posterior_folds rdfs:label 'l_axilla_posterior_folds'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__r_clavicle rdfs:label 'r_clavicle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Clavicle" .
:hanimFeaturePointName__r_acromion rdfs:label 'r_acromion'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Acromion" .
:hanimFeaturePointName__r_axilla_proximal rdfs:label 'r_axilla_proximal'^^xsd:string ;
  dcterms:description "Right Axilla Proximal (Anterior)";
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__r_axilla_distal rdfs:label 'r_axilla_distal'^^xsd:string ;
  dcterms:description "Right Axilla Distal (Posterior)";
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__r_axilla_posterior_folds rdfs:label 'r_axilla_posterior_folds'^^xsd:string ;
  dcterms:description "Right Posterior Axillary Folds";
  dcterms:reference "https://en.wikipedia.org/wiki/Axilla" .
:hanimFeaturePointName__spine_1_middle_back rdfs:label 'spine_1_middle_back'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimFeaturePointName__spine_2_lower_back rdfs:label 'spine_2_lower_back'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimFeaturePointName__waist_preferred_anterior rdfs:label 'waist_preferred_anterior'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Waist" .
:hanimFeaturePointName__waist_preferred_posterior rdfs:label 'waist_preferred_posterior'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Waist" .
:hanimFeaturePointName__l_rib10 rdfs:label 'l_rib10'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Rib" .
:hanimFeaturePointName__l_thelion rdfs:label 'l_thelion'^^xsd:string ;
  dcterms:reference "https://www.cdc.gov/niosh/data/datasets/rd-1008-2016-0/pdfs/EMT-Data-Dictionary-508.pdf" .
:hanimFeaturePointName__r_rib10 rdfs:label 'r_rib10'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Rib" .
:hanimFeaturePointName__r_thelion rdfs:label 'r_thelion'^^xsd:string ;
  dcterms:reference "https://www.cdc.gov/niosh/data/datasets/rd-1008-2016-0/pdfs/EMT-Data-Dictionary-508.pdf" .
:hanimFeaturePointName__l_asis rdfs:label 'l_asis'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Anterior_superior_iliac_spine" .
:hanimFeaturePointName__l_iliocristale rdfs:label 'l_iliocristale'^^xsd:string ;
  dcterms:reference "https://www.topendsports.com/testing/skinfold-iliac-crest.htm" .
:hanimFeaturePointName__l_psis rdfs:label 'l_psis'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Posterior_superior_iliac_spine" .
:hanimFeaturePointName__r_asis rdfs:label 'r_asis'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Anterior_superior_iliac_spine" .
:hanimFeaturePointName__r_iliocristale rdfs:label 'r_iliocristale'^^xsd:string ;
  dcterms:reference "https://www.topendsports.com/testing/skinfold-iliac-crest.htm" .
:hanimFeaturePointName__r_psis rdfs:label 'r_psis'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Posterior_superior_iliac_spine" .
:hanimFeaturePointName__crotch rdfs:label 'crotch'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Crotch" .
:hanimFeaturePointName__l_femoral_lateral_epicondyle rdfs:label 'l_femoral_lateral_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Lateral_epicondyle_of_the_femur" .
:hanimFeaturePointName__l_femoral_medial_epicondyle rdfs:label 'l_femoral_medial_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Medial_epicondyle_of_the_femur" .
:hanimFeaturePointName__l_suprapatella rdfs:label 'l_suprapatella'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Patella" .
:hanimFeaturePointName__l_trochanterion rdfs:label 'l_trochanterion'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trochanter" .
:hanimFeaturePointName__r_femoral_lateral_epicondyle rdfs:label 'r_femoral_lateral_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Lateral_epicondyle_of_the_femur" .
:hanimFeaturePointName__r_femoral_medial_epicondyle rdfs:label 'r_femoral_medial_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Medial_epicondyle_of_the_femur" .
:hanimFeaturePointName__r_suprapatella rdfs:label 'r_suprapatella'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Patella" .
:hanimFeaturePointName__r_trochanterion rdfs:label 'r_trochanterion'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trochanter" .
:hanimFeaturePointName__l_tibiale rdfs:label 'l_tibiale'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Accessory_navicular_bone" .
:hanimFeaturePointName__l_medial_malleolus rdfs:label 'l_medial_malleolus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Malleolus" .
:hanimFeaturePointName__l_lateral_malleolus rdfs:label 'l_lateral_malleolus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Malleolus" .
:hanimFeaturePointName__l_sphyrion rdfs:label 'l_sphyrion'^^xsd:string ;
  dcterms:reference "http://www.oxfordreference.com/view/10.1093/oi/authority.20110803100523385" .
:hanimFeaturePointName__r_tibiale rdfs:label 'r_tibiale'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Accessory_navicular_bone" .
:hanimFeaturePointName__r_medial_malleolus rdfs:label 'r_medial_malleolus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Malleolus" .
:hanimFeaturePointName__r_lateral_malleolus rdfs:label 'r_lateral_malleolus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Malleolus" .
:hanimFeaturePointName__r_sphyrion rdfs:label 'r_sphyrion'^^xsd:string ;
  dcterms:reference "http://www.oxfordreference.com/view/10.1093/oi/authority.20110803100523385" .
:hanimFeaturePointName__l_metatarsal_phalanx_1 rdfs:label 'l_metatarsal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimFeaturePointName__l_metatarsal_phalanx_5 rdfs:label 'l_metatarsal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimFeaturePointName__l_dactylion rdfs:label 'l_dactylion'^^xsd:string ;
  dcterms:reference "https://en.wiktionary.org/wiki/dactylion" .
:hanimFeaturePointName__l_calcaneus_posterior rdfs:label 'l_calcaneus_posterior'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneus" .
:hanimFeaturePointName__r_metatarsal_phalanx_1 rdfs:label 'r_metatarsal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimFeaturePointName__r_metatarsal_phalanx_5 rdfs:label 'r_metatarsal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimFeaturePointName__r_dactylion rdfs:label 'r_dactylion'^^xsd:string ;
  dcterms:reference "https://en.wiktionary.org/wiki/dactylion" .
:hanimFeaturePointName__r_calcaneus_posterior rdfs:label 'r_calcaneus_posterior'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneus" .
:hanimFeaturePointName__l_humeral_lateral_epicondyle rdfs:label 'l_humeral_lateral_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Lateral_epicondyle_of_the_humerus" .
:hanimFeaturePointName__l_humeral_medial_epicondyle rdfs:label 'l_humeral_medial_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Medial_epicondyle_of_the_humerus" .
:hanimFeaturePointName__l_olecranon rdfs:label 'l_olecranon'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Olecranon" .
:hanimFeaturePointName__r_humeral_lateral_epicondyle rdfs:label 'r_humeral_lateral_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Lateral_epicondyle_of_the_humerus" .
:hanimFeaturePointName__r_humeral_medial_epicondyle rdfs:label 'r_humeral_medial_epicondyle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Medial_epicondyle_of_the_humerus" .
:hanimFeaturePointName__r_olecranon rdfs:label 'r_olecranon'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Olecranon" .
:hanimFeaturePointName__l_radiale rdfs:label 'l_radiale'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpal_bones" .
:hanimFeaturePointName__l_ulnar_styloid rdfs:label 'l_ulnar_styloid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Ulnar_styloid_process" .
:hanimFeaturePointName__l_radial_styloid rdfs:label 'l_radial_styloid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Radial_styloid_process" .
:hanimFeaturePointName__r_radiale rdfs:label 'r_radiale'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpal_bones" .
:hanimFeaturePointName__r_ulnar_styloid rdfs:label 'r_ulnar_styloid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Ulnar_styloid_process" .
:hanimFeaturePointName__r_radial_styloid rdfs:label 'r_radial_styloid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Radial_styloid_process" .
:hanimFeaturePointName__l_metacarpal_phalanx_2 rdfs:label 'l_metacarpal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__l_metacarpal_phalanx_3 rdfs:label 'l_metacarpal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__l_metacarpal_phalanx_5 rdfs:label 'l_metacarpal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__r_metacarpal_phalanx_2 rdfs:label 'r_metacarpal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__r_metacarpal_phalanx_3 rdfs:label 'r_metacarpal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__r_metacarpal_phalanx_5 rdfs:label 'r_metacarpal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimFeaturePointName__nuchale rdfs:label 'nuchale'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Squamous_part_of_occipital_bone" .
:hanimFeaturePointName__l_neck_base rdfs:label 'l_neck_base'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Neck" .
:hanimFeaturePointName__r_neck_base rdfs:label 'r_neck_base'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Neck" .
:hanimFeaturePointName__navel rdfs:label 'navel'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Navel" .
:hanimFeaturePointName__l_ectocanthus rdfs:label 'l_ectocanthus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Canthus" .
:hanimFeaturePointName__r_ectocanthus rdfs:label 'r_ectocanthus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Canthus" .
:hanimFeaturePointName__menton rdfs:label 'menton'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Human_head" .
:hanimFeaturePointName__mesosternale rdfs:label 'mesosternale'^^xsd:string ;
  dcterms:reference "https://en.wiktionary.org/wiki/mesosternum" .
:hanimFeaturePointName__opisthocranion rdfs:label 'opisthocranion'^^xsd:string ;
  dcterms:reference "http://www.columbia.edu/itc/hs/medical/humanAnatomy/yuan/craniologyISlides.pdf" .
:hanimFeaturePointName__l_knee_crease rdfs:label 'l_knee_crease'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Popliteal_fossa" .
:hanimFeaturePointName__r_knee_crease rdfs:label 'r_knee_crease'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Popliteal_fossa" .
:hanimFeaturePointName__rear_center_midsagittal_plane rdfs:label 'rear_center_midsagittal_plane'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Median_plane" .
:hanimFeaturePointName__buttocks_standing_wall_contact_point rdfs:label 'buttocks_standing_wall_contact_point'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Buttocks" .
:hanimFeaturePointName__l_chest_midsagittal_plane rdfs:label 'l_chest_midsagittal_plane'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sagittal_plane" .
:hanimFeaturePointName__r_chest_midsagittal_plane rdfs:label 'r_chest_midsagittal_plane'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sagittal_plane" .
:hanimFeaturePointName__l_bideltoid rdfs:label 'l_bideltoid'^^xsd:string ;
  dcterms:reference "https://en.wiktionary.org/wiki/bideltoid" .
:hanimFeaturePointName__r_bideltoid rdfs:label 'r_bideltoid'^^xsd:string ;
  dcterms:reference "https://en.wiktionary.org/wiki/bideltoid" .
:hanimFeaturePointName__l_carpal_distal_phalanx_1 rdfs:label 'l_carpal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_carpal_distal_phalanx_2 rdfs:label 'l_carpal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_carpal_distal_phalanx_3 rdfs:label 'l_carpal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_carpal_distal_phalanx_4 rdfs:label 'l_carpal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_carpal_distal_phalanx_5 rdfs:label 'l_carpal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_carpal_distal_phalanx_1 rdfs:label 'r_carpal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_carpal_distal_phalanx_2 rdfs:label 'r_carpal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_carpal_distal_phalanx_3 rdfs:label 'r_carpal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_carpal_distal_phalanx_4 rdfs:label 'r_carpal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_carpal_distal_phalanx_5 rdfs:label 'r_carpal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_tarsal_distal_phalanx_1 rdfs:label 'l_tarsal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_tarsal_distal_phalanx_2 rdfs:label 'l_tarsal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_tarsal_distal_phalanx_3 rdfs:label 'l_tarsal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_tarsal_distal_phalanx_4 rdfs:label 'l_tarsal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__l_tarsal_distal_phalanx_5 rdfs:label 'l_tarsal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_tarsal_distal_phalanx_1 rdfs:label 'r_tarsal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_tarsal_distal_phalanx_2 rdfs:label 'r_tarsal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_tarsal_distal_phalanx_3 rdfs:label 'r_tarsal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_tarsal_distal_phalanx_4 rdfs:label 'r_tarsal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimFeaturePointName__r_tarsal_distal_phalanx_5 rdfs:label 'r_tarsal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .

:hanimHumanoidInfoKeyValues rdf:type rdfs:Datatype ;
  rdfs:label "hanimHumanoidInfoKeyValues" ;
  dcterms:description "Enumerated keyword names for keyword=value metadata pairs describing a given HAnimHumanoid. Additional keyword=value pairs may be included as needed for specific applications. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/ObjectInterfaces.html#Humanoid" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'authorName' 'authorEmail' 'copyright' 'creationDate' 'usageRestrictions' 'humanoidVersion' 'age' 'gender' 'height' 'weight' ) ] .

:hanimHumanoidInfoKey__authorName rdfs:label 'authorName'^^xsd:string ;
  dcterms:description "Name of Humanoid author." .
:hanimHumanoidInfoKey__authorEmail rdfs:label 'authorEmail'^^xsd:string ;
  dcterms:description "Email address of Humanoid author." .
:hanimHumanoidInfoKey__copyright rdfs:label 'copyright'^^xsd:string ;
  dcterms:description "Copyright information for this Humanoid model (if any)." .
:hanimHumanoidInfoKey__creationDate rdfs:label 'creationDate'^^xsd:string ;
  dcterms:description "Creation data for this for this Humanoid model." .
:hanimHumanoidInfoKey__usageRestrictions rdfs:label 'usageRestrictions'^^xsd:string ;
  dcterms:description "Usage restrictions for this Humanoid model (if any)." .
:hanimHumanoidInfoKey__humanoidVersion rdfs:label 'humanoidVersion'^^xsd:string ;
  dcterms:description "The humanoidVersion term refers to the version of the humanoid being used, in order to track revisions to the data. It is not the same as the version field of the Humanoid object, which refers to the version of the HAnim specification that was used when building the humanoid." .
:hanimHumanoidInfoKey__age rdfs:label 'age'^^xsd:string ;
  dcterms:description "Description of Humanoid age (not necessarily numeric)." .
:hanimHumanoidInfoKey__gender rdfs:label 'gender'^^xsd:string ;
  dcterms:description "The gender term typically has a value of female, male or neuter." .
:hanimHumanoidInfoKey__height rdfs:label 'height'^^xsd:string ;
  dcterms:description "SFFloat Humanoid height in base units (typically meters)." .
:hanimHumanoidInfoKey__weight rdfs:label 'weight'^^xsd:string ;
  dcterms:description "SFFloat Humanoid weight in base units (typically kilograms)." .

:hanimJointNameValues rdf:type rdfs:Datatype ;
  rdfs:label "hanimJointNameValues" ;
  dcterms:description "CAESAR joint names for identification of HAnimJoint nodes as defined in the HAnim Architecture specification. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/concepts.html#Hierarchy" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'humanoid_root' 'sacroiliac' 'l_hip' 'l_knee' 'l_talocrural' 'l_talocalcaneonavicular' 'l_cuneonavicular_1' 'l_tarsometatarsal_1' 'l_metatarsophalangeal_1' 'l_tarsal_interphalangeal_1' 'l_cuneonavicular_2' 'l_tarsometatarsal_2' 'l_metatarsophalangeal_2' 'l_tarsal_proximal_interphalangeal_2' 'l_tarsal_distal_interphalangeal_2' 'l_cuneonavicular_3' 'l_tarsometatarsal_3' 'l_metatarsophalangeal_3' 'l_tarsal_proximal_interphalangeal_3' 'l_tarsal_distal_interphalangeal_3' 'l_calcaneocuboid' 'l_transversetarsal' 'l_tarsometatarsal_4' 'l_metatarsophalangeal_4' 'l_tarsal_proximal_interphalangeal_4' 'l_tarsal_distal_interphalangeal_4' 'l_tarsometatarsal_5' 'l_metatarsophalangeal_5' 'l_tarsal_proximal_interphalangeal_5' 'l_tarsal_distal_interphalangeal_5' 'r_hip' 'r_knee' 'r_talocrural' 'r_talocalcaneonavicular' 'r_cuneonavicular_1' 'r_tarsometatarsal_1' 'r_metatarsophalangeal_1' 'r_tarsal_interphalangeal_1' 'r_cuneonavicular_2' 'r_tarsometatarsal_2' 'r_metatarsophalangeal_2' 'r_tarsal_proximal_interphalangeal_2' 'r_tarsal_distal_interphalangeal_2' 'r_cuneonavicular_3' 'r_tarsometatarsal_3' 'r_metatarsophalangeal_3' 'r_tarsal_proximal_interphalangeal_3' 'r_tarsal_distal_interphalangeal_3' 'r_calcaneocuboid' 'r_transversetarsal' 'r_tarsometatarsal_4' 'r_metatarsophalangeal_4' 'r_tarsal_proximal_interphalangeal_4' 'r_tarsal_distal_interphalangeal_4' 'r_tarsometatarsal_5' 'r_metatarsophalangeal_5' 'r_tarsal_proximal_interphalangeal_5' 'r_tarsal_distal_interphalangeal_5' 'vl5' 'vl4' 'vl3' 'vl2' 'vl1' 'vt12' 'vt11' 'vt10' 'vt9' 'vt8' 'vt7' 'vt6' 'vt5' 'vt4' 'vt3' 'vt2' 'vt1' 'vc7' 'vc6' 'vc5' 'vc4' 'vc3' 'vc2' 'vc1' 'skullbase' 'l_eyelid_joint' 'r_eyelid_joint' 'l_eyeball_joint' 'r_eyeball_joint' 'l_eyebrow_joint' 'r_eyebrow_joint' 'temporomandibular' 'l_sternoclavicular' 'l_acromioclavicular' 'l_shoulder' 'l_elbow' 'l_radiocarpal' 'l_midcarpal_1' 'l_carpometacarpal_1' 'l_metacarpophalangeal_1' 'l_carpal_interphalangeal_1' 'l_midcarpal_2' 'l_carpometacarpal_2' 'l_metacarpophalangeal_2' 'l_carpal_proximal_interphalangeal_2' 'l_carpal_distal_interphalangeal_2' 'l_midcarpal_3' 'l_carpometacarpal_3' 'l_metacarpophalangeal_3' 'l_carpal_proximal_interphalangeal_3' 'l_carpal_distal_interphalangeal_3' 'l_midcarpal_4_5' 'l_carpometacarpal_4' 'l_metacarpophalangeal_4' 'l_carpal_proximal_interphalangeal_4' 'l_carpal_distal_interphalangeal_4' 'l_carpometacarpal_5' 'l_metacarpophalangeal_5' 'l_carpal_proximal_interphalangeal_5' 'l_carpal_distal_interphalangeal_5' 'r_sternoclavicular' 'r_acromioclavicular' 'r_shoulder' 'r_elbow' 'r_radiocarpal' 'r_midcarpal_1' 'r_carpometacarpal_1' 'r_metacarpophalangeal_1' 'r_carpal_interphalangeal_1' 'r_midcarpal_2' 'r_carpometacarpal_2' 'r_metacarpophalangeal_2' 'r_carpal_proximal_interphalangeal_2' 'r_carpal_distal_interphalangeal_2' 'r_midcarpal_3' 'r_carpometacarpal_3' 'r_metacarpophalangeal_3' 'r_carpal_proximal_interphalangeal_3' 'r_carpal_distal_interphalangeal_3' 'r_midcarpal_4_5' 'r_carpometacarpal_4' 'r_metacarpophalangeal_4' 'r_carpal_proximal_interphalangeal_4' 'r_carpal_distal_interphalangeal_4' 'r_carpometacarpal_5' 'r_metacarpophalangeal_5' 'r_carpal_proximal_interphalangeal_5' 'r_carpal_distal_interphalangeal_5' ) ] .

:hanimJointName__humanoid_root rdfs:label 'humanoid_root'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Outline_of_human_anatomy#Joints" .
:hanimJointName__sacroiliac rdfs:label 'sacroiliac'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sacroiliac_joint" .
:hanimJointName__l_hip rdfs:label 'l_hip'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Hip" .
:hanimJointName__l_knee rdfs:label 'l_knee'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Knee" .
:hanimJointName__l_talocrural rdfs:label 'l_talocrural'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Ankle" .
:hanimJointName__l_talocalcaneonavicular rdfs:label 'l_talocalcaneonavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Subtalar_joint" .
:hanimJointName__l_cuneonavicular_1 rdfs:label 'l_cuneonavicular_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__l_tarsometatarsal_1 rdfs:label 'l_tarsometatarsal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__l_metatarsophalangeal_1 rdfs:label 'l_metatarsophalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__l_tarsal_interphalangeal_1 rdfs:label 'l_tarsal_interphalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_cuneonavicular_2 rdfs:label 'l_cuneonavicular_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__l_tarsometatarsal_2 rdfs:label 'l_tarsometatarsal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__l_metatarsophalangeal_2 rdfs:label 'l_metatarsophalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__l_tarsal_proximal_interphalangeal_2 rdfs:label 'l_tarsal_proximal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_tarsal_distal_interphalangeal_2 rdfs:label 'l_tarsal_distal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_cuneonavicular_3 rdfs:label 'l_cuneonavicular_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__l_tarsometatarsal_3 rdfs:label 'l_tarsometatarsal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__l_metatarsophalangeal_3 rdfs:label 'l_metatarsophalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__l_tarsal_proximal_interphalangeal_3 rdfs:label 'l_tarsal_proximal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_tarsal_distal_interphalangeal_3 rdfs:label 'l_tarsal_distal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_calcaneocuboid rdfs:label 'l_calcaneocuboid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneocuboid_joint" .
:hanimJointName__l_transversetarsal rdfs:label 'l_transversetarsal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Transverse_tarsal_joint" .
:hanimJointName__l_tarsometatarsal_4 rdfs:label 'l_tarsometatarsal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__l_metatarsophalangeal_4 rdfs:label 'l_metatarsophalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__l_tarsal_proximal_interphalangeal_4 rdfs:label 'l_tarsal_proximal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_tarsal_distal_interphalangeal_4 rdfs:label 'l_tarsal_distal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_tarsometatarsal_5 rdfs:label 'l_tarsometatarsal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__l_metatarsophalangeal_5 rdfs:label 'l_metatarsophalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__l_tarsal_proximal_interphalangeal_5 rdfs:label 'l_tarsal_proximal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__l_tarsal_distal_interphalangeal_5 rdfs:label 'l_tarsal_distal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_hip rdfs:label 'r_hip'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Hip" .
:hanimJointName__r_knee rdfs:label 'r_knee'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Knee" .
:hanimJointName__r_talocrural rdfs:label 'r_talocrural'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Ankle" .
:hanimJointName__r_talocalcaneonavicular rdfs:label 'r_talocalcaneonavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Subtalar_joint" .
:hanimJointName__r_cuneonavicular_1 rdfs:label 'r_cuneonavicular_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__r_tarsometatarsal_1 rdfs:label 'r_tarsometatarsal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__r_metatarsophalangeal_1 rdfs:label 'r_metatarsophalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__r_tarsal_interphalangeal_1 rdfs:label 'r_tarsal_interphalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_cuneonavicular_2 rdfs:label 'r_cuneonavicular_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__r_tarsometatarsal_2 rdfs:label 'r_tarsometatarsal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__r_metatarsophalangeal_2 rdfs:label 'r_metatarsophalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__r_tarsal_proximal_interphalangeal_2 rdfs:label 'r_tarsal_proximal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_tarsal_distal_interphalangeal_2 rdfs:label 'r_tarsal_distal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_cuneonavicular_3 rdfs:label 'r_cuneonavicular_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneonavicular_joint" .
:hanimJointName__r_tarsometatarsal_3 rdfs:label 'r_tarsometatarsal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__r_metatarsophalangeal_3 rdfs:label 'r_metatarsophalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__r_tarsal_proximal_interphalangeal_3 rdfs:label 'r_tarsal_proximal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_tarsal_distal_interphalangeal_3 rdfs:label 'r_tarsal_distal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_calcaneocuboid rdfs:label 'r_calcaneocuboid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneocuboid_joint" .
:hanimJointName__r_transversetarsal rdfs:label 'r_transversetarsal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Transverse_tarsal_joint" .
:hanimJointName__r_tarsometatarsal_4 rdfs:label 'r_tarsometatarsal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__r_metatarsophalangeal_4 rdfs:label 'r_metatarsophalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__r_tarsal_proximal_interphalangeal_4 rdfs:label 'r_tarsal_proximal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_tarsal_distal_interphalangeal_4 rdfs:label 'r_tarsal_distal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_tarsometatarsal_5 rdfs:label 'r_tarsometatarsal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Tarsometatarsal_joints" .
:hanimJointName__r_metatarsophalangeal_5 rdfs:label 'r_metatarsophalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsophalangeal_joints" .
:hanimJointName__r_tarsal_proximal_interphalangeal_5 rdfs:label 'r_tarsal_proximal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__r_tarsal_distal_interphalangeal_5 rdfs:label 'r_tarsal_distal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_foot" .
:hanimJointName__vl5 rdfs:label 'vl5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vl4 rdfs:label 'vl4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vl3 rdfs:label 'vl3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vl2 rdfs:label 'vl2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vl1 rdfs:label 'vl1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt12 rdfs:label 'vt12'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt11 rdfs:label 'vt11'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt10 rdfs:label 'vt10'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt9 rdfs:label 'vt9'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt8 rdfs:label 'vt8'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt7 rdfs:label 'vt7'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt6 rdfs:label 'vt6'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt5 rdfs:label 'vt5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt4 rdfs:label 'vt4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt3 rdfs:label 'vt3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt2 rdfs:label 'vt2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vt1 rdfs:label 'vt1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc7 rdfs:label 'vc7'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc6 rdfs:label 'vc6'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc5 rdfs:label 'vc5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc4 rdfs:label 'vc4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc3 rdfs:label 'vc3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc2 rdfs:label 'vc2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__vc1 rdfs:label 'vc1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimJointName__skullbase rdfs:label 'skullbase'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Skull" .
:hanimJointName__l_eyelid_joint rdfs:label 'l_eyelid_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyelid" .
:hanimJointName__r_eyelid_joint rdfs:label 'r_eyelid_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyelid" .
:hanimJointName__l_eyeball_joint rdfs:label 'l_eyeball_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eye" .
:hanimJointName__r_eyeball_joint rdfs:label 'r_eyeball_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eye" .
:hanimJointName__l_eyebrow_joint rdfs:label 'l_eyebrow_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyebrow" .
:hanimJointName__r_eyebrow_joint rdfs:label 'r_eyebrow_joint'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyebrow" .
:hanimJointName__temporomandibular rdfs:label 'temporomandibular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Temporomandibular_joint" .
:hanimJointName__l_sternoclavicular rdfs:label 'l_sternoclavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sternoclavicular_joint" .
:hanimJointName__l_acromioclavicular rdfs:label 'l_acromioclavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Acromioclavicular_joint" .
:hanimJointName__l_shoulder rdfs:label 'l_shoulder'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Shoulder" .
:hanimJointName__l_elbow rdfs:label 'l_elbow'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Elbow" .
:hanimJointName__l_radiocarpal rdfs:label 'l_radiocarpal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Wrist" .
:hanimJointName__l_midcarpal_1 rdfs:label 'l_midcarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__l_carpometacarpal_1 rdfs:label 'l_carpometacarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__l_metacarpophalangeal_1 rdfs:label 'l_metacarpophalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__l_carpal_interphalangeal_1 rdfs:label 'l_carpal_interphalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_midcarpal_2 rdfs:label 'l_midcarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__l_carpometacarpal_2 rdfs:label 'l_carpometacarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__l_metacarpophalangeal_2 rdfs:label 'l_metacarpophalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__l_carpal_proximal_interphalangeal_2 rdfs:label 'l_carpal_proximal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_carpal_distal_interphalangeal_2 rdfs:label 'l_carpal_distal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_midcarpal_3 rdfs:label 'l_midcarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__l_carpometacarpal_3 rdfs:label 'l_carpometacarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__l_metacarpophalangeal_3 rdfs:label 'l_metacarpophalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__l_carpal_proximal_interphalangeal_3 rdfs:label 'l_carpal_proximal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_carpal_distal_interphalangeal_3 rdfs:label 'l_carpal_distal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_midcarpal_4_5 rdfs:label 'l_midcarpal_4_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__l_carpometacarpal_4 rdfs:label 'l_carpometacarpal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__l_metacarpophalangeal_4 rdfs:label 'l_metacarpophalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__l_carpal_proximal_interphalangeal_4 rdfs:label 'l_carpal_proximal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_carpal_distal_interphalangeal_4 rdfs:label 'l_carpal_distal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_carpometacarpal_5 rdfs:label 'l_carpometacarpal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__l_metacarpophalangeal_5 rdfs:label 'l_metacarpophalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__l_carpal_proximal_interphalangeal_5 rdfs:label 'l_carpal_proximal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__l_carpal_distal_interphalangeal_5 rdfs:label 'l_carpal_distal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_sternoclavicular rdfs:label 'r_sternoclavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sternoclavicular_joint" .
:hanimJointName__r_acromioclavicular rdfs:label 'r_acromioclavicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Acromioclavicular_joint" .
:hanimJointName__r_shoulder rdfs:label 'r_shoulder'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Shoulder" .
:hanimJointName__r_elbow rdfs:label 'r_elbow'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Elbow" .
:hanimJointName__r_radiocarpal rdfs:label 'r_radiocarpal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Wrist" .
:hanimJointName__r_midcarpal_1 rdfs:label 'r_midcarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__r_carpometacarpal_1 rdfs:label 'r_carpometacarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__r_metacarpophalangeal_1 rdfs:label 'r_metacarpophalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__r_carpal_interphalangeal_1 rdfs:label 'r_carpal_interphalangeal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_midcarpal_2 rdfs:label 'r_midcarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__r_carpometacarpal_2 rdfs:label 'r_carpometacarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__r_metacarpophalangeal_2 rdfs:label 'r_metacarpophalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__r_carpal_proximal_interphalangeal_2 rdfs:label 'r_carpal_proximal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_carpal_distal_interphalangeal_2 rdfs:label 'r_carpal_distal_interphalangeal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_midcarpal_3 rdfs:label 'r_midcarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__r_carpometacarpal_3 rdfs:label 'r_carpometacarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__r_metacarpophalangeal_3 rdfs:label 'r_metacarpophalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__r_carpal_proximal_interphalangeal_3 rdfs:label 'r_carpal_proximal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_carpal_distal_interphalangeal_3 rdfs:label 'r_carpal_distal_interphalangeal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_midcarpal_4_5 rdfs:label 'r_midcarpal_4_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Midcarpal_joint" .
:hanimJointName__r_carpometacarpal_4 rdfs:label 'r_carpometacarpal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__r_metacarpophalangeal_4 rdfs:label 'r_metacarpophalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__r_carpal_proximal_interphalangeal_4 rdfs:label 'r_carpal_proximal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_carpal_distal_interphalangeal_4 rdfs:label 'r_carpal_distal_interphalangeal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_carpometacarpal_5 rdfs:label 'r_carpometacarpal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpometacarpal_joint" .
:hanimJointName__r_metacarpophalangeal_5 rdfs:label 'r_metacarpophalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpophalangeal_joint" .
:hanimJointName__r_carpal_proximal_interphalangeal_5 rdfs:label 'r_carpal_proximal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .
:hanimJointName__r_carpal_distal_interphalangeal_5 rdfs:label 'r_carpal_distal_interphalangeal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand" .

:hanimSegmentNameValues rdf:type rdfs:Datatype ;
  rdfs:label "hanimSegmentNameValues" ;
  dcterms:description "CAESAR segment names for identification of HAnimSegment nodes as defined in the HAnim Architecture specification. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/concepts.html#Hierarchy" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'sacrum' 'pelvis' 'l_thigh' 'l_calf' 'l_talus' 'l_navicular' 'l_cuneiform_1' 'l_metatarsal_1' 'l_tarsal_proximal_phalanx_1' 'l_tarsal_distal_phalanx_1' 'l_cuneiform_2' 'l_metatarsal_2' 'l_tarsal_proximal_phalanx_2' 'l_tarsal_middle_phalanx_2' 'l_tarsal_distal_phalanx_2' 'l_cuneiform_3' 'l_metatarsal_3' 'l_tarsal_proximal_phalanx_3' 'l_tarsal_middle_phalanx_3' 'l_tarsal_distal_phalanx_3' 'l_calcaneus' 'l_cuboid' 'l_metatarsal_4' 'l_tarsal_proximal_phalanx_4' 'l_tarsal_middle_phalanx_4' 'l_tarsal_distal_phalanx_4' 'l_metatarsal_5' 'l_tarsal_proximal_phalanx_5' 'l_tarsal_middle_phalanx_5' 'l_tarsal_distal_phalanx_5' 'r_thigh' 'r_calf' 'r_talus' 'r_navicular' 'r_cuneiform_1' 'r_metatarsal_1' 'r_tarsal_proximal_phalanx_1' 'r_tarsal_distal_phalanx_1' 'r_cuneiform_2' 'r_metatarsal_2' 'r_tarsal_proximal_phalanx_2' 'r_tarsal_middle_phalanx_2' 'r_tarsal_distal_phalanx_2' 'r_cuneiform_3' 'r_metatarsal_3' 'r_tarsal_proximal_phalanx_3' 'r_tarsal_middle_phalanx_3' 'r_tarsal_distal_phalanx_3' 'r_calcaneus' 'r_cuboid' 'r_metatarsal_4' 'r_tarsal_proximal_phalanx_4' 'r_tarsal_middle_phalanx_4' 'r_tarsal_distal_phalanx_4' 'r_metatarsal_5' 'r_tarsal_proximal_phalanx_5' 'r_tarsal_middle_phalanx_5' 'r_tarsal_distal_phalanx_5' 'l5' 'l4' 'l3' 'l2' 'l1' 't12' 't11' 't10' 't9' 't8' 't7' 't6' 't5' 't4' 't3' 't2' 't1' 'c7' 'c6' 'c5' 'c4' 'c3' 'c2' 'c1' 'skull' 'l_eyelid' 'r_eyelid' 'l_eyeball' 'r_eyeball' 'l_eyebrow' 'r_eyebrow' 'jaw' 'l_clavicle' 'l_scapula' 'l_upperarm' 'l_forearm' 'l_carpal' 'l_trapezium' 'l_metacarpal_1' 'l_carpal_proximal_phalanx_1' 'l_carpal_distal_phalanx_1' 'l_trapezoid' 'l_metacarpal_2' 'l_carpal_proximal_phalanx_2' 'l_carpal_middle_phalanx_2' 'l_carpal_distal_phalanx_2' 'l_capitate' 'l_metacarpal_3' 'l_carpal_proximal_phalanx_3' 'l_carpal_middle_phalanx_3' 'l_carpal_distal_phalanx_3' 'l_hamate' 'l_metacarpal_4' 'l_carpal_proximal_phalanx_4' 'l_carpal_middle_phalanx_4' 'l_carpal_distal_phalanx_4' 'l_metacarpal_5' 'l_carpal_proximal_phalanx_5' 'l_carpal_middle_phalanx_5' 'l_carpal_distal_phalanx_5' 'r_clavicle' 'r_scapula' 'r_upperarm' 'r_forearm' 'r_carpal' 'r_trapezium' 'r_metacarpal_1' 'r_carpal_proximal_phalanx_1' 'r_carpal_distal_phalanx_1' 'r_trapezoid' 'r_metacarpal_2' 'r_carpal_proximal_phalanx_2' 'r_carpal_middle_phalanx_2' 'r_carpal_distal_phalanx_2' 'r_capitate' 'r_metacarpal_3' 'r_carpal_proximal_phalanx_3' 'r_carpal_middle_phalanx_3' 'r_carpal_distal_phalanx_3' 'r_hamate' 'r_metacarpal_4' 'r_carpal_proximal_phalanx_4' 'r_carpal_middle_phalanx_4' 'r_carpal_distal_phalanx_4' 'r_metacarpal_5' 'r_carpal_proximal_phalanx_5' 'r_carpal_middle_phalanx_5' 'r_carpal_distal_phalanx_5' ) ] .

:hanimSegmentName__sacrum rdfs:label 'sacrum'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Sacrum" .
:hanimSegmentName__pelvis rdfs:label 'pelvis'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Pelvis" .
:hanimSegmentName__l_thigh rdfs:label 'l_thigh'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Thigh" .
:hanimSegmentName__l_calf rdfs:label 'l_calf'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calf_(leg)" .
:hanimSegmentName__l_talus rdfs:label 'l_talus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Talus_bone" .
:hanimSegmentName__l_navicular rdfs:label 'l_navicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Navicular_bone" .
:hanimSegmentName__l_cuneiform_1 rdfs:label 'l_cuneiform_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__l_metatarsal_1 rdfs:label 'l_metatarsal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__l_tarsal_proximal_phalanx_1 rdfs:label 'l_tarsal_proximal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_distal_phalanx_1 rdfs:label 'l_tarsal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_cuneiform_2 rdfs:label 'l_cuneiform_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__l_metatarsal_2 rdfs:label 'l_metatarsal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__l_tarsal_proximal_phalanx_2 rdfs:label 'l_tarsal_proximal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_middle_phalanx_2 rdfs:label 'l_tarsal_middle_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_distal_phalanx_2 rdfs:label 'l_tarsal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_cuneiform_3 rdfs:label 'l_cuneiform_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__l_metatarsal_3 rdfs:label 'l_metatarsal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__l_tarsal_proximal_phalanx_3 rdfs:label 'l_tarsal_proximal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_middle_phalanx_3 rdfs:label 'l_tarsal_middle_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_distal_phalanx_3 rdfs:label 'l_tarsal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_calcaneus rdfs:label 'l_calcaneus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneus" .
:hanimSegmentName__l_cuboid rdfs:label 'l_cuboid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuboid" .
:hanimSegmentName__l_metatarsal_4 rdfs:label 'l_metatarsal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__l_tarsal_proximal_phalanx_4 rdfs:label 'l_tarsal_proximal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_middle_phalanx_4 rdfs:label 'l_tarsal_middle_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_distal_phalanx_4 rdfs:label 'l_tarsal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_metatarsal_5 rdfs:label 'l_metatarsal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__l_tarsal_proximal_phalanx_5 rdfs:label 'l_tarsal_proximal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_middle_phalanx_5 rdfs:label 'l_tarsal_middle_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_tarsal_distal_phalanx_5 rdfs:label 'l_tarsal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_thigh rdfs:label 'r_thigh'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Thigh" .
:hanimSegmentName__r_calf rdfs:label 'r_calf'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calf_(leg)" .
:hanimSegmentName__r_talus rdfs:label 'r_talus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Talus_bone" .
:hanimSegmentName__r_navicular rdfs:label 'r_navicular'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Navicular_bone" .
:hanimSegmentName__r_cuneiform_1 rdfs:label 'r_cuneiform_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__r_metatarsal_1 rdfs:label 'r_metatarsal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__r_tarsal_proximal_phalanx_1 rdfs:label 'r_tarsal_proximal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_distal_phalanx_1 rdfs:label 'r_tarsal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_cuneiform_2 rdfs:label 'r_cuneiform_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__r_metatarsal_2 rdfs:label 'r_metatarsal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__r_tarsal_proximal_phalanx_2 rdfs:label 'r_tarsal_proximal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_middle_phalanx_2 rdfs:label 'r_tarsal_middle_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_distal_phalanx_2 rdfs:label 'r_tarsal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_cuneiform_3 rdfs:label 'r_cuneiform_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuneiform_bones" .
:hanimSegmentName__r_metatarsal_3 rdfs:label 'r_metatarsal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__r_tarsal_proximal_phalanx_3 rdfs:label 'r_tarsal_proximal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_middle_phalanx_3 rdfs:label 'r_tarsal_middle_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_distal_phalanx_3 rdfs:label 'r_tarsal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_calcaneus rdfs:label 'r_calcaneus'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Calcaneus" .
:hanimSegmentName__r_cuboid rdfs:label 'r_cuboid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Cuboid" .
:hanimSegmentName__r_metatarsal_4 rdfs:label 'r_metatarsal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__r_tarsal_proximal_phalanx_4 rdfs:label 'r_tarsal_proximal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_middle_phalanx_4 rdfs:label 'r_tarsal_middle_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_distal_phalanx_4 rdfs:label 'r_tarsal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_metatarsal_5 rdfs:label 'r_metatarsal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metatarsal_bones" .
:hanimSegmentName__r_tarsal_proximal_phalanx_5 rdfs:label 'r_tarsal_proximal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_middle_phalanx_5 rdfs:label 'r_tarsal_middle_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_tarsal_distal_phalanx_5 rdfs:label 'r_tarsal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l5 rdfs:label 'l5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__l4 rdfs:label 'l4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__l3 rdfs:label 'l3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__l2 rdfs:label 'l2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__l1 rdfs:label 'l1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t12 rdfs:label 't12'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t11 rdfs:label 't11'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t10 rdfs:label 't10'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t9 rdfs:label 't9'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t8 rdfs:label 't8'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t7 rdfs:label 't7'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t6 rdfs:label 't6'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t5 rdfs:label 't5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t4 rdfs:label 't4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t3 rdfs:label 't3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t2 rdfs:label 't2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__t1 rdfs:label 't1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c7 rdfs:label 'c7'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c6 rdfs:label 'c6'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c5 rdfs:label 'c5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c4 rdfs:label 'c4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c3 rdfs:label 'c3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c2 rdfs:label 'c2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__c1 rdfs:label 'c1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Vertebral_column" .
:hanimSegmentName__skull rdfs:label 'skull'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Skull" .
:hanimSegmentName__l_eyelid rdfs:label 'l_eyelid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyelid" .
:hanimSegmentName__r_eyelid rdfs:label 'r_eyelid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyelid" .
:hanimSegmentName__l_eyeball rdfs:label 'l_eyeball'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eye" .
:hanimSegmentName__r_eyeball rdfs:label 'r_eyeball'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eye" .
:hanimSegmentName__l_eyebrow rdfs:label 'l_eyebrow'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyebrow" .
:hanimSegmentName__r_eyebrow rdfs:label 'r_eyebrow'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Eyebrow" .
:hanimSegmentName__jaw rdfs:label 'jaw'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Jaw" .
:hanimSegmentName__l_clavicle rdfs:label 'l_clavicle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Clavicle" .
:hanimSegmentName__l_scapula rdfs:label 'l_scapula'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Scapula" .
:hanimSegmentName__l_upperarm rdfs:label 'l_upperarm'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Arm" .
:hanimSegmentName__l_forearm rdfs:label 'l_forearm'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Forearm" .
:hanimSegmentName__l_carpal rdfs:label 'l_carpal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpal_bones" .
:hanimSegmentName__l_trapezium rdfs:label 'l_trapezium'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trapezium_(bone)" .
:hanimSegmentName__l_metacarpal_1 rdfs:label 'l_metacarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__l_carpal_proximal_phalanx_1 rdfs:label 'l_carpal_proximal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_distal_phalanx_1 rdfs:label 'l_carpal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_trapezoid rdfs:label 'l_trapezoid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trapezoid_bone" .
:hanimSegmentName__l_metacarpal_2 rdfs:label 'l_metacarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__l_carpal_proximal_phalanx_2 rdfs:label 'l_carpal_proximal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_middle_phalanx_2 rdfs:label 'l_carpal_middle_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_distal_phalanx_2 rdfs:label 'l_carpal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_capitate rdfs:label 'l_capitate'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Capitate_bone" .
:hanimSegmentName__l_metacarpal_3 rdfs:label 'l_metacarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__l_carpal_proximal_phalanx_3 rdfs:label 'l_carpal_proximal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_middle_phalanx_3 rdfs:label 'l_carpal_middle_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_distal_phalanx_3 rdfs:label 'l_carpal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_hamate rdfs:label 'l_hamate'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Hamate_bone" .
:hanimSegmentName__l_metacarpal_4 rdfs:label 'l_metacarpal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__l_carpal_proximal_phalanx_4 rdfs:label 'l_carpal_proximal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_middle_phalanx_4 rdfs:label 'l_carpal_middle_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_distal_phalanx_4 rdfs:label 'l_carpal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_metacarpal_5 rdfs:label 'l_metacarpal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__l_carpal_proximal_phalanx_5 rdfs:label 'l_carpal_proximal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_middle_phalanx_5 rdfs:label 'l_carpal_middle_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__l_carpal_distal_phalanx_5 rdfs:label 'l_carpal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_clavicle rdfs:label 'r_clavicle'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Clavicle" .
:hanimSegmentName__r_scapula rdfs:label 'r_scapula'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Scapula" .
:hanimSegmentName__r_upperarm rdfs:label 'r_upperarm'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Arm" .
:hanimSegmentName__r_forearm rdfs:label 'r_forearm'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Forearm" .
:hanimSegmentName__r_carpal rdfs:label 'r_carpal'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Carpal_bones" .
:hanimSegmentName__r_trapezium rdfs:label 'r_trapezium'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trapezium_(bone)" .
:hanimSegmentName__r_metacarpal_1 rdfs:label 'r_metacarpal_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__r_carpal_proximal_phalanx_1 rdfs:label 'r_carpal_proximal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_distal_phalanx_1 rdfs:label 'r_carpal_distal_phalanx_1'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_trapezoid rdfs:label 'r_trapezoid'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Trapezoid_bone" .
:hanimSegmentName__r_metacarpal_2 rdfs:label 'r_metacarpal_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__r_carpal_proximal_phalanx_2 rdfs:label 'r_carpal_proximal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_middle_phalanx_2 rdfs:label 'r_carpal_middle_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_distal_phalanx_2 rdfs:label 'r_carpal_distal_phalanx_2'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_capitate rdfs:label 'r_capitate'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Capitate_bone" .
:hanimSegmentName__r_metacarpal_3 rdfs:label 'r_metacarpal_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__r_carpal_proximal_phalanx_3 rdfs:label 'r_carpal_proximal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_middle_phalanx_3 rdfs:label 'r_carpal_middle_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_distal_phalanx_3 rdfs:label 'r_carpal_distal_phalanx_3'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_hamate rdfs:label 'r_hamate'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Hamate_bone" .
:hanimSegmentName__r_metacarpal_4 rdfs:label 'r_metacarpal_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__r_carpal_proximal_phalanx_4 rdfs:label 'r_carpal_proximal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_middle_phalanx_4 rdfs:label 'r_carpal_middle_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_distal_phalanx_4 rdfs:label 'r_carpal_distal_phalanx_4'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_metacarpal_5 rdfs:label 'r_metacarpal_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Metacarpal_bones" .
:hanimSegmentName__r_carpal_proximal_phalanx_5 rdfs:label 'r_carpal_proximal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_middle_phalanx_5 rdfs:label 'r_carpal_middle_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .
:hanimSegmentName__r_carpal_distal_phalanx_5 rdfs:label 'r_carpal_distal_phalanx_5'^^xsd:string ;
  dcterms:reference "https://en.wikipedia.org/wiki/Phalanx_bone" .

:hanimVersionChoices rdf:type rdfs:Datatype ;
  rdfs:label "hanimVersionChoices" ;
  dcterms:description "hanimVersionChoices enumeration constants are used to identify the allowed versions for an HAnimHumanoid node. Note that default HAnimHumanoid version is 2.0 for X3D version 4, and default is 1.0 for X3D version 3. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/hanim.html#HAnimHumanoid" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( '2.0' ) ] .

:hanimVersion__2.0 rdfs:label '2.0'^^xsd:string ;
  dcterms:description "Revised standard HAnim 19774 version 2 (parts 1 and 2) were approved by ISO in November 2019, published by Web3D Consortium May 2020.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0" .

:hatchStyleValues rdf:type rdfs:Datatype ;
  rdfs:label "hatchStyleValues" ;
  dcterms:description "hatchStyle selects a hatch pattern from International Register of Graphical Items.";
  dcterms:reference "https://isotc.iso.org/livelink/livelink/fetch/-8916524/8916549/8916590/6208440/class_pages/hatchstyle.html" ;
  rdfs:domain :SFInt32 ;
  rdfs:range [ owl:oneOf ( '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13' '14' '15' '16' '17' '18' '19' ) ] .

:hatchStyle__1 rdfs:label '1'^^xsd:integer ;
  dcterms:description "Horizontal equally spaced parallel lines" .
  # alias HORIZONTAL
:hatchStyle__2 rdfs:label '2'^^xsd:integer ;
  dcterms:description "Vertical equally spaced parallel lines" .
  # alias VERTICAL
:hatchStyle__3 rdfs:label '3'^^xsd:integer ;
  dcterms:description "Positive slope equally spaced parallel lines" .
  # alias POSITIVE_SLOPE
:hatchStyle__4 rdfs:label '4'^^xsd:integer ;
  dcterms:description "Negative slope equally spaced parallel lines" .
  # alias NEGATIVE_SLOPE
:hatchStyle__5 rdfs:label '5'^^xsd:integer ;
  dcterms:description "Horizontal/vertical crosshatch" .
  # alias HORIZONTAL_VERTICAL_CROSSHATCH
:hatchStyle__6 rdfs:label '6'^^xsd:integer ;
  dcterms:description "Positive slope/negative slope crosshatch" .
  # alias POSITIVE_NEGATIVE_SLOPE_CROSSHATCH
:hatchStyle__7 rdfs:label '7'^^xsd:integer ;
  dcterms:description "(cast iron or malleable iron and general use for all materials)" .
  # alias CAST_IRON
:hatchStyle__8 rdfs:label '8'^^xsd:integer ;
  dcterms:description "(steel)" .
  # alias STEEL
:hatchStyle__9 rdfs:label '9'^^xsd:integer ;
  dcterms:description "(bronze, brass, copper, and compositions)" .
  # alias BRONZE_BRASS_COPPER_COMPOSITIONS
:hatchStyle__10 rdfs:label '10'^^xsd:integer ;
  dcterms:description "(white metal, zinc, lead, babbit, and alloys)" .
  # alias WHITE_METAL_ZINC_LEAD_BABBIT_ALLOYS
:hatchStyle__11 rdfs:label '11'^^xsd:integer ;
  dcterms:description "(magnesium, aluminum, and aluminum alloys)" .
  # alias MAGNESIUM_ALUMINUM_ALLOYS
:hatchStyle__12 rdfs:label '12'^^xsd:integer ;
  dcterms:description "(rubber, plastic, and electrical insulation)" .
  # alias RUBBER_PLASTIC_ELECTRICAL_INSULATION
:hatchStyle__13 rdfs:label '13'^^xsd:integer ;
  dcterms:description "(cork, felt, fabric, leather, and fibre/fiber)" .
  # alias CORK_FELT_FABRIC_LEATHER_FIBRE
:hatchStyle__14 rdfs:label '14'^^xsd:integer ;
  dcterms:description "(thermal insulation)" .
  # alias THERMAL_INSULATION
:hatchStyle__15 rdfs:label '15'^^xsd:integer ;
  dcterms:description "(titanium and refi-actory material)" .
  # alias TITANIUM
:hatchStyle__16 rdfs:label '16'^^xsd:integer ;
  dcterms:description "(marble, slate, porcelain, glass, etc.)" .
  # alias MARBLE_SLATE_PORCELAIN_GLASS
:hatchStyle__17 rdfs:label '17'^^xsd:integer ;
  dcterms:description "(earth)" .
  # alias EARTH
:hatchStyle__18 rdfs:label '18'^^xsd:integer ;
  dcterms:description "(sand)" .
  # alias SAND
:hatchStyle__19 rdfs:label '19'^^xsd:integer ;
  dcterms:description "(repeating dot)" .
  # alias REPEATING_DOT

:intersectionTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "intersectionTypeValues" ;
  dcterms:description "intersectionTypeValues are supported enumeration values for X3DPickSensorNode type intersectionType field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/picking.html#X3DPickSensorNode" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'BOUNDS' 'GEOMETRY' ) ] .

:intersectionType__BOUNDS rdfs:label 'BOUNDS'^^xsd:string ;
  dcterms:description "TODO undefined in X3D specification";
  dcterms:reference "https://www.web3d.org/member-only/mantis/view.php?id=1294" .
:intersectionType__GEOMETRY rdfs:label 'GEOMETRY'^^xsd:string ;
  dcterms:description "TODO undefined in X3D specification";
  dcterms:reference "https://www.web3d.org/member-only/mantis/view.php?id=1294" .

:justifyChoices rdf:type rdfs:Datatype ;
  rdfs:label "justifyChoices" ;
  dcterms:description "justifyChoices are strictly allowed enumeration values for justify field in FontStyle and ScreenFontStyle nodes determining major and minor axis alignment (typically horizontal and vertical) of text layout. Note that intermediate commas and extraneous whitespace are disallowed by these strictly defined enumeration values. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/text.html#Directionandjustification" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"MIDDLE"' '"MIDDLE" "BEGIN"' '"MIDDLE" "END"' '"MIDDLE" "FIRST"' '"MIDDLE" "MIDDLE"' '"BEGIN"' '"BEGIN" "BEGIN"' '"BEGIN" "END"' '"BEGIN" "FIRST"' '"BEGIN" "MIDDLE"' '"END"' '"END" "BEGIN"' '"END" "END"' '"END" "FIRST"' '"END" "MIDDLE"' '"FIRST"' '"FIRST" "BEGIN"' '"FIRST" "END"' '"FIRST" "FIRST"' '"FIRST" "MIDDLE"' ) ] .

:justify__MIDDLE rdfs:label 'MIDDLE'^^xsd:string  .
:justify__MIDDLE_BEGIN rdfs:label '"MIDDLE" "BEGIN"'^^xsd:string  .
:justify__MIDDLE_END rdfs:label '"MIDDLE" "END"'^^xsd:string  .
:justify__MIDDLE_FIRST rdfs:label '"MIDDLE" "FIRST"'^^xsd:string  .
:justify__MIDDLE_MIDDLE rdfs:label '"MIDDLE" "MIDDLE"'^^xsd:string  .
:justify__BEGIN rdfs:label 'BEGIN'^^xsd:string  .
:justify__BEGIN_BEGIN rdfs:label '"BEGIN" "BEGIN"'^^xsd:string  .
:justify__BEGIN_END rdfs:label '"BEGIN" "END"'^^xsd:string  .
:justify__BEGIN_FIRST rdfs:label '"BEGIN" "FIRST"'^^xsd:string  .
:justify__BEGIN_MIDDLE rdfs:label '"BEGIN" "MIDDLE"'^^xsd:string  .
:justify__END rdfs:label 'END'^^xsd:string  .
:justify__END_BEGIN rdfs:label '"END" "BEGIN"'^^xsd:string  .
:justify__END_END rdfs:label '"END" "END"'^^xsd:string  .
:justify__END_FIRST rdfs:label '"END" "FIRST"'^^xsd:string  .
:justify__END_MIDDLE rdfs:label '"END" "MIDDLE"'^^xsd:string  .
:justify__FIRST rdfs:label 'FIRST'^^xsd:string  .
:justify__FIRST_BEGIN rdfs:label '"FIRST" "BEGIN"'^^xsd:string  .
:justify__FIRST_END rdfs:label '"FIRST" "END"'^^xsd:string  .
:justify__FIRST_FIRST rdfs:label '"FIRST" "FIRST"'^^xsd:string  .
:justify__FIRST_MIDDLE rdfs:label '"FIRST" "MIDDLE"'^^xsd:string  .

:layoutAlignChoices rdf:type rdfs:Datatype ;
  rdfs:label "layoutAlignChoices" ;
  dcterms:description "Permitted combinations of horizontal and vertical values for the align field in the Layout node. Note that intermediate commas and extraneous whitespace are disallowed by these strictly defined enumeration values. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/layout.html#Layout" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"LEFT" "BOTTOM"' '"LEFT" "CENTER"' '"LEFT" "TOP"' '"CENTER" "BOTTOM"' '"CENTER" "CENTER"' '"CENTER" "TOP"' '"RIGHT" "BOTTOM"' '"RIGHT" "CENTER"' '"RIGHT" "TOP"' ) ] .

:layoutAlign__LEFT_BOTTOM rdfs:label '"LEFT" "BOTTOM"'^^xsd:string  .
:layoutAlign__LEFT_CENTER rdfs:label '"LEFT" "CENTER"'^^xsd:string  .
:layoutAlign__LEFT_TOP rdfs:label '"LEFT" "TOP"'^^xsd:string  .
:layoutAlign__CENTER_BOTTOM rdfs:label '"CENTER" "BOTTOM"'^^xsd:string  .
:layoutAlign__CENTER_CENTER rdfs:label '"CENTER" "CENTER"'^^xsd:string  .
:layoutAlign__CENTER_TOP rdfs:label '"CENTER" "TOP"'^^xsd:string  .
:layoutAlign__RIGHT_BOTTOM rdfs:label '"RIGHT" "BOTTOM"'^^xsd:string  .
:layoutAlign__RIGHT_CENTER rdfs:label '"RIGHT" "CENTER"'^^xsd:string  .
:layoutAlign__RIGHT_TOP rdfs:label '"RIGHT" "TOP"'^^xsd:string  .

:layoutScaleModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "layoutScaleModeChoices" ;
  dcterms:description "Permitted combinations of horizontal and vertical values for the scaleMode field in the Layout node. Note that intermediate commas and extraneous whitespace are disallowed by these strictly defined enumeration values. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/layout.html#Layout" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"NONE" "NONE"' '"NONE" "FRACTION"' '"NONE" "STRETCH"' '"NONE" "PIXEL"' '"FRACTION" "NONE"' '"FRACTION" "FRACTION"' '"FRACTION" "STRETCH"' '"FRACTION" "PIXEL"' '"STRETCH" "NONE"' '"STRETCH" "FRACTION"' '"STRETCH" "STRETCH"' '"STRETCH" "PIXEL"' '"PIXEL" "NONE"' '"PIXEL" "FRACTION"' '"PIXEL" "STRETCH"' '"PIXEL" "PIXEL"' ) ] .

:layoutScaleMode__NONE_NONE rdfs:label '"NONE" "NONE"'^^xsd:string  .
:layoutScaleMode__NONE_FRACTION rdfs:label '"NONE" "FRACTION"'^^xsd:string  .
:layoutScaleMode__NONE_STRETCH rdfs:label '"NONE" "STRETCH"'^^xsd:string  .
:layoutScaleMode__NONE_PIXEL rdfs:label '"NONE" "PIXEL"'^^xsd:string  .
:layoutScaleMode__FRACTION_NONE rdfs:label '"FRACTION" "NONE"'^^xsd:string  .
:layoutScaleMode__FRACTION_FRACTION rdfs:label '"FRACTION" "FRACTION"'^^xsd:string  .
:layoutScaleMode__FRACTION_STRETCH rdfs:label '"FRACTION" "STRETCH"'^^xsd:string  .
:layoutScaleMode__FRACTION_PIXEL rdfs:label '"FRACTION" "PIXEL"'^^xsd:string  .
:layoutScaleMode__STRETCH_NONE rdfs:label '"STRETCH" "NONE"'^^xsd:string  .
:layoutScaleMode__STRETCH_FRACTION rdfs:label '"STRETCH" "FRACTION"'^^xsd:string  .
:layoutScaleMode__STRETCH_STRETCH rdfs:label '"STRETCH" "STRETCH"'^^xsd:string  .
:layoutScaleMode__STRETCH_PIXEL rdfs:label '"STRETCH" "PIXEL"'^^xsd:string  .
:layoutScaleMode__PIXEL_NONE rdfs:label '"PIXEL" "NONE"'^^xsd:string  .
:layoutScaleMode__PIXEL_FRACTION rdfs:label '"PIXEL" "FRACTION"'^^xsd:string  .
:layoutScaleMode__PIXEL_STRETCH rdfs:label '"PIXEL" "STRETCH"'^^xsd:string  .
:layoutScaleMode__PIXEL_PIXEL rdfs:label '"PIXEL" "PIXEL"'^^xsd:string  .

:layoutUnitsChoices rdf:type rdfs:Datatype ;
  rdfs:label "layoutUnitsChoices" ;
  dcterms:description "Permitted combinations of horizontal and vertical values for the offsetUnits field in the Layout node. Note that intermediate commas and extraneous whitespace are disallowed by these strictly defined enumeration values. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/layout.html#Layout" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"WORLD" "WORLD"' '"WORLD" "FRACTION"' '"WORLD" "PIXEL"' '"FRACTION" "WORLD"' '"FRACTION" "FRACTION"' '"FRACTION" "PIXEL"' '"PIXEL" "WORLD"' '"PIXEL" "FRACTION"' '"PIXEL" "PIXEL"' ) ] .

:layoutUnits__WORLD_WORLD rdfs:label '"WORLD" "WORLD"'^^xsd:string  .
:layoutUnits__WORLD_FRACTION rdfs:label '"WORLD" "FRACTION"'^^xsd:string  .
:layoutUnits__WORLD_PIXEL rdfs:label '"WORLD" "PIXEL"'^^xsd:string  .
:layoutUnits__FRACTION_WORLD rdfs:label '"FRACTION" "WORLD"'^^xsd:string  .
:layoutUnits__FRACTION_FRACTION rdfs:label '"FRACTION" "FRACTION"'^^xsd:string  .
:layoutUnits__FRACTION_PIXEL rdfs:label '"FRACTION" "PIXEL"'^^xsd:string  .
:layoutUnits__PIXEL_WORLD rdfs:label '"PIXEL" "WORLD"'^^xsd:string  .
:layoutUnits__PIXEL_FRACTION rdfs:label '"PIXEL" "FRACTION"'^^xsd:string  .
:layoutUnits__PIXEL_PIXEL rdfs:label '"PIXEL" "PIXEL"'^^xsd:string  .

:lineTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "lineTypeValues" ;
  dcterms:description "linetype selects a hatch pattern from International Register of Graphical Items.";
  dcterms:reference "https://isotc.iso.org/livelink/livelink/fetch/-8916524/8916549/8916590/6208440/class_pages/linetype.html" ;
  rdfs:domain :SFInt32 ;
  rdfs:range [ owl:oneOf ( '1' '2' '3' '4' '5' '6' '7' '8' '9' '10' '11' '12' '13' '14' '15' '16' ) ] .

:lineType__1 rdfs:label '1'^^xsd:integer ;
  dcterms:description "Solid" .
  # alias SOLID
:lineType__2 rdfs:label '2'^^xsd:integer ;
  dcterms:description "Dashed" .
  # alias DASHED
:lineType__3 rdfs:label '3'^^xsd:integer ;
  dcterms:description "Dotted" .
  # alias DOTTED
:lineType__4 rdfs:label '4'^^xsd:integer ;
  dcterms:description "Dashed-dotted" .
  # alias DASHED_DOTTED
:lineType__5 rdfs:label '5'^^xsd:integer ;
  dcterms:description "Dash-dot-dot" .
  # alias DASHED_DOT_DOT
:lineType__6 rdfs:label '6'^^xsd:integer ;
  dcterms:description "(single arrow)" .
  # alias SINGLE_ARROW
:lineType__7 rdfs:label '7'^^xsd:integer ;
  dcterms:description "(single dot)" .
  # alias SINGLE_DOT
:lineType__8 rdfs:label '8'^^xsd:integer ;
  dcterms:description "(double arrow)" .
  # alias DOUBLE_ARROW
:lineType__9 rdfs:label '9'^^xsd:integer ;
  dcterms:description "(stitch line)" .
  # alias STITCH_LINE
:lineType__10 rdfs:label '10'^^xsd:integer ;
  dcterms:description "(chain line)" .
  # alias CHAIN_LINE
:lineType__11 rdfs:label '11'^^xsd:integer ;
  dcterms:description "(center line)" .
  # alias CENTER_LINE
:lineType__12 rdfs:label '12'^^xsd:integer ;
  dcterms:description "(hidden line)" .
  # alias HIDDEN_LINE
:lineType__13 rdfs:label '13'^^xsd:integer ;
  dcterms:description "(phantom line)" .
  # alias PHANTOM_LINE
:lineType__14 rdfs:label '14'^^xsd:integer ;
  dcterms:description "(break line - style 1)" .
  # alias BREAK_LINE_STYLE_1
:lineType__15 rdfs:label '15'^^xsd:integer ;
  dcterms:description "(break line - style 2)" .
  # alias BREAK_LINE_STYLE_2
:lineType__16 rdfs:label '16'^^xsd:integer ;
  dcterms:description "User-specified dash pattern" .
  # alias USER_SPECIFIED_DASH_PATTERN

:loaType rdf:type rdfs:Datatype ;
  rdfs:label "loaType" ;
  dcterms:description "Level Of Articulation 0..4 indicates complexity and detail of joints for given humanoid skeletal hierarchy. Note that value of -1 indicates that no LOA conformance is provided.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19774/V2.0/Architecture/concepts.html#LevelsOfArticulation" .

:metaDirectionChoices rdf:type rdfs:Datatype ;
  rdfs:label "metaDirectionChoices" ;
  dcterms:description "metaDirectionChoices are strictly allowed enumeration values for meta element direction field. This list is bounded, no additional values are allowed.";
  dcterms:reference "http://www.w3.org/TR/html4/struct/dirlang.html#adef-dir" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'rtl' 'ltr' ) ] .

:metaDirection__rtl rdfs:label 'rtl'^^xsd:string ;
  dcterms:description "right-to-left" .
:metaDirection__ltr rdfs:label 'ltr'^^xsd:string ;
  dcterms:description "left-to-right" .

:metaNameValues rdf:type rdfs:Datatype ;
  rdfs:label "metaNameValues" ;
  dcterms:description "metaNameValues are supported enumeration values for meta element name field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/x3d/content/examples/X3dSceneAuthoringHints.html#metaTags" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'accessRights' 'author' 'contributor' 'created' 'creator' 'description' 'disclaimer' 'drawing' 'error' 'generator' 'hint' 'identifier' 'Image' 'info' 'information' 'isVersionOf' 'keywords' 'license' 'mediator' 'modified' 'movie' 'MovingImage' 'original' 'photo' 'photograph' 'publisher' 'reference' 'requires' 'rights' 'robots' 'Sound' 'source' 'specificationSection' 'specificationUrl' 'subject' 'Text' 'title' 'TODO' 'translator' 'translated' 'version' 'warning' ) ] .

:metaName__accessRights rdfs:label 'accessRights'^^xsd:string ;
  dcterms:description "permission required to access resource or security status";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-accessRights" .
:metaName__author rdfs:label 'author'^^xsd:string ;
  dcterms:description "name of individual author";
  dcterms:reference "https://www.w3.org/TR/html5/document-metadata.html#author" .
:metaName__contributor rdfs:label 'contributor'^^xsd:string ;
  dcterms:description "name of individual contributing to this resource";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-contributor" .
:metaName__created rdfs:label 'created'^^xsd:string ;
  dcterms:description "date of initial version";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-created" .
:metaName__creator rdfs:label 'creator'^^xsd:string ;
  dcterms:description "name of original author";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-creator" .
:metaName__description rdfs:label 'description'^^xsd:string ;
  dcterms:description "summary overview describing this resource";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-description" .
:metaName__disclaimer rdfs:label 'disclaimer'^^xsd:string ;
  dcterms:description "statement of denial or disavowal regarding potential claims or responsiblity" .
:metaName__drawing rdfs:label 'drawing'^^xsd:string ;
  dcterms:description "name or reference link to a supporting drawing or sketch file" .
:metaName__error rdfs:label 'error'^^xsd:string ;
  dcterms:description "information about an error (or known problem) that can prevent proper operation" .
:metaName__generator rdfs:label 'generator'^^xsd:string ;
  dcterms:description "authoring tool or translation tool";
  dcterms:reference "https://www.w3.org/TR/html5/document-metadata.html#generator" .
:metaName__hint rdfs:label 'hint'^^xsd:string ;
  dcterms:description "user hint about resource features or operation" .
:metaName__identifier rdfs:label 'identifier'^^xsd:string ;
  dcterms:description "url address or unique Uniform Resource Identifier (URI) for resource";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-identifier" .
:metaName__Image rdfs:label 'Image'^^xsd:string ;
  dcterms:description "name or reference link to supporting image file";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#dcmitype-Image" .
:metaName__info rdfs:label 'info'^^xsd:string ;
  dcterms:description "additional info of interest" .
:metaName__information rdfs:label 'information'^^xsd:string ;
  dcterms:description "additional information of interest" .
:metaName__isVersionOf rdfs:label 'isVersionOf'^^xsd:string ;
  dcterms:description "Related resource of which the described resource is a version, edition, or adaptation.";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-isVersionOf" .
:metaName__keywords rdfs:label 'keywords'^^xsd:string ;
  dcterms:description "comma-separated tokens, each of which is a keyword of interest";
  dcterms:reference "https://www.w3.org/TR/html5/document-metadata.html#keywords" .
:metaName__license rdfs:label 'license'^^xsd:string ;
  dcterms:description "content or software license";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-license" .
:metaName__mediator rdfs:label 'mediator'^^xsd:string ;
  dcterms:description "entity that mediates access to resource and for whom resource is intended or useful";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-mediator" .
:metaName__modified rdfs:label 'modified'^^xsd:string ;
  dcterms:description "date of modified version";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-modified" .
:metaName__movie rdfs:label 'movie'^^xsd:string ;
  dcterms:description "name or reference link to supporting movie file (note that Dublin Core term is MovingImage)" .
:metaName__MovingImage rdfs:label 'MovingImage'^^xsd:string ;
  dcterms:description "name or reference link to supporting movie";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#dcmitype-MovingImage" .
:metaName__original rdfs:label 'original'^^xsd:string ;
  dcterms:description "name or reference link to original file or resource" .
:metaName__photo rdfs:label 'photo'^^xsd:string ;
  dcterms:description "name or reference link to supporting photo file (note that Dublin Core term is Image)" .
:metaName__photograph rdfs:label 'photograph'^^xsd:string ;
  dcterms:description "name or reference link to supporting photograph file (note that Dublin Core term is Image)" .
:metaName__publisher rdfs:label 'publisher'^^xsd:string ;
  dcterms:description "entity responsible for making the resource available";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-publisher" .
:metaName__reference rdfs:label 'reference'^^xsd:string ;
  dcterms:description "name or reference link to supporting reference";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-references" .
:metaName__requires rdfs:label 'requires'^^xsd:string ;
  dcterms:description "prerequisites for operation or viewing";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-requires" .
:metaName__rights rdfs:label 'rights'^^xsd:string ;
  dcterms:description "intellectual property rights (IPR)";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-rights" .
:metaName__robots rdfs:label 'robots'^^xsd:string ;
  dcterms:description "search engine and web-spider guidance value: noindex to block page indexing, nofollow to block following links";
  dcterms:reference "https://developers.google.com/search/reference/robots_meta_tag" .
:metaName__Sound rdfs:label 'Sound'^^xsd:string ;
  dcterms:description "name or reference link to supporting sound file";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#dcmitype-Sound" .
:metaName__source rdfs:label 'source'^^xsd:string ;
  dcterms:description "related resource from which the described resource is derived";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-source" .
:metaName__specificationSection rdfs:label 'specificationSection'^^xsd:string ;
  dcterms:description "title of relevant specification section" .
:metaName__specificationUrl rdfs:label 'specificationUrl'^^xsd:string ;
  dcterms:description "url for relevant specification section";
  dcterms:reference "https://www.web3d.org/standards" .
:metaName__subject rdfs:label 'subject'^^xsd:string ;
  dcterms:description "search-index subject keywords, key phrases, or classification codes";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-subject" .
:metaName__Text rdfs:label 'Text'^^xsd:string ;
  dcterms:description "resource consisting primarily of words for reading";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#dcmitype-Text" .
:metaName__title rdfs:label 'title'^^xsd:string ;
  dcterms:description "file name for this resource";
  dcterms:reference "http://www.dublincore.org/documents/dcmi-terms/#terms-title" .
:metaName__TODO rdfs:label 'TODO'^^xsd:string ;
  dcterms:description "action item to do that still needs to be performed" .
:metaName__translator rdfs:label 'translator'^^xsd:string ;
  dcterms:description "name of person performing translation from another format or language" .
:metaName__translated rdfs:label 'translated'^^xsd:string ;
  dcterms:description "date of translation from another format or language" .
:metaName__version rdfs:label 'version'^^xsd:string ;
  dcterms:description "current version number or ID of this resource" .
:metaName__warning rdfs:label 'warning'^^xsd:string ;
  dcterms:description "warning information about a known problem that impedes proper operation" .

:multiTextureFunctionValues rdf:type rdfs:Datatype ;
  rdfs:label "multiTextureFunctionValues" ;
  dcterms:description "multiTextureFunctionValues are supported enumeration values for the MultiTexture node function attribute, one per each texture. An empty string indicates no function is applied. Multiple optional values, but cannot be extended.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-ValuesForFunctionField" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"COMPLEMENT"' '"ALPHAREPLICATE"' '""' ) ] .

:multiTextureFunction__COMPLEMENT rdfs:label 'COMPLEMENT'^^xsd:string ;
  dcterms:description "Invert argument x as (1 - x)" .
:multiTextureFunction__ALPHAREPLICATE rdfs:label 'ALPHAREPLICATE'^^xsd:string ;
  dcterms:description "Replicate alpha information to all color channels before operation completes." .
:multiTextureFunction__EMPTY rdfs:label ''^^xsd:string ;
  dcterms:description "No function is applied - empty SFString is allowed value within MFString array" .

:multiTextureModeValues rdf:type rdfs:Datatype ;
  rdfs:label "multiTextureModeValues" ;
  dcterms:description "multiTextureModeValues are supported enumeration values for the MultiTexture mode attribute, one per each texture. Multiple optional values, but cannot be extended.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-MultitextureModes" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"ADD"' '"ADDSIGNED"' '"ADDSIGNED2X"' '"ADDSMOOTH"' '"BLENDCURRENTALPHA"' '"BLENDDIFFUSEALPHA"' '"BLENDFACTORALPHA"' '"BLENDTEXTUREALPHA"' '"DOTPRODUCT3"' '"MODULATE"' '"MODULATE2X"' '"MODULATE4X"' '"MODULATEALPHA_ADDCOLOR"' '"MODULATEINVALPHA_ADDCOLOR"' '"MODULATEINVCOLOR_ADDALPHA"' '"OFF"' '"REPLACE"' '"SELECTARG1"' '"SELECTARG2"' '"SUBTRACT"' ) ] .

:multiTextureMode__ADD rdfs:label 'ADD'^^xsd:string  .
:multiTextureMode__ADDSIGNED rdfs:label 'ADDSIGNED'^^xsd:string  .
:multiTextureMode__ADDSIGNED2X rdfs:label 'ADDSIGNED2X'^^xsd:string  .
:multiTextureMode__ADDSMOOTH rdfs:label 'ADDSMOOTH'^^xsd:string  .
:multiTextureMode__BLENDCURRENTALPHA rdfs:label 'BLENDCURRENTALPHA'^^xsd:string  .
:multiTextureMode__BLENDDIFFUSEALPHA rdfs:label 'BLENDDIFFUSEALPHA'^^xsd:string  .
:multiTextureMode__BLENDFACTORALPHA rdfs:label 'BLENDFACTORALPHA'^^xsd:string  .
:multiTextureMode__BLENDTEXTUREALPHA rdfs:label 'BLENDTEXTUREALPHA'^^xsd:string  .
:multiTextureMode__DOTPRODUCT3 rdfs:label 'DOTPRODUCT3'^^xsd:string  .
:multiTextureMode__MODULATE rdfs:label 'MODULATE'^^xsd:string  .
:multiTextureMode__MODULATE2X rdfs:label 'MODULATE2X'^^xsd:string  .
:multiTextureMode__MODULATE4X rdfs:label 'MODULATE4X'^^xsd:string  .
:multiTextureMode__MODULATEALPHA_ADDCOLOR rdfs:label 'MODULATEALPHA_ADDCOLOR'^^xsd:string  .
:multiTextureMode__MODULATEINVALPHA_ADDCOLOR rdfs:label 'MODULATEINVALPHA_ADDCOLOR'^^xsd:string  .
:multiTextureMode__MODULATEINVCOLOR_ADDALPHA rdfs:label 'MODULATEINVCOLOR_ADDALPHA'^^xsd:string  .
:multiTextureMode__OFF rdfs:label 'OFF'^^xsd:string  .
:multiTextureMode__REPLACE rdfs:label 'REPLACE'^^xsd:string  .
:multiTextureMode__SELECTARG1 rdfs:label 'SELECTARG1'^^xsd:string  .
:multiTextureMode__SELECTARG2 rdfs:label 'SELECTARG2'^^xsd:string  .
:multiTextureMode__SUBTRACT rdfs:label 'SUBTRACT'^^xsd:string  .

:multiTextureSourceValues rdf:type rdfs:Datatype ;
  rdfs:label "multiTextureSourceValues" ;
  dcterms:description "multiTextureSourceValues are supported enumeration values for the MultiTexture node source attribute, one per each texture. Multiple optional values, but cannot be extended.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-ValuesForSourceField" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"DIFFUSE"' '"FACTOR"' '"SPECULAR"' '""' ) ] .

:multiTextureSource__DIFFUSE rdfs:label 'DIFFUSE'^^xsd:string  .
:multiTextureSource__FACTOR rdfs:label 'FACTOR'^^xsd:string  .
:multiTextureSource__SPECULAR rdfs:label 'SPECULAR'^^xsd:string  .
:multiTextureSource__EMPTY rdfs:label ''^^xsd:string  .

:navigationTransitionTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "navigationTransitionTypeValues" ;
  dcterms:description "navigationTransitionTypeValues are supported enumeration values for the transitionType field in the NavigationInfo node. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/navigation.html#NavigationInfo" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"TELEPORT"' '"LINEAR"' '"ANIMATE"' ) ] .

:navigationTransitionType__TELEPORT rdfs:label 'TELEPORT'^^xsd:string ;
  dcterms:description "immediate transition" .
:navigationTransitionType__LINEAR rdfs:label 'LINEAR'^^xsd:string ;
  dcterms:description "transition may proceed directly through intervening objects" .
:navigationTransitionType__ANIMATE rdfs:label 'ANIMATE'^^xsd:string ;
  dcterms:description "rowser-specific transition" .

:navigationTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "navigationTypeValues" ;
  dcterms:description "navigationTypeValues are supported enumeration values for the type field in the NavigationInfo node. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/navigation.html#NavigationInfo" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"ANY"' '"WALK"' '"EXAMINE"' '"FLY"' '"LOOKAT"' '"NONE"' '"EXPLORE"' ) ] .

:navigationType__ANY rdfs:label 'ANY'^^xsd:string ;
  dcterms:description "browser can offer any type for user to choose" .
:navigationType__WALK rdfs:label 'WALK'^^xsd:string ;
  dcterms:description "free navigation, avatar remains on ground, collision detection" .
:navigationType__EXAMINE rdfs:label 'EXAMINE'^^xsd:string ;
  dcterms:description "view an individual object by rotating view about center" .
:navigationType__FLY rdfs:label 'FLY'^^xsd:string ;
  dcterms:description "free navigation, collision detection" .
:navigationType__LOOKAT rdfs:label 'LOOKAT'^^xsd:string ;
  dcterms:description "navigate to particular object" .
:navigationType__NONE rdfs:label 'NONE'^^xsd:string ;
  dcterms:description "disables all navigation interfaces" .
:navigationType__EXPLORE rdfs:label 'EXPLORE'^^xsd:string ;
  dcterms:description "consistent keystroke navigation for both geospatial and Cartesian modes" .

:networkModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "networkModeChoices" ;
  dcterms:description "networkModeChoices are strictly allowed enumeration values for DIS field networkMode. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/dis.html#CommonDISfields" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'standAlone' 'networkReader' 'networkWriter' ) ] .

:networkMode__standAlone rdfs:label 'standAlone'^^xsd:string ;
  dcterms:description "ignore network but still respond to events in local scene" .
:networkMode__networkReader rdfs:label 'networkReader'^^xsd:string ;
  dcterms:description "listen to network and read PDU packets at readInterval, act as remotely linked copy of entity" .
:networkMode__networkWriter rdfs:label 'networkWriter'^^xsd:string ;
  dcterms:description "send PDU packets to network at writeInterval, act as master entity" .

:particleSystemGeometryTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "particleSystemGeometryTypeValues" ;
  dcterms:description "particleSystemGeometryTypeValues are supported enumeration values for the ParticleSystem node geometryType field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/particleSystems.html#ParticleSystem" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'LINE' 'POINT' 'QUAD' 'SPRITE' 'TRIANGLE' 'GEOMETRY' ) ] .

:particleSystemGeometryType__LINE rdfs:label 'LINE'^^xsd:string ;
  dcterms:description "line is drawn along current velocity vector of particle" .
:particleSystemGeometryType__POINT rdfs:label 'POINT'^^xsd:string ;
  dcterms:description "point geometry is rendered at particle position" .
:particleSystemGeometryType__QUAD rdfs:label 'QUAD'^^xsd:string ;
  dcterms:description "quad geometry is rendered at particle position facing direction traveled" .
:particleSystemGeometryType__SPRITE rdfs:label 'SPRITE'^^xsd:string ;
  dcterms:description "quad geometry is rendered at particle position facing screen" .
:particleSystemGeometryType__TRIANGLE rdfs:label 'TRIANGLE'^^xsd:string ;
  dcterms:description "pair of triangles creating quad geometry is rendered at particle position facing direction traveled" .
:particleSystemGeometryType__GEOMETRY rdfs:label 'GEOMETRY'^^xsd:string ;
  dcterms:description "geometry field is used for rendering each particle" .

:periodicWaveTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "periodicWaveTypeChoices" ;
  dcterms:description "Permitted values for PeriodicWave type. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#PeriodicWave" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'sine' 'square' 'sawtooth' 'triangle' 'custom' ) ] .

:periodicWaveType__sine rdfs:label 'sine'^^xsd:string  .
:periodicWaveType__square rdfs:label 'square'^^xsd:string  .
:periodicWaveType__sawtooth rdfs:label 'sawtooth'^^xsd:string  .
:periodicWaveType__triangle rdfs:label 'triangle'^^xsd:string  .
:periodicWaveType__custom rdfs:label 'custom'^^xsd:string  .

:phaseFunctionValues rdf:type rdfs:Datatype ;
  rdfs:label "phaseFunctionValues" ;
  dcterms:description "phaseFunctionValues are supported enumeration values for the phaseFunction field in the ShadedVolumeStyle. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/volume.html#ShadedVolumeStyle" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'Henyey-Greenstein' 'NONE' ) ] .

:phaseFunction__HenyeyGreenstein rdfs:label 'Henyey-Greenstein'^^xsd:string ;
  dcterms:description "Henyey-Greenstein phase function for scattering model" .
:phaseFunction__NONE rdfs:label 'NONE'^^xsd:string ;
  dcterms:description "no scattering" .

:pickableObjectTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "pickableObjectTypeValues" ;
  dcterms:description "pickableObjectTypeValues are supported enumeration values for the objectType field in the abstract types X3DPickableObject and X3DPickSensorNode. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/picking.html#X3DPickableObject" ;
  rdfs:domain :MFString ;
  rdfs:range [ owl:oneOf ( '"ALL"' '"NONE"' '"TERRAIN"' ) ] .

:pickableObjectType__ALL rdfs:label 'ALL'^^xsd:string ;
  dcterms:description "each node is available for picking" .
:pickableObjectType__NONE rdfs:label 'NONE'^^xsd:string ;
  dcterms:description "no node is available for picking" .
:pickableObjectType__TERRAIN rdfs:label 'TERRAIN'^^xsd:string ;
  dcterms:description "TERRAIN is an example value" .

:pickSensorMatchCriterionChoices rdf:type rdfs:Datatype ;
  rdfs:label "pickSensorMatchCriterionChoices" ;
  dcterms:description "pickSensorMatchCriterionChoices are strictly allowed enumeration values for X3DPickSensorNode node matchCriterion field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/picking.html#X3DPickSensorNode" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'MATCH_ANY' 'MATCH_EVERY' 'MATCH_ONLY_ONE' ) ] .

:pickSensorMatchCriterion__MATCH_ANY rdfs:label 'MATCH_ANY'^^xsd:string ;
  dcterms:description "any match of objectType values is acceptable" .
:pickSensorMatchCriterion__MATCH_EVERY rdfs:label 'MATCH_EVERY'^^xsd:string ;
  dcterms:description "every objectType value in X3DPickSensorNode and X3DPickableObject shall match" .
:pickSensorMatchCriterion__MATCH_ONLY_ONE rdfs:label 'MATCH_ONLY_ONE'^^xsd:string ;
  dcterms:description "one and only one objectType value can match" .

:pickSensorSortOrderValues rdf:type rdfs:Datatype ;
  rdfs:label "pickSensorSortOrderValues" ;
  dcterms:description "pickSensorSortOrderValues are supported enumeration values for X3DPickSensorNode node sortOrder field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/picking.html#X3DPickSensorNode" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'ANY' 'CLOSEST' 'ALL' 'ALL_SORTED' ) ] .

:pickSensorSortOrder__ANY rdfs:label 'ANY'^^xsd:string ;
  dcterms:description "any single object that can satisfy picking conditions" .
:pickSensorSortOrder__CLOSEST rdfs:label 'CLOSEST'^^xsd:string ;
  dcterms:description "return closest object by distance that satisfies conditions of this pick sensor" .
:pickSensorSortOrder__ALL rdfs:label 'ALL'^^xsd:string ;
  dcterms:description "every object that satisfies picking conditions for this pick sensor is returned" .
:pickSensorSortOrder__ALL_SORTED rdfs:label 'ALL_SORTED'^^xsd:string ;
  dcterms:description "every object that satisfies picking conditions for this pick sensor is returned, in sorted order" .

:profileNameChoices rdf:type rdfs:Datatype ;
  rdfs:label "profileNameChoices" ;
  dcterms:description "profileNameChoices enumeration constants are used to identify the profile for each scene-graph node, and also utilized by X3D element to identify the profile of a contained Scene";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/concepts.html#Profiles" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'Core' 'Interchange' 'CADInterchange' 'Interactive' 'Immersive' 'MedicalInterchange' 'MPEG4Interactive' 'Full' ) ] .

:profileName__Core rdfs:label 'Core'^^xsd:string ;
  dcterms:description "Core Profile includes no nodes and is provided as the basis for custom componentization. Allowed X3D statements for all profiles are: connect ExternProtoDeclare EXPORT field fieldValue IMPORT IS ProtoBody ProtoDeclare ProtoInterface ProtoInstance ROUTE X3D. Allowed X3D nodes for this profile are: MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/coreprofile.html" .
:profileName__Interchange rdfs:label 'Interchange'^^xsd:string ;
  dcterms:description "Interchange Profile equals the minimum subset of nodes needed to display lightweight compelling content. Allowed X3D nodes for this profile are: Appearance Background Box Color ColorInterpolator ColorRGBA Cone Coordinate CoordinateInterpolator Cylinder DirectionalLight Group ImageTexture IndexedFaceSet IndexedLineSet IndexedTriangleFanSet IndexedTriangleSet IndexedTriangleStripSet LineSet Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal NormalInterpolator OrientationInterpolator PixelTexture PointSet PositionInterpolator ScalarInterpolator Shape Sphere TextureCoordinate TextureCoordinateGenerator TextureTransform TimeSensor Transform TriangleFanSet TriangleSet TriangleStripSet Viewpoint WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/interchange.html" .
:profileName__CADInterchange rdfs:label 'CADInterchange'^^xsd:string ;
  dcterms:description "CADInterchange Profile adds support for CADGeometry component nodes to Interchange Profile. Allowed X3D nodes for this profile are: Anchor Appearance CADAssembly CADFace CADLayer CADPart Billboard Collision Color ColorRGBA Coordinate DirectionalLight FragmentShader Group ImageTexture IndexedLineSet IndexedQuadSet IndexedTriangleFanSet IndexedTriangleSet IndexedTriangleStripSet Inline LineProperties LineSet LOD Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MultiShader MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal PixelTexture PointSet QuadSet Shader ShaderAppearance Shape TextureCoordinate TextureCoordinateGenerator TextureTransform Transform TriangleFanSet TriangleSet TriangleStripSet Viewpoint VertexShader WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/CADInterchange.html" .
:profileName__Interactive rdfs:label 'Interactive'^^xsd:string ;
  dcterms:description "Interactive Profile adds interaction nodes (Anchor, KeySensor) to the minimum subset of nodes needed to display lightweight compelling content. Allowed X3D nodes for this profile are: Anchor Appearance Background BooleanFilter BooleanSequencer BooleanToggle BooleanTrigger Box Color ColorInterpolator ColorRGBA Cone Coordinate CoordinateInterpolator Cylinder CylinderSensor DirectionalLight ElevationGrid Group ImageTexture IndexedFaceSet IndexedLineSet IndexedTriangleFanSet IndexedTriangleSet IndexedTriangleStripSet Inline IntegerSequencer IntegerTrigger KeySensor LineSet Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal NormalInterpolator OrientationInterpolator IndexedTriangleStripSet Inline IntegerSequencer IntegerTrigger KeySensor LineSet Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal NormalInterpolator OrientationInterpolator PixelTexture PlaneSensor PointLight PointSet PositionInterpolator ProximitySensor ScalarInterpolator Shape Sphere SphereSensor SpotLight StringSensor Switch TextureCoordinate TextureCoordinateGenerator TextureTransform TimeSensor TimeTrigger TouchSensor Transform TriangleFanSet TriangleSet TriangleStripSet Viewpoint VisibilitySensor WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/interactive.html" .
:profileName__Immersive rdfs:label 'Immersive'^^xsd:string ;
  dcterms:description "Immersive Profile equals all of the nodes in the VRML97 Specification, plus various X3D node additions including KeySensor, StringSensor and Scene. Allowed X3D nodes for this profile are: Anchor Appearance AudioClip Background Billboard BooleanFilter BooleanSequencer BooleanToggle BooleanTrigger Box Collision Color ColorInterpolator ColorRGBA Cone Coordinate CoordinateInterpolator Cylinder CylinderSensor DirectionalLight ElevationGrid Extrusion Fog FontStyle Group ImageTexture IndexedFaceSet IndexedLineSet IndexedTriangleFan IndexedTriangleSet IndexedTriangleStripSet Inline IntegerSequencer IntegerTrigger KeySensor LineProperties LineSet LoadSensor LOD Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MovieTexture MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal NormalInterpolator OrientationInterpolator PixelTexture PlaneSensor PointLight PointSet Polyline2D Polypoint2D PositionInterpolator ProximitySensor Rectangle2D ScalarInterpolator Script Shape Sound Sphere SphereSensor SpotLight StringSensor Switch Text TextureCoordinate TextureCoordinateGenerator TextureTransform TimeSensor TimeTrigger TouchSensor TriangleFanSet TriangleSet TriangleSet2D TriangleStripSet Transform Viewpoint VisibilitySensor WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/immersive.html" .
:profileName__MedicalInterchange rdfs:label 'MedicalInterchange'^^xsd:string ;
  dcterms:description "The MedicalInterchange profile adds support for VolumeRendering component to Interchange profile. Allowed X3D nodes for this profile are: Anchor Arc2D ArcClose2D Appearance Background Billboard BlendedVolumeStyle BooleanFilter BooleanSequencer BooleanToggle BooleanTrigger BoundaryEnhancementVolumeStyle Box CartoonVolumeStyle Circle2D ClipPlane Collision Color ColorInterpolator ColorRGBA ComposedVolumeStyle CompositeTexture3D Cone Coordinate CoordinateDouble CoordinateInterpolator Cylinder DirectionalLight Disk2D EdgeEnhancementVolumeStyle FillProperties FontStyle Group ImageTexture ImageTexture3D IndexedFaceSet IndexedLineSet IndexedTriangleFanSet IndexedTriangleSet IndexedTriangleStripSet Inline IntegerSequencer IntegerTrigger IsoSurfaceVolumeData LineProperties LineSet LOD Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString MultiTexture MultiTextureCoordinate MultiTextureTransform NavigationInfo Normal NormalInterpolator OctTree OpacityMapVolumeStyle OrientationInterpolator OrthoViewpoint PixelTexture PixelTexture3D PointSet Polyline2D Polypoint2D PositionInterpolator ProjectionVolumeStyle Rectangle2D ScalarInterpolator SegmentedVolumeData ShadedVolumeStyle Shape SilhouetteEnhancementVolumeStyle Sphere StaticGroup Switch Text TextureCoordinate TextureCoordinate3D TextureCoordinate4D TextureCoordinateGenerator TextureMatrixTransform TextureProperties TextureTransform TextureTransform3D TimeSensor TimeTrigger ToneMappedVolumeStyle Transform TriangleFanSet TriangleSet TriangleStripSet Viewpoint ViewpointGroup VolumeData WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/MedInterchange.html" .
:profileName__MPEG4Interactive rdfs:label 'MPEG4Interactive'^^xsd:string ;
  dcterms:description "MPEGInteractive Profile defines base interoperability with MPEG4 standards to a small subset of nodes needed to display lightweight compelling content. Allowed X3D nodes for this profile are: Anchor Appearance Background Box Color ColorInterpolator ColorRGBA Cone Coordinate CoordinateInterpolator Cylinder CylinderSensor DirectionalLight ElevationGrid Group ImageTexture IndexedFaceSet IndexedLineSet Inline LineSet Material MetadataBoolean MetadataDouble MetadataFloat MetadataInteger MetadataSet MetadataString NavigationInfo NormalInterpolator OrientationInterpolator PixelTexture PlaneSensor PointLight PointSet PositionInterpolator ProximitySensor ScalarInterpolator Shape Sphere SphereSensor SpotLight Switch TextureCoordinate TextureTransform TimeSensor TouchSensor Transform Viewpoint WorldInfo.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/MPEG4interactive.html" .
:profileName__Full rdfs:label 'Full'^^xsd:string ;
  dcterms:description "The Full Profile corresponds to all Immersive X3D nodes plus all approved/implemented extensions. All X3D nodes and statements are allowed in this profile.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/fullProfile.html" .

:projectionVolumeStyleTypeChoices rdf:type rdfs:Datatype ;
  rdfs:label "projectionVolumeStyleTypeChoices" ;
  dcterms:description "projectionVolumeStyleTypeChoices are strictly allowed enumeration values for ProjectionVolumeStyle field named 'type'. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/volume.html#ProjectionVolumeStyle" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'MAX' 'MIN' 'AVERAGE' ) ] .

:projectionVolumeStyleType__MAX rdfs:label 'MAX'^^xsd:string ;
  dcterms:description "Maximum Intensity Projection (MIP) or Least MIP (LMIP) algorithm is used to generate output color" .
:projectionVolumeStyleType__MIN rdfs:label 'MIN'^^xsd:string ;
  dcterms:description "Minimum Intensity Projection algorithm is used to generate output color" .
:projectionVolumeStyleType__AVERAGE rdfs:label 'AVERAGE'^^xsd:string ;
  dcterms:description "All voxels along ray are averaged to generate output color" .

:shaderLanguageValues rdf:type rdfs:Datatype ;
  rdfs:label "shaderLanguageValues" ;
  dcterms:description "shaderLanguageValues are supported enumeration values for the language field in shader nodes including Cg GLSL HLSL, other values are optionally supported by browsers. Used to optionally determine the language type if no MIME-type information is available. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/shaders.html#X3DShaderNode" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'Cg' 'GLSL' 'HLSL' ) ] .

:shaderLanguage__Cg rdfs:label 'Cg'^^xsd:string ;
  dcterms:description "nVidia Cg shading language" .
:shaderLanguage__GLSL rdfs:label 'GLSL'^^xsd:string ;
  dcterms:description "OpenGL shading language (GLSL)" .
:shaderLanguage__HLSL rdfs:label 'HLSL'^^xsd:string ;
  dcterms:description "Microsoft High Level Shading Language (HLSL)" .

:shaderPartTypeValues rdf:type rdfs:Datatype ;
  rdfs:label "shaderPartTypeValues" ;
  dcterms:description "shaderPartTypeValues are allowed enumeration values for ShaderPart type field. This list is unbounded, additional enumeration values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/shaders.html#ShaderPart" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'VERTEX' 'FRAGMENT' ) ] .

:shaderPartType__VERTEX rdfs:label 'VERTEX'^^xsd:string ;
  dcterms:description "vertex shader" .
:shaderPartType__FRAGMENT rdfs:label 'FRAGMENT'^^xsd:string ;
  dcterms:description "fragment shader" .

:textureBoundaryModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "textureBoundaryModeChoices" ;
  dcterms:description "textureBoundaryModeChoices are strictly allowed enumeration values for TextureProperties boundaryMode* fields. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-TextureBoundaryModes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'CLAMP' 'CLAMP_TO_EDGE' 'CLAMP_TO_BOUNDARY' 'MIRRORED_REPEAT' 'REPEAT' ) ] .

:textureBoundaryMode__CLAMP rdfs:label 'CLAMP'^^xsd:string ;
  dcterms:description "Clamp texture coordinates to range [0,1]" .
:textureBoundaryMode__CLAMP_TO_EDGE rdfs:label 'CLAMP_TO_EDGE'^^xsd:string ;
  dcterms:description "Clamp texture coordinates such that a border texel is never sampled" .
:textureBoundaryMode__CLAMP_TO_BOUNDARY rdfs:label 'CLAMP_TO_BOUNDARY'^^xsd:string ;
  dcterms:description "Clamp texture coordinates such that texture samples are border texels for fragments" .
:textureBoundaryMode__MIRRORED_REPEAT rdfs:label 'MIRRORED_REPEAT'^^xsd:string ;
  dcterms:description "Texture coordinates are mirrored and then clamped as in CLAMP_TO_EDGE" .
:textureBoundaryMode__REPEAT rdfs:label 'REPEAT'^^xsd:string ;
  dcterms:description "Repeat a texture across the fragment" .

:textureCompressionModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "textureCompressionModeChoices" ;
  dcterms:description "textureCompressionModeChoices are strictly allowed enumeration values for TextureProperties field textureCompression. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-TextureCompressionModes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'DEFAULT' 'FASTEST' 'HIGH' 'LOW' 'MEDIUM' 'NICEST' ) ] .

:textureCompressionMode__DEFAULT rdfs:label 'DEFAULT'^^xsd:string ;
  dcterms:description "browser-specified default compression mode" .
:textureCompressionMode__FASTEST rdfs:label 'FASTEST'^^xsd:string ;
  dcterms:description "fastest method available" .
:textureCompressionMode__HIGH rdfs:label 'HIGH'^^xsd:string ;
  dcterms:description "greatest amount of compression" .
:textureCompressionMode__LOW rdfs:label 'LOW'^^xsd:string ;
  dcterms:description "least amount of compression" .
:textureCompressionMode__MEDIUM rdfs:label 'MEDIUM'^^xsd:string ;
  dcterms:description "moderate amount of compressions" .
:textureCompressionMode__NICEST rdfs:label 'NICEST'^^xsd:string ;
  dcterms:description "highest quality method available" .

:textureCoordinateGeneratorModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "textureCoordinateGeneratorModeChoices" ;
  dcterms:description "textureCoordinateGeneratorModeChoices are strictly allowed enumeration values for TextureCoordinateGenerator mode field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-Texturecoordgeneration" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'SPHERE' 'CAMERASPACENORMAL' 'CAMERASPACEPOSITION' 'CAMERASPACEREFLECTIONVECTOR' 'SPHERE-LOCAL' 'COORD' 'COORD-EYE' 'NOISE' 'NOISE-EYE' 'SPHERE-REFLECT' 'SPHERE-REFLECT-LOCAL' ) ] .

:textureCoordinateGeneratorMode__SPHERE rdfs:label 'SPHERE'^^xsd:string ;
  dcterms:description "Creates texture coordinates for a spherical environment" .
:textureCoordinateGeneratorMode__CAMERASPACENORMAL rdfs:label 'CAMERASPACENORMAL'^^xsd:string ;
  dcterms:description "Use vertex normal, transformed to camera space, as input texture coordinates" .
:textureCoordinateGeneratorMode__CAMERASPACEPOSITION rdfs:label 'CAMERASPACEPOSITION'^^xsd:string ;
  dcterms:description "Use vertex position, transformed to camera space, as input texture coordinates" .
:textureCoordinateGeneratorMode__CAMERASPACEREFLECTIONVECTOR rdfs:label 'CAMERASPACEREFLECTIONVECTOR'^^xsd:string ;
  dcterms:description "Use reflection vector, transformed to camera space, as input texture coordinates" .
:textureCoordinateGeneratorMode__SPHERELOCAL rdfs:label 'SPHERE-LOCAL'^^xsd:string ;
  dcterms:description "Sphere mapping but in local coordinates" .
:textureCoordinateGeneratorMode__COORD rdfs:label 'COORD'^^xsd:string ;
  dcterms:description "Use vertex coordinates" .
:textureCoordinateGeneratorMode__COORDEYE rdfs:label 'COORD-EYE'^^xsd:string ;
  dcterms:description "Use vertex coordinates transformed to camera space" .
:textureCoordinateGeneratorMode__NOISE rdfs:label 'NOISE'^^xsd:string ;
  dcterms:description "Apply Perlin solid noise function on vertex coordinates" .
:textureCoordinateGeneratorMode__NOISEEYE rdfs:label 'NOISE-EYE'^^xsd:string ;
  dcterms:description "Apply Perlin solid noise function on vertex coordinates transformed to camera space" .
:textureCoordinateGeneratorMode__SPHEREREFLECT rdfs:label 'SPHERE-REFLECT'^^xsd:string ;
  dcterms:description "similar to CAMERASPACEREFLECTIONVECTOR with optional index of refraction" .
:textureCoordinateGeneratorMode__SPHEREREFLECTLOCAL rdfs:label 'SPHERE-REFLECT-LOCAL'^^xsd:string ;
  dcterms:description "Similar to SPHERE-REFLECT transformed to camera space" .

:textureMagnificationModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "textureMagnificationModeChoices" ;
  dcterms:description "textureMagnificationModeChoices are strictly allowed enumeration values for TextureProperties field magnificationFilter. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-TextureMagnificationModes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'AVG_PIXEL' 'DEFAULT' 'FASTEST' 'NEAREST_PIXEL' 'NICEST' ) ] .

:textureMagnificationMode__AVG_PIXEL rdfs:label 'AVG_PIXEL'^^xsd:string ;
  dcterms:description "weighted average of four texture elements closest to center of pixel being textured" .
:textureMagnificationMode__DEFAULT rdfs:label 'DEFAULT'^^xsd:string ;
  dcterms:description "browser-specified default magnification mode" .
:textureMagnificationMode__FASTEST rdfs:label 'FASTEST'^^xsd:string ;
  dcterms:description "fastest method available" .
:textureMagnificationMode__NEAREST_PIXEL rdfs:label 'NEAREST_PIXEL'^^xsd:string ;
  dcterms:description "texture element nearest to the center of pixel being textured" .
:textureMagnificationMode__NICEST rdfs:label 'NICEST'^^xsd:string ;
  dcterms:description "highest quality method available" .

:textureMinificationModeChoices rdf:type rdfs:Datatype ;
  rdfs:label "textureMinificationModeChoices" ;
  dcterms:description "textureMinificationModeChoices are strictly allowed enumeration values for TextureProperties field minificationFilter. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/texturing.html#t-TextureMinificationModes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'AVG_PIXEL' 'AVG_PIXEL_AVG_MIPMAP' 'AVG_PIXEL_NEAREST_MIPMAP' 'DEFAULT' 'FASTEST' 'NEAREST_PIXEL' 'NEAREST_PIXEL_AVG_MIPMAP' 'NEAREST_PIXEL_NEAREST_MIPMAP' 'NICEST' ) ] .

:textureMinificationMode__AVG_PIXEL rdfs:label 'AVG_PIXEL'^^xsd:string ;
  dcterms:description "weighted average of four texture elements closest to center of pixel being textured" .
:textureMinificationMode__AVG_PIXEL_AVG_MIPMAP rdfs:label 'AVG_PIXEL_AVG_MIPMAP'^^xsd:string ;
  dcterms:description "tri-linear mipmap filtering" .
:textureMinificationMode__AVG_PIXEL_NEAREST_MIPMAP rdfs:label 'AVG_PIXEL_NEAREST_MIPMAP'^^xsd:string ;
  dcterms:description "choose mipmap that most closely matches size of pixel being textured, use weighted average of four texture elements closest to center of pixel" .
:textureMinificationMode__DEFAULT rdfs:label 'DEFAULT'^^xsd:string ;
  dcterms:description "browser-specified default minification mode" .
:textureMinificationMode__FASTEST rdfs:label 'FASTEST'^^xsd:string ;
  dcterms:description "fastest method available, use mipmaps if possible" .
:textureMinificationMode__NEAREST_PIXEL rdfs:label 'NEAREST_PIXEL'^^xsd:string ;
  dcterms:description "texture element nearest to center of pixel being textured" .
:textureMinificationMode__NEAREST_PIXEL_AVG_MIPMAP rdfs:label 'NEAREST_PIXEL_AVG_MIPMAP'^^xsd:string ;
  dcterms:description "texture element nearest to center of pixel being textured, use average of two nearest mipmaps" .
:textureMinificationMode__NEAREST_PIXEL_NEAREST_MIPMAP rdfs:label 'NEAREST_PIXEL_NEAREST_MIPMAP'^^xsd:string ;
  dcterms:description "texture element nearest to center of pixel being textured, use nearest mipmap" .
:textureMinificationMode__NICEST rdfs:label 'NICEST'^^xsd:string ;
  dcterms:description "highest quality method available" .

:unitCategoryChoices rdf:type rdfs:Datatype ;
  rdfs:label "unitCategoryChoices" ;
  dcterms:description "unitCategoryChoices are strictly allowed enumeration values for standard units in the UNIT statement. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/concepts.html#t-Standardunits" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'angle' 'force' 'length' 'mass' ) ] .

:unitCategory__angle rdfs:label 'angle'^^xsd:string ;
  dcterms:description "angle default is radians" .
:unitCategory__force rdfs:label 'force'^^xsd:string ;
  dcterms:description "force default is newtons" .
:unitCategory__length rdfs:label 'length'^^xsd:string ;
  dcterms:description "length default is meters" .
:unitCategory__mass rdfs:label 'mass'^^xsd:string ;
  dcterms:description "mass default is kilograms" .

:unitIntervalType rdf:type rdfs:Datatype ;
  rdfs:label "unitIntervalType" ;
  dcterms:description "unitIntervalType value is an SFFloat ranging [0..1]";
  dcterms:reference "_Evaluating the X3D Schema with semantic web tools_, Web3D 2012 Conference, Petit, Marc (EDF), Henry Boccon-Gibod (EDF), Mouton, Christophe (EDF)" .

:volumeRenderingWeightFunctionChoices rdf:type rdfs:Datatype ;
  rdfs:label "volumeRenderingWeightFunctionChoices" ;
  dcterms:description "volumeRenderingWeightFunctionChoices are strictly allowed enumeration values for BlendedVolumeStyle weightFunction* fields.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/volume.html#t-WeightFunctionTypes" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( 'CONSTANT' 'ALPHA1' 'ALPHA2' 'ONE_MINUS_ALPHA1' 'ONE_MINUS_ALPHA2' 'TABLE' ) ] .

:volumeRenderingWeightFunction__CONSTANT rdfs:label 'CONSTANT'^^xsd:string ;
  dcterms:description "Use weightConstant1" .
:volumeRenderingWeightFunction__ALPHA1 rdfs:label 'ALPHA1'^^xsd:string ;
  dcterms:description "Use O_v" .
:volumeRenderingWeightFunction__ALPHA2 rdfs:label 'ALPHA2'^^xsd:string ;
  dcterms:description "Use O_blend" .
:volumeRenderingWeightFunction__ONE_MINUS_ALPHA1 rdfs:label 'ONE_MINUS_ALPHA1'^^xsd:string ;
  dcterms:description "Use 1 - O_v" .
:volumeRenderingWeightFunction__ONE_MINUS_ALPHA2 rdfs:label 'ONE_MINUS_ALPHA2'^^xsd:string ;
  dcterms:description "Use 1 - O_blend" .
:volumeRenderingWeightFunction__TABLE rdfs:label 'TABLE'^^xsd:string ;
  dcterms:description "Use table lookup value" .

:waveShaperOversampleChoices rdf:type rdfs:Datatype ;
  rdfs:label "waveShaperOversampleChoices" ;
  dcterms:description "Permitted values for WaveShaper oversample field. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/components/sound.html#WaveShaper" ;
  rdfs:domain :SFString ;
  rdfs:range [ owl:oneOf ( 'none' '2x' '4x' ) ] .

:waveShaperOversample__none rdfs:label 'none'^^xsd:string ;
  dcterms:description "No oversampling" .
:waveShaperOversample__2x rdfs:label '2x'^^xsd:string ;
  dcterms:description "Double sampling rate" .
:waveShaperOversample__4x rdfs:label '4x'^^xsd:string ;
  dcterms:description "Quadruple sampling rate" .

:x3dVersionChoices rdf:type rdfs:Datatype ;
  rdfs:label "x3dVersionChoices" ;
  dcterms:description "x3dVersionChoices enumeration string constants are used to identify the allowed versions for an X3D scene graph. This list is bounded, no additional values are allowed.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/concepts.html#Profiles" ;
  rdfs:domain xsd:NMTOKEN ;
  rdfs:range [ owl:oneOf ( '3.0' '3.1' '3.2' '3.3' '4.0' ) ] .

:x3dVersion__3.0 rdfs:label '3.0'^^xsd:string ;
  dcterms:description "X3D version 3.0 approved by ISO in 2004.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19775-1/V3.0/index.html" .
:x3dVersion__3.1 rdfs:label '3.1'^^xsd:string ;
  dcterms:description "X3D version 3.1 Amendment 1 approved by ISO in 2005. Backwards compatibility maintained with version 3.0.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19775-1/V3.1/index.html" .
:x3dVersion__3.2 rdfs:label '3.2'^^xsd:string ;
  dcterms:description "X3D version 3.2 Amendment 2 approved by ISO in 2007. Backwards compatibility maintained with versions 3.0 and 3.1.";
  dcterms:reference "https://www.web3d.org/documents/specifications/19775-1/V3.2/index.html" .
:x3dVersion__3.3 rdfs:label '3.3'^^xsd:string ;
  dcterms:description "X3D version 3.3 approved by ISO in 2013 as International Standard (IS). Backwards compatibility maintained with versions 3.0, 3.1 and 3.2.";
  dcterms:reference "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-DIS/Part01/X3D.html" .
:x3dVersion__4.0 rdfs:label '4.0'^^xsd:string ;
  dcterms:description "X3D version 4.0 under final development by Web3D Consortium. Backwards compatibility maintained with versions 3.0, 3.1, 3.2 and 3.3.";
  dcterms:reference "https://www.web3d.org/x3d4" .

###############################################

# AbstractNodeTypes

:X3DAppearanceChildNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Nodes of this type can be used as child nodes for Appearance." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DAppearanceNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Base type for all Appearance nodes." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DArrayField a owl:Class ;
  rdfs:label "X3DArrayField is the abstract field type from which all field types that can contain multiple values are derived, implementing the X3DField interface. All fields derived from X3DArrayField have names beginning with MF (multiple-valued field). MF fields may zero or more values, each of which shall be of the type indicated by the corresponding SF field type. It is illegal for any MF field to mix values of different SF field types." .

:X3DBackgroundNode a owl:Class ;
  rdfs:subClassOf :X3DBindableNode ;
  rdfs:label "Abstract type from which all backgrounds inherit, also defining a background binding stack." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:groundAngle a owl:DatatypeProperty ;
  rdfs:label "X3DBackgroundNode field groundAngle is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBackgroundNode , :Background , :TextureBackground ;
  rdfs:range :MFFloat .
:groundColor a owl:DatatypeProperty ;
  rdfs:label "X3DBackgroundNode field groundColor is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBackgroundNode , :Background , :TextureBackground ;
  rdfs:range :MFColor .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
:skyAngle a owl:DatatypeProperty ;
  rdfs:label "X3DBackgroundNode field skyAngle is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBackgroundNode , :Background , :TextureBackground ;
  rdfs:range :MFFloat .
:skyColor a owl:DatatypeProperty ;
  rdfs:label "X3DBackgroundNode field skyColor is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBackgroundNode , :Background , :TextureBackground ;
  rdfs:range :MFColor ;
  :skyColorDefault ( 0 0 0 ) .
:transparency a owl:DatatypeProperty ;
  rdfs:label "X3DBackgroundNode field transparency is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBackgroundNode , :Background , :TextureBackground ;
  rdfs:range :SFFloat ;
  :transparencyDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DBindableNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Bindable nodes implement the binding stack, so that only one of each node type is active at a given time." .
:bindTime a owl:DatatypeProperty ;
  rdfs:label "X3DBindableNode field bindTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DBindableNode ;
  rdfs:range :SFTime .
:isBound a owl:DatatypeProperty ;
  rdfs:label "X3DBindableNode field isBound is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DBindableNode ;
  rdfs:range :SFBool .
:set_bind a owl:DatatypeProperty ;
  rdfs:label "X3DBindableNode field set_bind is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DBindableNode ;
  rdfs:range :SFBool .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DChaserNode a owl:Class ;
  rdfs:subClassOf :X3DFollowerNode ;
  rdfs:label "The X3DChaserNode abstract node type calculates the output on value_changed as a finite impulse response (FIR) based on the events received on set_destination field." .
:duration a owl:DatatypeProperty ;
  rdfs:label "X3DChaserNode field duration is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DChaserNode , :ColorChaser , :CoordinateChaser , :OrientationChaser , :PositionChaser , :PositionChaser2D , :ScalarChaser , :TexCoordChaser2D ;
  rdfs:range :SFTime ;
  :durationDefault 1 .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DChildNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "A node that implements X3DChildNode is one of the legal children for a X3DGroupingNode parent." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DColorNode a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "Base type for color specifications in X3D." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DComposableVolumeRenderStyleNode a owl:Class ;
  rdfs:subClassOf :X3DVolumeRenderStyleNode ;
  rdfs:label "The X3DComposableVolumeRenderStyleNode abstract node type is the base type for all node types that allow rendering styles to be sequentially composed together to form a single renderable output." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DComposedGeometryNode a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Composed geometry nodes produce renderable geometry, can contain Color Coordinate Normal TextureCoordinate, and are contained by a Shape node." .
:attrib a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field attrib is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :X3DVertexAttributeNode ;
  rdfs:subPropertyOf :hasChild .
:ccw a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field ccw is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :SFBool ;
  :ccwDefault xsd:true .
:color a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field color is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild .
:colorPerVertex a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field colorPerVertex is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :SFBool ;
  :colorPerVertexDefault xsd:true .
:coord a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field coord is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild .
:fogCoord a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field fogCoord is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :FogCoordinate ;
  rdfs:subPropertyOf :hasChild .
:normal a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field normal is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild .
:normalPerVertex a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field normalPerVertex is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :SFBool ;
  :normalPerVertexDefault xsd:true .
:solid a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field solid is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range :SFBool ;
  :solidDefault xsd:true .
:texCoord a owl:DatatypeProperty ;
  rdfs:label "X3DComposedGeometryNode field texCoord is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DComposedGeometryNode , :IndexedFaceSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :QuadSet , :TriangleFanSet , :TriangleSet , :TriangleStripSet ;
  rdfs:range  [ owl:unionOf ( :X3DSingleTextureCoordinateNode :MultiTextureCoordinate ) ] ;
  rdfs:subPropertyOf :hasChild .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DCoordinateNode a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "Base type for all coordinate node types in X3D." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DDamperNode a owl:Class ;
  rdfs:subClassOf :X3DFollowerNode ;
  rdfs:label "The X3DDamperNode abstract node type creates an IIR response that approaches the destination value according to the shape of the e-function only asymptotically but very quickly." .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:order a owl:DatatypeProperty ;
  rdfs:label "X3DDamperNode field order is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DDamperNode , :ColorDamper , :CoordinateDamper , :OrientationDamper , :PositionDamper , :PositionDamper2D , :ScalarDamper , :TexCoordDamper2D ;
  rdfs:range :SFInt32 ;
  :orderDefault 3 .
:tau a owl:DatatypeProperty ;
  rdfs:label "X3DDamperNode field tau is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DDamperNode , :ColorDamper , :CoordinateDamper , :OrientationDamper , :PositionDamper , :PositionDamper2D , :ScalarDamper , :TexCoordDamper2D ;
  rdfs:range :SFTime ;
  :tauDefault 0.3 .
:tolerance a owl:DatatypeProperty ;
  rdfs:label "X3DDamperNode field tolerance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DDamperNode , :ColorDamper , :CoordinateDamper , :OrientationDamper , :PositionDamper , :PositionDamper2D , :ScalarDamper , :TexCoordDamper2D ;
  rdfs:range :SFFloat ;
  :toleranceDefault -1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DDragSensorNode a owl:Class ;
  rdfs:subClassOf :X3DPointingDeviceSensorNode ;
  rdfs:label "Base type for all drag-style pointing device sensors." .
:autoOffset a owl:DatatypeProperty ;
  rdfs:label "X3DDragSensorNode field autoOffset is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DDragSensorNode , :CylinderSensor , :PlaneSensor , :SphereSensor ;
  rdfs:range :SFBool ;
  :autoOffsetDefault xsd:true .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
:trackPoint_changed a owl:DatatypeProperty ;
  rdfs:label "X3DDragSensorNode field trackPoint_changed is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DDragSensorNode ;
  rdfs:range :SFVec3f .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DEnvironmentalSensorNode a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "Base type for the environmental sensor nodes ProximitySensor, TransformSensor and VisibilitySensor." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:size a owl:DatatypeProperty ;
  rdfs:label "X3DEnvironmentalSensorNode field size is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DEnvironmentalSensorNode , :GeoProximitySensor , :ProximitySensor , :TransformSensor , :VisibilitySensor ;
  rdfs:range :SFVec3f ;
  :sizeDefault ( 0 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DEnvironmentTextureNode a owl:Class ;
  rdfs:subClassOf :X3DTextureNode ;
  rdfs:label "Base type for all nodes that specify cubic environment map sources for texture images." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DField a owl:Class ;
  rdfs:label "X3DField is the abstract field type from which all single values field types are derived. All fields directly derived from X3DField have names beginning with SF (single-valued field). SF fields may only contain a single value of the type indicated by the name of the field type." .

:X3DFollowerNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "X3DFollowerNode is the abstract base class for all nodes in the Followers component." .
:isActive a owl:DatatypeProperty ;
  rdfs:label "X3DFollowerNode field isActive is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DFollowerNode ;
  rdfs:range :SFBool .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DFontStyleNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Base type for all font style nodes." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
:class a owl:DatatypeProperty ;
  rdfs:label "X3DFontStyleNode attribute class is implemented by multiple nodes. The class attribute on each X3D node and statement is a space-separated list of classes, reserved for use by Cascading Style Sheets (CSS) and XML stylesheets." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DFontStyleNode ;
  rdfs:range xsd:NMTOKENS .
:id a owl:DatatypeProperty ;
  rdfs:label "X3DFontStyleNode attribute id is implemented by multiple nodes. The id attribute on each X3D node and statement is considered a unique identifier when used as part of an encompassing HTML/DOM context." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DFontStyleNode ;
  rdfs:range xsd:NMTOKEN .

:X3DGeometricPropertyNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Base type for all geometric property node types." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DGeometryNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Geometry nodes produce renderable geometry and are contained by a Shape node." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DGroupingNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "Grouping nodes can contain other nodes as children, thus making up the backbone of a scene graph." .
:addChildren a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field addChildren is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DGroupingNode ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field bboxCenter is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DGroupingNode , :X3DViewportNode , :Anchor , :Billboard , :CADAssembly , :CADLayer , :CADPart , :Collision , :EspduTransform , :GeoLocation , :GeoTransform , :Group , :HAnimSegment , :HAnimSite , :LayoutGroup , :LOD , :PickableGroup , :ScreenGroup , :Switch , :Transform , :Viewport ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field bboxDisplay is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DGroupingNode , :X3DViewportNode , :Anchor , :Billboard , :CADAssembly , :CADLayer , :CADPart , :Collision , :EspduTransform , :GeoLocation , :GeoTransform , :Group , :HAnimSegment , :HAnimSite , :LayoutGroup , :LOD , :PickableGroup , :ScreenGroup , :Switch , :Transform , :Viewport ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field bboxSize is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DGroupingNode , :X3DViewportNode , :Anchor , :Billboard , :CADAssembly , :CADLayer , :CADPart , :Collision , :EspduTransform , :GeoLocation , :GeoTransform , :Group , :HAnimSegment , :HAnimSite , :LayoutGroup , :LOD , :PickableGroup , :ScreenGroup , :Switch , :Transform , :Viewport ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:children a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field children is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DGroupingNode , :X3DViewportNode , :Anchor , :Billboard , :CADAssembly , :CADLayer , :Collision , :EspduTransform , :GeoLocation , :GeoTransform , :Group , :HAnimSegment , :HAnimSite , :LOD , :PickableGroup , :ScreenGroup , :Switch , :Transform , :Viewport ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:removeChildren a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field removeChildren is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DGroupingNode ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DGroupingNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DGroupingNode , :X3DViewportNode , :Anchor , :Billboard , :CADAssembly , :CADLayer , :CADPart , :Collision , :EspduTransform , :GeoLocation , :GeoTransform , :Group , :HAnimSegment , :HAnimSite , :LayoutGroup , :LOD , :PickableGroup , :ScreenGroup , :Switch , :Transform , :Viewport ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DInfoNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type for all nodes that contain only information without visual semantics." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DInterpolatorNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Interpolator nodes are designed for linear keyframed animation. Interpolators are driven by an input key ranging [0..1] and produce corresponding piecewise-linear output functions." .
:key a owl:DatatypeProperty ;
  rdfs:label "X3DInterpolatorNode field key is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DInterpolatorNode , :ColorInterpolator , :CoordinateInterpolator , :CoordinateInterpolator2D , :GeoPositionInterpolator , :NormalInterpolator , :OrientationInterpolator , :PositionInterpolator , :PositionInterpolator2D , :ScalarInterpolator , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SquadOrientationInterpolator ;
  rdfs:range :MFFloat .
:set_fraction a owl:DatatypeProperty ;
  rdfs:label "X3DInterpolatorNode field set_fraction is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DInterpolatorNode ;
  rdfs:range :SFFloat .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DKeyDeviceSensorNode a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "Base type for all sensor node types that operate using key devices." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DLayerNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DPickableObject ;
  rdfs:label "The X3DLayerNode abstract node type is the base node type for layer nodes." .
:objectType a owl:DatatypeProperty ;
  rdfs:label "X3DLayerNode field objectType is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLayerNode , :Layer , :LayoutLayer ;
  rdfs:range :pickableObjectTypeValues ;
  :objectTypeDefault ( "ALL" ) .
:pickable a owl:DatatypeProperty ;
  rdfs:label "X3DLayerNode field pickable is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLayerNode , :Layer , :LayoutLayer ;
  rdfs:range :SFBool ;
  :pickableDefault xsd:true .
:viewport a owl:DatatypeProperty ;
  rdfs:label "X3DLayerNode field viewport is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLayerNode , :Layer , :LayoutLayer ;
  rdfs:range :X3DViewportNode ;
  rdfs:subPropertyOf :hasChild .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DLayerNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLayerNode , :Layer , :LayoutLayer ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DLayoutNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "X3DLayoutNode is the base node type for layout nodes." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DLightNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Light nodes provide illumination for rendering geometry in the scene. Implementing nodes must include a global field with type SFBool and accessType inputOutput." .
:ambientIntensity a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field ambientIntensity is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFFloat ;
  :ambientIntensityDefault 0 .
:color a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field color is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFColor ;
  :colorDefault ( 1 1 1 ) .
:intensity a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field intensity is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFFloat ;
  :intensityDefault 1 .
:on a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field on is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFBool ;
  :onDefault xsd:true .
:shadowIntensity a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field shadowIntensity is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFFloat ;
  :shadowIntensityDefault 1 .
:shadows a owl:DatatypeProperty ;
  rdfs:label "X3DLightNode field shadows is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DLightNode , :X3DTextureProjectorNode , :DirectionalLight , :PointLight , :SpotLight , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFBool ;
  :shadowsDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DMaterialNode a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "Base type for all Material nodes." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNBodyCollidableNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "The X3DNBodyCollidableNode abstract node type represents objects that act as the interface between the rigid body physics, collision geometry proxy, and renderable objects in the scene graph hierarchy." .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field bboxCenter is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field bboxDisplay is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field bboxSize is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
:rotation a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field rotation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFRotation ;
  :rotationDefault ( 0 0 1 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field translation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFVec3f ;
  :translationDefault ( 0 0 0 ) .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollidableNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollidableNode , :CollidableOffset , :CollidableShape ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNBodyCollisionSpaceNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "The X3DNBodyCollisionSpaceNode abstract node type represents objects that act as a self-contained spatial collection of objects that can interact through collision detection routines." .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollisionSpaceNode field bboxCenter is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNBodyCollisionSpaceNode , :CollisionSpace ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollisionSpaceNode field bboxDisplay is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollisionSpaceNode , :CollisionSpace ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollisionSpaceNode field bboxSize is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNBodyCollisionSpaceNode , :CollisionSpace ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollisionSpaceNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollisionSpaceNode , :CollisionSpace ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DNBodyCollisionSpaceNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNBodyCollisionSpaceNode , :CollisionSpace ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNetworkSensorNode a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "Base typefor all sensors that generate events based on network activity." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNode a owl:Class ;
  rdfs:label "All instantiable nodes implement X3DNode, which corresponds to SFNode type in the X3D specification." .
:DEF a owl:DatatypeProperty ;
  rdfs:label "X3DNode field DEF is implemented by multiple nodes. DEF defines a unique ID name for each node, referenceable by other nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DProgrammableShaderObject , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DFontStyleNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DScriptNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedShader , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataSet , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :PackagedShader , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range xsd:ID .
:USE a owl:DatatypeProperty ;
  rdfs:label "X3DNode field USE is implemented by multiple nodes. USE means reuse an already DEF-ed node ID, excluding all child nodes and all other attributes (except for containerField, which can have a different value)." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DProgrammableShaderObject , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DFontStyleNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DScriptNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedShader , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataSet , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :PackagedShader , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range xsd:IDREF .
:hasIS a owl:DatatypeProperty ;
  rdfs:label "X3DNode field IS is implemented by multiple nodes. IS/connect statements define prototype connections between ProtoInterface fields and node fields within a ProtoBody." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range :IS ;
  rdfs:subPropertyOf :hasChild .
:hasMetadata a owl:DatatypeProperty ;
  rdfs:label "X3DNode field metadata is implemented by multiple nodes. Information about this node can be contained in a MetadataBoolean, MetadataDouble, MetadataFloat, MetadataInteger, MetadataString or MetadataSet node." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range :X3DMetadataObject ;
  rdfs:subPropertyOf :hasChild .
:class a owl:DatatypeProperty ;
  rdfs:label "X3DNode attribute class is implemented by multiple nodes. The class attribute is a space-separated list of classes, reserved for use by Cascading Style Sheets (CSS) and XML stylesheets. This attribute is only functional if the X3D model is loaded within an HTML page." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DStatement , :component , :connect , :EXPORT , :ExternProtoDeclare , :field , :fieldValue , :head , :IMPORT , :IS , :meta , :ProtoBody , :ProtoDeclare , :ProtoInterface , :ROUTE , :Scene , :unit , :X3D , :X3DProgrammableShaderObject , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DScriptNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DStatement , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedShader , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataSet , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :PackagedShader , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range xsd:NMTOKENS .
:id a owl:DatatypeProperty ;
  rdfs:label "X3DNode attribute id is implemented by multiple nodes. The id attribute is a unique identifier, reserved for use by HTML5/DOM pages, independent of DEF labeling and internal X3D node referencing. This attribute is only functional if the X3D model is loaded within an HTML page." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DStatement , :component , :connect , :EXPORT , :ExternProtoDeclare , :field , :fieldValue , :head , :IMPORT , :IS , :meta , :ProtoBody , :ProtoDeclare , :ProtoInterface , :ROUTE , :Scene , :unit , :X3D , :X3DProgrammableShaderObject , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DScriptNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DStatement , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedShader , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :FontStyle , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataSet , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :PackagedShader , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenFontStyle , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range xsd:NMTOKEN .
:style a owl:DatatypeProperty ;
  rdfs:label "X3DNode attribute style is implemented by multiple nodes. The style attribute provides an inline block of CSS for element styling, reserved for use by Cascading Style Sheets (CSS) and XML stylesheets. This attribute is only functional if the X3D model is loaded within an HTML page." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNode , :X3DStatement , :component , :connect , :EXPORT , :ExternProtoDeclare , :field , :fieldValue , :head , :IMPORT , :IS , :meta , :ProtoBody , :ProtoDeclare , :ProtoInterface , :ROUTE , :Scene , :unit , :X3D , :X3DProgrammableShaderObject , :X3DAppearanceChildNode , :X3DAppearanceNode , :X3DBackgroundNode , :X3DBindableNode , :X3DChaserNode , :X3DChildNode , :X3DColorNode , :X3DComposableVolumeRenderStyleNode , :X3DComposedGeometryNode , :X3DCoordinateNode , :X3DDamperNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DEnvironmentTextureNode , :X3DFollowerNode , :X3DGeometricPropertyNode , :X3DGeometryNode , :X3DGroupingNode , :X3DInfoNode , :X3DInterpolatorNode , :X3DKeyDeviceSensorNode , :X3DLayerNode , :X3DLayoutNode , :X3DLightNode , :X3DMaterialNode , :X3DNBodyCollidableNode , :X3DNBodyCollisionSpaceNode , :X3DNetworkSensorNode , :X3DNormalNode , :X3DNurbsControlCurveNode , :X3DNurbsSurfaceGeometryNode , :X3DOneSidedMaterialNode , :X3DParametricGeometryNode , :X3DParticleEmitterNode , :X3DParticlePhysicsModelNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DProductStructureChildNode , :X3DRigidJointNode , :X3DScriptNode , :X3DSensorNode , :X3DSequencerNode , :X3DShaderNode , :X3DShapeNode , :X3DSingleTextureCoordinateNode , :X3DSingleTextureNode , :X3DSingleTextureTransformNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :X3DSoundNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :X3DStatement , :X3DTexture2DNode , :X3DTexture3DNode , :X3DTextureCoordinateNode , :X3DTextureNode , :X3DTextureProjectorNode , :X3DTextureTransformNode , :X3DTimeDependentNode , :X3DTouchSensorNode , :X3DTriggerNode , :X3DVertexAttributeNode , :X3DViewpointNode , :X3DViewportNode , :X3DVolumeDataNode , :X3DVolumeRenderStyleNode , :AcousticProperties , :Analyser , :Anchor , :Appearance , :Arc2D , :ArcClose2D , :AudioClip , :AudioDestination , :Background , :BallJoint , :Billboard , :BiquadFilter , :BlendedVolumeStyle , :BooleanFilter , :BooleanSequencer , :BooleanToggle , :BooleanTrigger , :BoundaryEnhancementVolumeStyle , :BoundedPhysicsModel , :Box , :BufferAudioSource , :CADAssembly , :CADFace , :CADLayer , :CADPart , :CartoonVolumeStyle , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :Circle2D , :ClipPlane , :CollidableOffset , :CollidableShape , :Collision , :CollisionCollection , :CollisionSensor , :CollisionSpace , :Color , :ColorChaser , :ColorDamper , :ColorInterpolator , :ColorRGBA , :ComposedCubeMapTexture , :ComposedShader , :ComposedTexture3D , :ComposedVolumeStyle , :Cone , :ConeEmitter , :Contact , :Contour2D , :ContourPolyline2D , :Convolver , :Coordinate , :CoordinateChaser , :CoordinateDamper , :CoordinateDouble , :CoordinateInterpolator , :CoordinateInterpolator2D , :Cylinder , :CylinderSensor , :Delay , :DirectionalLight , :DISEntityManager , :DISEntityTypeMapping , :Disk2D , :DoubleAxisHingeJoint , :DynamicsCompressor , :EaseInEaseOut , :EdgeEnhancementVolumeStyle , :ElevationGrid , :EspduTransform , :ExplosionEmitter , :Extrusion , :FillProperties , :FloatVertexAttribute , :Fog , :FogCoordinate , :ForcePhysicsModel , :Gain , :GeneratedCubeMapTexture , :GeoCoordinate , :GeoElevationGrid , :GeoLocation , :GeoLOD , :GeoMetadata , :GeoOrigin , :GeoPositionInterpolator , :GeoProximitySensor , :GeoTouchSensor , :GeoTransform , :GeoViewpoint , :Group , :HAnimDisplacer , :HAnimHumanoid , :HAnimJoint , :HAnimMotion , :HAnimSegment , :HAnimSite , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :IndexedFaceSet , :IndexedLineSet , :IndexedQuadSet , :IndexedTriangleFanSet , :IndexedTriangleSet , :IndexedTriangleStripSet , :Inline , :IntegerSequencer , :IntegerTrigger , :IsoSurfaceVolumeData , :KeySensor , :Layer , :LayerSet , :Layout , :LayoutGroup , :LayoutLayer , :LinePickSensor , :LineProperties , :LineSet , :ListenerPointSource , :LoadSensor , :LocalFog , :LOD , :Material , :Matrix3VertexAttribute , :Matrix4VertexAttribute , :MetadataBoolean , :MetadataDouble , :MetadataFloat , :MetadataInteger , :MetadataSet , :MetadataString , :MicrophoneSource , :MotorJoint , :MovieTexture , :MultiTexture , :MultiTextureCoordinate , :MultiTextureTransform , :NavigationInfo , :Normal , :NormalInterpolator , :NurbsCurve , :NurbsCurve2D , :NurbsOrientationInterpolator , :NurbsPatchSurface , :NurbsPositionInterpolator , :NurbsSet , :NurbsSurfaceInterpolator , :NurbsSweptSurface , :NurbsSwungSurface , :NurbsTextureCoordinate , :NurbsTrimmedSurface , :OpacityMapVolumeStyle , :OrientationChaser , :OrientationDamper , :OrientationInterpolator , :OrthoViewpoint , :OscillatorSource , :PackagedShader , :ParticleSystem , :PeriodicWave , :PhysicalMaterial , :PickableGroup , :PixelTexture , :PixelTexture3D , :PlaneSensor , :PointEmitter , :PointLight , :PointPickSensor , :PointProperties , :PointSet , :Polyline2D , :PolylineEmitter , :Polypoint2D , :PositionChaser , :PositionChaser2D , :PositionDamper , :PositionDamper2D , :PositionInterpolator , :PositionInterpolator2D , :PrimitivePickSensor , :ProgramShader , :ProjectionVolumeStyle , :ProtoInstance , :ProximitySensor , :QuadSet , :ReceiverPdu , :Rectangle2D , :RigidBody , :RigidBodyCollection , :ScalarChaser , :ScalarDamper , :ScalarInterpolator , :ScreenGroup , :Script , :SegmentedVolumeData , :ShadedVolumeStyle , :ShaderPart , :ShaderProgram , :Shape , :SignalPdu , :SilhouetteEnhancementVolumeStyle , :SingleAxisHingeJoint , :SliderJoint , :Sound , :SpatialSound , :Sphere , :SphereSensor , :SplinePositionInterpolator , :SplinePositionInterpolator2D , :SplineScalarInterpolator , :SpotLight , :SquadOrientationInterpolator , :StaticGroup , :StreamAudioDestination , :StreamAudioSource , :StringSensor , :SurfaceEmitter , :Switch , :TexCoordChaser2D , :TexCoordDamper2D , :Text , :TextureBackground , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator , :TextureProjector , :TextureProjectorParallel , :TextureProperties , :TextureTransform , :TextureTransform3D , :TextureTransformMatrix3D , :TimeSensor , :TimeTrigger , :ToneMappedVolumeStyle , :TouchSensor , :Transform , :TransformSensor , :TransmitterPdu , :TriangleFanSet , :TriangleSet , :TriangleSet2D , :TriangleStripSet , :TwoSidedMaterial , :UniversalJoint , :UnlitMaterial , :Viewpoint , :ViewpointGroup , :Viewport , :VisibilitySensor , :VolumeData , :VolumeEmitter , :VolumePickSensor , :WaveShaper , :WindPhysicsModel , :WorldInfo ;
  rdfs:range :SFString .

:X3DNormalNode a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "Base type for all normal node types in X3D." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNurbsControlCurveNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Base type for all nodes that provide control curve information in 2D space." .
:controlPoint a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsControlCurveNode field controlPoint is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsControlCurveNode , :ContourPolyline2D , :NurbsCurve2D ;
  rdfs:range :MFVec2d .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DNurbsSurfaceGeometryNode a owl:Class ;
  rdfs:subClassOf :X3DParametricGeometryNode ;
  rdfs:label "Abstract geometry type for all types of NURBS surfaces." .
:controlPoint a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field controlPoint is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range  [ owl:unionOf ( :Coordinate :CoordinateDouble ) ] ;
  rdfs:subPropertyOf :hasChild .
:solid a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field solid is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFBool ;
  :solidDefault xsd:true .
:texCoord a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field texCoord is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range  [ owl:unionOf ( :X3DSingleTextureCoordinateNode :NurbsTextureCoordinate ) ] ;
  rdfs:subPropertyOf :hasChild .
:uClosed a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field uClosed is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFBool ;
  :uClosedDefault xsd:false .
:uDimension a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field uDimension is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :uDimensionDefault 0 .
:uKnot a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field uKnot is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :MFDouble .
:uOrder a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field uOrder is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :uOrderDefault 3 .
:uTessellation a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field uTessellation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :uTessellationDefault 0 .
:vClosed a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field vClosed is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFBool ;
  :vClosedDefault xsd:false .
:vDimension a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field vDimension is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :vDimensionDefault 0 .
:vKnot a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field vKnot is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :MFDouble .
:vOrder a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field vOrder is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :vOrderDefault 3 .
:vTessellation a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field vTessellation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :SFInt32 ;
  :vTessellationDefault 0 .
:weight a owl:DatatypeProperty ;
  rdfs:label "X3DNurbsSurfaceGeometryNode field weight is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DNurbsSurfaceGeometryNode , :NurbsPatchSurface , :NurbsTrimmedSurface ;
  rdfs:range :MFDouble .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DOneSidedMaterialNode a owl:Class ;
  rdfs:subClassOf :X3DMaterialNode ;
  rdfs:label "Base type for material nodes that describe how the shape looks like from one side. A different number of contanied texture nodes are allowed by each of the implementing nodes." .
:emissiveTextureMapping a owl:DatatypeProperty ;
  rdfs:label "X3DOneSidedMaterialNode field emissiveTextureMapping is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DOneSidedMaterialNode , :Material , :PhysicalMaterial , :UnlitMaterial ;
  rdfs:range xsd:NMTOKEN .
:normalScale a owl:DatatypeProperty ;
  rdfs:label "X3DOneSidedMaterialNode field normalScale is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DOneSidedMaterialNode , :Material , :PhysicalMaterial , :UnlitMaterial ;
  rdfs:range :SFFloat ;
  :normalScaleDefault 1 .
:normalTextureMapping a owl:DatatypeProperty ;
  rdfs:label "X3DOneSidedMaterialNode field normalTextureMapping is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DOneSidedMaterialNode , :Material , :PhysicalMaterial , :UnlitMaterial ;
  rdfs:range xsd:NMTOKEN .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DParametricGeometryNode a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Base type for all geometry node types that are created parametrically and use control points to describe the final shape of the surface." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DParticleEmitterNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "The X3DParticleEmitterNode abstract type represents any node that is an emitter of particles." .
:mass a owl:DatatypeProperty ;
  rdfs:label "X3DParticleEmitterNode field mass is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticleEmitterNode , :ConeEmitter , :ExplosionEmitter , :PointEmitter , :PolylineEmitter , :SurfaceEmitter , :VolumeEmitter ;
  rdfs:range :SFFloat ;
  :massDefault 0 .
:on a owl:DatatypeProperty ;
  rdfs:label "X3DParticleEmitterNode field on is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticleEmitterNode , :ConeEmitter , :ExplosionEmitter , :PointEmitter , :PolylineEmitter , :SurfaceEmitter , :VolumeEmitter ;
  rdfs:range :SFBool ;
  :onDefault xsd:true .
:speed a owl:DatatypeProperty ;
  rdfs:label "X3DParticleEmitterNode field speed is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticleEmitterNode , :ConeEmitter , :ExplosionEmitter , :PointEmitter , :PolylineEmitter , :SurfaceEmitter , :VolumeEmitter ;
  rdfs:range :SFFloat ;
  :speedDefault 0 .
:surfaceArea a owl:DatatypeProperty ;
  rdfs:label "X3DParticleEmitterNode field surfaceArea is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticleEmitterNode , :ConeEmitter , :ExplosionEmitter , :PointEmitter , :PolylineEmitter , :SurfaceEmitter , :VolumeEmitter ;
  rdfs:range :SFFloat ;
  :surfaceAreaDefault 0 .
:variation a owl:DatatypeProperty ;
  rdfs:label "X3DParticleEmitterNode field variation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticleEmitterNode , :ConeEmitter , :ExplosionEmitter , :PointEmitter , :PolylineEmitter , :SurfaceEmitter , :VolumeEmitter ;
  rdfs:range :SFFloat ;
  :variationDefault 0.25 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DParticlePhysicsModelNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "The X3DParticlePhysicsModelNode abstract type represents any node that applies a form of constraints on the particles after they have been generated." .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DParticlePhysicsModelNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DParticlePhysicsModelNode , :BoundedPhysicsModel , :ForcePhysicsModel , :WindPhysicsModel ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DPickSensorNode a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "The X3DPickSensorNode abstract node type is the base node type that represents the lowest common denominator of picking capabilities." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:intersectionType a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field intersectionType is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range :intersectionTypeValues ;
  :intersectionTypeDefault "BOUNDS" .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:matchCriterion a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field matchCriterion is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range :pickSensorMatchCriterionChoices ;
  :matchCriterionDefault "MATCH_ANY" .
:objectType a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field objectType is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range :pickableObjectTypeValues ;
  :objectTypeDefault ( "ALL" ) .
:pickedGeometry a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field pickedGeometry is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DPickSensorNode ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:pickingGeometry a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field pickingGeometry is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range :X3DGeometryNode ;
  rdfs:subPropertyOf :hasChild .
:pickTarget a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field pickTarget is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range  [ owl:unionOf ( :X3DGroupingNode :X3DShapeNode :Inline ) ] ;
  rdfs:subPropertyOf :hasChild .
:sortOrder a owl:DatatypeProperty ;
  rdfs:label "X3DPickSensorNode field sortOrder is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DPickSensorNode , :LinePickSensor , :PointPickSensor , :PrimitivePickSensor , :VolumePickSensor ;
  rdfs:range :pickSensorSortOrderValues ;
  :sortOrderDefault "CLOSEST" .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DPointingDeviceSensorNode a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "Base type for all pointing device sensors." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:isOver a owl:DatatypeProperty ;
  rdfs:label "X3DPointingDeviceSensorNode field isOver is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DPointingDeviceSensorNode ;
  rdfs:range :SFBool .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DProductStructureChildNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type marking nodes that are valid product structure children for the CADGeometry component." .
:name a owl:DatatypeProperty ;
  rdfs:label "X3DProductStructureChildNode field name is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DProductStructureChildNode , :CADAssembly , :CADFace , :CADPart ;
  rdfs:range :SFString .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DPrototypeInstance a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Base type for all prototype instances. Note that direct children nodes are disallowed, instead let fieldValue with type SFNode/MFNode contain them. Current practice is that, if desired, prototype authors must explicitly add the metadata SFNode field in the ProtoInterface." .
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL

:X3DRigidJointNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "The X3DRigidJointNode abstract node type is the base type for all joint types." .
:body1 a owl:DatatypeProperty ;
  rdfs:label "X3DRigidJointNode field body1 is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DRigidJointNode , :BallJoint , :DoubleAxisHingeJoint , :MotorJoint , :SingleAxisHingeJoint , :SliderJoint , :UniversalJoint ;
  rdfs:range :RigidBody ;
  rdfs:subPropertyOf :hasChild .
:body2 a owl:DatatypeProperty ;
  rdfs:label "X3DRigidJointNode field body2 is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DRigidJointNode , :BallJoint , :DoubleAxisHingeJoint , :MotorJoint , :SingleAxisHingeJoint , :SliderJoint , :UniversalJoint ;
  rdfs:range :RigidBody ;
  rdfs:subPropertyOf :hasChild .
:forceOutput a owl:DatatypeProperty ;
  rdfs:label "X3DRigidJointNode field forceOutput is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DRigidJointNode , :BallJoint , :DoubleAxisHingeJoint , :MotorJoint , :SingleAxisHingeJoint , :SliderJoint , :UniversalJoint ;
  rdfs:range :forceOutputValues ;
  :forceOutputDefault ( "NONE" ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DScriptNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "Base type for scripting nodes (but not shader nodes)." .
:autoRefresh a owl:DatatypeProperty ;
  rdfs:label "X3DScriptNode field autoRefresh is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DScriptNode , :Script ;
  rdfs:range :SFTime ;
  :autoRefreshDefault 0 .
:autoRefreshTimeLimit a owl:DatatypeProperty ;
  rdfs:label "X3DScriptNode field autoRefreshTimeLimit is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DScriptNode , :Script ;
  rdfs:range :SFTime ;
  :autoRefreshTimeLimitDefault 3600 .
:description a owl:DatatypeProperty ;
  rdfs:label "X3DScriptNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DScriptNode , :Script ;
  rdfs:range :SFString .
:load a owl:DatatypeProperty ;
  rdfs:label "X3DScriptNode field load is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DScriptNode , :Script ;
  rdfs:range :SFBool ;
  :loadDefault xsd:true .
:url a owl:DatatypeProperty ;
  rdfs:label "X3DScriptNode field url is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DScriptNode , :Script ;
  rdfs:range :MFString .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSensorNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type for all sensors." .
:description a owl:DatatypeProperty ;
  rdfs:label "X3DSensorNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSensorNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DKeyDeviceSensorNode , :X3DNetworkSensorNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DTouchSensorNode , :Collision , :CollisionSensor , :CylinderSensor , :GeoProximitySensor , :GeoTouchSensor , :KeySensor , :LinePickSensor , :LoadSensor , :PlaneSensor , :PointPickSensor , :PrimitivePickSensor , :ProximitySensor , :ReceiverPdu , :SignalPdu , :SphereSensor , :StringSensor , :TouchSensor , :TransformSensor , :TransmitterPdu , :VisibilitySensor , :VolumePickSensor ;
  rdfs:range :SFString .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DSensorNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSensorNode , :X3DDragSensorNode , :X3DEnvironmentalSensorNode , :X3DKeyDeviceSensorNode , :X3DNetworkSensorNode , :X3DPickSensorNode , :X3DPointingDeviceSensorNode , :X3DTouchSensorNode , :Collision , :CollisionSensor , :CylinderSensor , :GeoProximitySensor , :GeoTouchSensor , :KeySensor , :LinePickSensor , :LoadSensor , :PlaneSensor , :PointPickSensor , :PrimitivePickSensor , :ProximitySensor , :ReceiverPdu , :SignalPdu , :SphereSensor , :StringSensor , :TimeSensor , :TouchSensor , :TransformSensor , :TransmitterPdu , :VisibilitySensor , :VolumePickSensor ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
:isActive a owl:DatatypeProperty ;
  rdfs:label "X3DSensorNode field isActive is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DSensorNode ;
  rdfs:range :SFBool .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSequencerNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type from which all Sequencers are derived." .
:key a owl:DatatypeProperty ;
  rdfs:label "X3DSequencerNode field key is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSequencerNode , :BooleanSequencer , :IntegerSequencer ;
  rdfs:range :MFFloat .
:next a owl:DatatypeProperty ;
  rdfs:label "X3DSequencerNode field next is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DSequencerNode ;
  rdfs:range :SFBool .
:previous a owl:DatatypeProperty ;
  rdfs:label "X3DSequencerNode field previous is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DSequencerNode ;
  rdfs:range :SFBool .
:set_fraction a owl:DatatypeProperty ;
  rdfs:label "X3DSequencerNode field set_fraction is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DSequencerNode ;
  rdfs:range :SFFloat .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DShaderNode a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "Base type for all nodes that specify a programmable shader." .
:activate a owl:DatatypeProperty ;
  rdfs:label "X3DShaderNode field activate is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :X3DShaderNode ;
  rdfs:range :SFBool .
:isSelected a owl:DatatypeProperty ;
  rdfs:label "X3DShaderNode field isSelected is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DShaderNode ;
  rdfs:range :SFBool .
:isValid a owl:DatatypeProperty ;
  rdfs:label "X3DShaderNode field isValid is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DShaderNode ;
  rdfs:range :SFBool .
:language a owl:DatatypeProperty ;
  rdfs:label "X3DShaderNode field language is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DShaderNode , :ComposedShader , :PackagedShader , :ProgramShader ;
  rdfs:range :shaderLanguageValues .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DShapeNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "Base type for all Shape nodes." .
:appearance a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field appearance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :X3DAppearanceNode ;
  rdfs:subPropertyOf :hasChild .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field bboxCenter is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field bboxDisplay is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field bboxSize is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:castShadow a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field castShadow is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :SFBool ;
  :castShadowDefault xsd:true .
:geometry a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field geometry is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DShapeNode , :Shape ;
  rdfs:range :X3DGeometryNode ;
  rdfs:subPropertyOf :hasChild .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DShapeNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DShapeNode , :ParticleSystem , :Shape ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSingleTextureCoordinateNode a owl:Class ;
  rdfs:subClassOf :X3DTextureCoordinateNode ;
  rdfs:label "Base type for all texture coordinate nodes which specify texture coordinates for a single texture." .
:mapping a owl:DatatypeProperty ;
  rdfs:label "X3DSingleTextureCoordinateNode field mapping is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSingleTextureCoordinateNode , :TextureCoordinate , :TextureCoordinate3D , :TextureCoordinate4D , :TextureCoordinateGenerator ;
  rdfs:range xsd:NMTOKEN .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSingleTextureNode a owl:Class ;
  rdfs:subClassOf :X3DTextureNode ;
  rdfs:label "Base type for all texture node types that define a single texture. A single texture can be used to influence a parameter of various material nodes in the Shape component, and it can be a child of MultiTexture." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSingleTextureTransformNode a owl:Class ;
  rdfs:subClassOf :X3DTextureTransformNode ;
  rdfs:label "Base type for all texture transform nodes which specify texture coordinate transformation for a single texture." .
:mapping a owl:DatatypeProperty ;
  rdfs:label "X3DSingleTextureTransformNode field mapping is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSingleTextureTransformNode ;
  rdfs:range xsd:NMTOKEN .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSoundChannelNode a owl:Class ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "Base type for all sound destination nodes, which represent the final destination of an audio signal and are what the user can ultimately hear." .
:channelCount a owl:DatatypeProperty ;
  rdfs:label "X3DSoundChannelNode field channelCount is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DSoundChannelNode ;
  rdfs:range :SFInt32 .
:channelCountMode a owl:DatatypeProperty ;
  rdfs:label "X3DSoundChannelNode field channelCountMode is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundChannelNode , :ChannelMerger , :ChannelSelector , :ChannelSplitter ;
  rdfs:range :channelCountModeChoices ;
  :channelCountModeDefault "max" .
:channelInterpretation a owl:DatatypeProperty ;
  rdfs:label "X3DSoundChannelNode field channelInterpretation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundChannelNode , :ChannelMerger , :ChannelSelector , :ChannelSplitter ;
  rdfs:range :channelInterpretationChoices ;
  :channelInterpretationDefault "speakers" .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
:gain a owl:DatatypeProperty ;
  rdfs:label "X3DSoundChannelNode field gain is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundChannelNode , :ChannelMerger , :ChannelSelector , :ChannelSplitter ;
  rdfs:range :SFFloat ;
  :gainDefault 1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSoundDestinationNode a owl:Class ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "Base type for all sound destination nodes, which represent the final destination of an audio signal and are what the user can ultimately hear." .
:channelCount a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field channelCount is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DSoundDestinationNode ;
  rdfs:range :SFInt32 .
:channelCountMode a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field channelCountMode is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundDestinationNode , :AudioDestination , :StreamAudioDestination ;
  rdfs:range :channelCountModeChoices ;
  :channelCountModeDefault "max" .
:channelInterpretation a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field channelInterpretation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundDestinationNode , :AudioDestination , :StreamAudioDestination ;
  rdfs:range :channelInterpretationChoices ;
  :channelInterpretationDefault "speakers" .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
:gain a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field gain is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundDestinationNode , :AudioDestination , :StreamAudioDestination ;
  rdfs:range :SFFloat ;
  :gainDefault 1 .
:isActive a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field isActive is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DSoundDestinationNode ;
  rdfs:range :SFBool .
:mediaDeviceID a owl:DatatypeProperty ;
  rdfs:label "X3DSoundDestinationNode field mediaDeviceID is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundDestinationNode , :AudioDestination , :StreamAudioDestination ;
  rdfs:range :SFString .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSoundNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type for all sound nodes." .
:description a owl:DatatypeProperty ;
  rdfs:label "X3DSoundNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :AudioDestination , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :PeriodicWave , :Sound , :SpatialSound , :StreamAudioDestination ;
  rdfs:range :SFString .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DSoundNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundNode , :X3DSoundChannelNode , :X3DSoundDestinationNode , :AudioDestination , :ChannelMerger , :ChannelSelector , :ChannelSplitter , :PeriodicWave , :Sound , :SpatialSound , :StreamAudioDestination ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSoundProcessingNode a owl:Class ;
  rdfs:subClassOf :X3DTimeDependentNode ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "Base type for all sound processing nodes, which are used to enhance audio with filtering, delaying, changing gain, etc." .
:channelCount a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field channelCount is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DSoundProcessingNode ;
  rdfs:range :SFInt32 .
:channelCountMode a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field channelCountMode is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundProcessingNode , :Analyser , :BiquadFilter , :Convolver , :Delay , :DynamicsCompressor , :Gain , :WaveShaper ;
  rdfs:range :channelCountModeChoices ;
  :channelCountModeDefault "max" .
:channelInterpretation a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field channelInterpretation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundProcessingNode , :Analyser , :BiquadFilter , :Convolver , :Delay , :DynamicsCompressor , :Gain , :WaveShaper ;
  rdfs:range :channelInterpretationChoices ;
  :channelInterpretationDefault "speakers" .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundProcessingNode , :Analyser , :BiquadFilter , :Convolver , :Delay , :DynamicsCompressor , :Gain , :WaveShaper ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
:gain a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field gain is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundProcessingNode , :Analyser , :BiquadFilter , :Convolver , :Delay , :DynamicsCompressor , :Gain , :WaveShaper ;
  rdfs:range :SFFloat ;
  :gainDefault 1 .
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:tailTime a owl:DatatypeProperty ;
  rdfs:label "X3DSoundProcessingNode field tailTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundProcessingNode , :Analyser , :BiquadFilter , :Convolver , :Delay , :DynamicsCompressor , :Gain , :WaveShaper ;
  rdfs:range :SFTime ;
  :tailTimeDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DSoundSourceNode a owl:Class ;
  rdfs:subClassOf :X3DTimeDependentNode ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "Nodes implementing X3DSoundSourceNode provide signal inputs to the audio graph." .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DSoundSourceNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundSourceNode , :AudioClip , :BufferAudioSource , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
:gain a owl:DatatypeProperty ;
  rdfs:label "X3DSoundSourceNode field gain is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DSoundSourceNode , :AudioClip , :BufferAudioSource , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource ;
  rdfs:range :SFFloat ;
  :gainDefault 1 .
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DStatement a owl:Class ;
  rdfs:label "X3DStatement is a marker interface that identifies statements relating to nonrenderable scene graph structure. X3DStatement does not extend from any other node type since it is not an explicit part of the X3D node interface hierarchy, and DEF/USE is not appropriate for such statements." .
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTexture2DNode a owl:Class ;
  rdfs:subClassOf :X3DSingleTextureNode ;
  rdfs:label "Base type for all nodes which specify 2D sources for texture images." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:repeatS a owl:DatatypeProperty ;
  rdfs:label "X3DTexture2DNode field repeatS is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture2DNode , :ImageTexture , :MovieTexture , :PixelTexture ;
  rdfs:range :SFBool ;
  :repeatSDefault xsd:true .
:repeatT a owl:DatatypeProperty ;
  rdfs:label "X3DTexture2DNode field repeatT is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture2DNode , :ImageTexture , :MovieTexture , :PixelTexture ;
  rdfs:range :SFBool ;
  :repeatTDefault xsd:true .
:textureProperties a owl:DatatypeProperty ;
  rdfs:label "X3DTexture2DNode field textureProperties is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture2DNode , :ImageTexture , :PixelTexture ;
  rdfs:range :TextureProperties ;
  rdfs:subPropertyOf :hasChild .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTexture3DNode a owl:Class ;
  rdfs:subClassOf :X3DTextureNode ;
  rdfs:label "Base type for all nodes that specify 3D sources for texture images." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:repeatR a owl:DatatypeProperty ;
  rdfs:label "X3DTexture3DNode field repeatR is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture3DNode , :ComposedTexture3D , :ImageTexture3D , :PixelTexture3D ;
  rdfs:range :SFBool ;
  :repeatRDefault xsd:false .
:repeatS a owl:DatatypeProperty ;
  rdfs:label "X3DTexture3DNode field repeatS is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture3DNode , :ComposedTexture3D , :ImageTexture3D , :PixelTexture3D ;
  rdfs:range :SFBool ;
  :repeatSDefault xsd:false .
:repeatT a owl:DatatypeProperty ;
  rdfs:label "X3DTexture3DNode field repeatT is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture3DNode , :ComposedTexture3D , :ImageTexture3D , :PixelTexture3D ;
  rdfs:range :SFBool ;
  :repeatTDefault xsd:false .
:textureProperties a owl:DatatypeProperty ;
  rdfs:label "X3DTexture3DNode field textureProperties is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DTexture3DNode , :ComposedTexture3D , :ImageTexture3D , :PixelTexture3D ;
  rdfs:range :TextureProperties ;
  rdfs:subPropertyOf :hasChild .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTextureCoordinateNode a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "Base type for all nodes which specify texture coordinates." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTextureNode a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "Base type for all nodes which specify sources for texture images." .
:description a owl:DatatypeProperty ;
  rdfs:label "X3DTextureNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureNode , :X3DEnvironmentTextureNode , :X3DSingleTextureNode , :X3DTexture2DNode , :X3DTexture3DNode , :ComposedCubeMapTexture , :ComposedTexture3D , :GeneratedCubeMapTexture , :ImageCubeMapTexture , :ImageTexture , :ImageTexture3D , :MultiTexture , :PixelTexture , :PixelTexture3D ;
  rdfs:range :SFString .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTextureProjectorNode a owl:Class ;
  rdfs:subClassOf :X3DLightNode ;
  rdfs:label "Base type for all node types that specify texture projector nodes, which provide a form of lighting." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
:aspectRatio a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field aspectRatio is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DTextureProjectorNode ;
  rdfs:range :SFFloat .
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
:description a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFString .
:direction a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field direction is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFVec3f ;
  :directionDefault ( 0 0 1 ) .
:farDistance a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field farDistance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFFloat ;
  :farDistanceDefault -1 .
:global a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field global is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFBool ;
  :globalDefault xsd:true .
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
:location a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field location is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFVec3f ;
  :locationDefault ( 0 0 0 ) .
:nearDistance a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field nearDistance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :SFFloat ;
  :nearDistanceDefault -1 .
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
:texture a owl:DatatypeProperty ;
  rdfs:label "X3DTextureProjectorNode field texture is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTextureProjectorNode , :TextureProjector , :TextureProjectorParallel ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTextureTransformNode a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "Base type for all nodes which specify a transformation of texture coordinates." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTimeDependentNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type from which all time-dependent nodes are derived." .
:description a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTimeDependentNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :Analyser , :AudioClip , :BiquadFilter , :BufferAudioSource , :Convolver , :Delay , :DynamicsCompressor , :Gain , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource , :TimeSensor , :WaveShaper ;
  rdfs:range :SFString .
:elapsedTime a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field elapsedTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DTimeDependentNode ;
  rdfs:range :SFTime .
:isActive a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field isActive is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DTimeDependentNode ;
  rdfs:range :SFBool .
:isPaused a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field isPaused is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DTimeDependentNode ;
  rdfs:range :SFBool .
:pauseTime a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field pauseTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTimeDependentNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :Analyser , :AudioClip , :BiquadFilter , :BufferAudioSource , :Convolver , :Delay , :DynamicsCompressor , :Gain , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource , :TimeSensor , :WaveShaper ;
  rdfs:range :SFTime ;
  :pauseTimeDefault 0 .
:resumeTime a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field resumeTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTimeDependentNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :Analyser , :AudioClip , :BiquadFilter , :BufferAudioSource , :Convolver , :Delay , :DynamicsCompressor , :Gain , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource , :TimeSensor , :WaveShaper ;
  rdfs:range :SFTime ;
  :resumeTimeDefault 0 .
:startTime a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field startTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTimeDependentNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :Analyser , :AudioClip , :BiquadFilter , :BufferAudioSource , :Convolver , :Delay , :DynamicsCompressor , :Gain , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource , :TimeSensor , :WaveShaper ;
  rdfs:range :SFTime ;
  :startTimeDefault 0 .
:stopTime a owl:DatatypeProperty ;
  rdfs:label "X3DTimeDependentNode field stopTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DTimeDependentNode , :X3DSoundProcessingNode , :X3DSoundSourceNode , :Analyser , :AudioClip , :BiquadFilter , :BufferAudioSource , :Convolver , :Delay , :DynamicsCompressor , :Gain , :ListenerPointSource , :MicrophoneSource , :MovieTexture , :OscillatorSource , :StreamAudioSource , :TimeSensor , :WaveShaper ;
  rdfs:range :SFTime ;
  :stopTimeDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTouchSensorNode a owl:Class ;
  rdfs:subClassOf :X3DPointingDeviceSensorNode ;
  rdfs:label "Base type for all touch-style pointing device sensors." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
:touchTime a owl:DatatypeProperty ;
  rdfs:label "X3DTouchSensorNode field touchTime is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :X3DTouchSensorNode ;
  rdfs:range :SFTime .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DTriggerNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "Base type from which all trigger nodes are derived." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DVertexAttributeNode a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "Base type for all nodes that specify per-vertex attribute information to the shader." .
:name a owl:DatatypeProperty ;
  rdfs:label "X3DVertexAttributeNode field name is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DVertexAttributeNode , :FloatVertexAttribute , :Matrix3VertexAttribute , :Matrix4VertexAttribute ;
  rdfs:range xsd:NMTOKEN .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DViewpointNode a owl:Class ;
  rdfs:subClassOf :X3DBindableNode ;
  rdfs:label "Node type X3DViewpointNode defines a specific location in the local coordinate system from which the user may view the scene, and also defines a viewpoint binding stack." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:description a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field description is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFString .
:farDistance a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field farDistance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFFloat ;
  :farDistanceDefault -1 .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
:jump a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field jump is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFBool ;
  :jumpDefault xsd:true .
:navigationInfo a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field navigationInfo is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :NavigationInfo ;
  rdfs:subPropertyOf :hasChild .
:nearDistance a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field nearDistance is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFFloat ;
  :nearDistanceDefault -1 .
:orientation a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field orientation is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFRotation ;
  :orientationDefault ( 0 0 1 0 ) .
:retainUserOffsets a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field retainUserOffsets is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFBool ;
  :retainUserOffsetsDefault xsd:false .
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
:viewAll a owl:DatatypeProperty ;
  rdfs:label "X3DViewpointNode field viewAll is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DViewpointNode , :GeoViewpoint , :OrthoViewpoint , :Viewpoint ;
  rdfs:range :SFBool ;
  :viewAllDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DViewportNode a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "The X3DViewportNode abstract node type is the base node type for viewport nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DVolumeDataNode a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "The X3DVolumeDataNode abstract node type is the base type for all node types that describe volumetric data to be rendered." .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeDataNode field bboxCenter is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DVolumeDataNode , :IsoSurfaceVolumeData , :SegmentedVolumeData , :VolumeData ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeDataNode field bboxDisplay is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DVolumeDataNode , :IsoSurfaceVolumeData , :SegmentedVolumeData , :VolumeData ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeDataNode field bboxSize is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DVolumeDataNode , :IsoSurfaceVolumeData , :SegmentedVolumeData , :VolumeData ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:dimensions a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeDataNode field dimensions is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DVolumeDataNode , :IsoSurfaceVolumeData , :SegmentedVolumeData , :VolumeData ;
  rdfs:range :SFVec3f ;
  :dimensionsDefault ( 1 1 1 ) .
:visible a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeDataNode field visible is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DVolumeDataNode , :IsoSurfaceVolumeData , :SegmentedVolumeData , :VolumeData ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DVolumeRenderStyleNode a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "The X3DVolumeRenderStyleNode abstract node type is the base type for all node types that specify a specific visual rendering style to be used when rendering volume data." .
:enabled a owl:DatatypeProperty ;
  rdfs:label "X3DVolumeRenderStyleNode field enabled is implemented by multiple nodes." ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DVolumeRenderStyleNode , :X3DComposableVolumeRenderStyleNode , :BlendedVolumeStyle , :BoundaryEnhancementVolumeStyle , :CartoonVolumeStyle , :ComposedVolumeStyle , :EdgeEnhancementVolumeStyle , :OpacityMapVolumeStyle , :ProjectionVolumeStyle , :ShadedVolumeStyle , :SilhouetteEnhancementVolumeStyle , :ToneMappedVolumeStyle ;
  rdfs:range :SFBool ;
  :enabledDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

###############################################

# AbstractObjectTypes

:X3DBoundedObject a owl:Class ;
  rdfs:label "X3DBoundedObject indicates that bounding box values can be provided (or computed) to encompass this node and any children." .
:bboxCenter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DBoundedObject ;
  rdfs:range :SFVec3f ;
  :bboxCenterDefault ( 0 0 0 ) .
:bboxDisplay a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBoundedObject ;
  rdfs:range :SFBool ;
  :bboxDisplayDefault xsd:false .
:bboxSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :X3DBoundedObject ;
  rdfs:range :SFVec3f ;
  :bboxSizeDefault ( -1 -1 -1 ) .
:visible a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DBoundedObject ;
  rdfs:range :SFBool ;
  :visibleDefault xsd:true .

:X3DFogObject a owl:Class ;
  rdfs:label "Abstract type describing a node that influences the lighting equation through the use of fog semantics." .
:color a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DFogObject ;
  rdfs:range :SFColor ;
  :colorDefault ( 1 1 1 ) .
:fogType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DFogObject ;
  rdfs:range :fogTypeChoices ;
  :fogTypeDefault "LINEAR" .
:visibilityRange a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DFogObject ;
  rdfs:range :SFFloat ;
  :visibilityRangeDefault 0 .

:X3DMetadataObject a owl:Class ;
  rdfs:label "Each node inheriting the X3DMetadataObject interface contains a single array of strictly typed values: MFBool, MFInt32, MFFloat, MFDouble, MFString, or MFNode, the latter having children that are all Metadata nodes." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DMetadataObject ;
  rdfs:range :SFString .
:reference a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DMetadataObject ;
  rdfs:range :SFString .

:X3DPickableObject a owl:Class ;
  rdfs:label "The X3DPickableObject abstract interface marks a node as being capable of having customized picking performed on its contents or children." .
:pickable a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DPickableObject ;
  rdfs:range :SFBool ;
  :pickableDefault xsd:true .

:X3DProgrammableShaderObject a owl:Class ;
  rdfs:label "Base type for all nodes that specify arbitrary fields for interfacing with per-object attribute values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:X3DUrlObject a owl:Class ;
  rdfs:label "X3DUrlObject indicates that a node has content loaded from a Uniform Resource Locator (URL) and can be tracked via a LoadSensor. Such child nodes have containerField='children' to indicate their relationship to the parent LoadSensor node." .
:autoRefresh a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DUrlObject ;
  rdfs:range :SFTime ;
  :autoRefreshDefault 0 .
:autoRefreshTimeLimit a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DUrlObject ;
  rdfs:range :SFTime ;
  :autoRefreshTimeLimitDefault 3600 .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DUrlObject ;
  rdfs:range :SFString .
:load a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DUrlObject ;
  rdfs:range :SFBool ;
  :loadDefault xsd:true .
:url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3DUrlObject ;
  rdfs:range :MFString .

###############################################

# Statements

:X3DStatement a owl:Class ;
  rdfs:label "X3DStatement is the abstract type from which all non-node statements are derived." ;
  dcterms:reference   "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD1/Part01/concepts.html" ;
  dcterms:reference   "https://www.web3d.org/specifications/X3Dv4Draft/ISO-IEC19775-1v4-CD1/Part01/components/core.html#AbstractX3DStructure" .
#:class :id and :style connected via X3D definitions

:component a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: each added component statement indicates needed scene functionality support above the given X3D profile." .
:level a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :component ;
  rdfs:range :SFInt32 ;
  rdfs:label "Necessary level of support for this scene, as defined in corresponding Support table for a given node's component." ;
  :levelDefault 1 .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :component ;
  rdfs:range :componentNameChoices ;
  rdfs:label "Provides name of this component, as defined in corresponding X3D Specification component Introduction." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:connect a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: connect statements define event-routing connections between node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields." .
:nodeField a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :connect ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Name of field within this node which IS CONNECTed to the ancestor ProtoDeclare field definition." .
:protoField a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :connect ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Name of parent ProtoDeclare field definition connecting to field in this node." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:EXPORT a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: EXPORT exposes a local node for ROUTE passing of event values when the current Scene is included via Inline by a parent external world. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model." .
:AS a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EXPORT ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "rename localDEF node AS a different name when exporting." .
:localDEF a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EXPORT ;
  rdfs:range xsd:IDREF ;
  rdfs:label "localDEF is the DEF name of the local node to be EXPORTed." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:ExternProtoDeclare a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "ExternProtoDeclare refers to a ProtoDeclare node declaration provided in another file. ExternProtoDeclare interfaces are defined by field statements (and without IS/connect statements)." .
:appinfo a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExternProtoDeclare ;
  rdfs:range :SFString ;
  rdfs:label "Application information to provide simple description usable as a tooltip, similar to XML Schema appinfo tag." .
:documentation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExternProtoDeclare ;
  rdfs:range :SFString ;
  rdfs:label "Documentation url for further information, similar to XML Schema documentation tag." .
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExternProtoDeclare ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in the corresponding original ProtoDeclare." .
:fieldFieldHasParentExternProtoDeclare a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentExternProtoDeclare .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExternProtoDeclare ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "name of the ExternProtoDeclare (External Prototype Declaration) being referenced." .
:url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExternProtoDeclare ;
  rdfs:range :MFString ;
  rdfs:label "Location and filename of ProtoDeclare source declaration of interest." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:field a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: a field statement defines an interface attribute or node. Each field statement can contain either attribute-value or node content." .
:accessType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :accessTypeChoices ;
  rdfs:label "Event-model semantics for field set/get capabilities." .
:appinfo a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :SFString ;
  rdfs:label "Application information to provide simple description usable as a tooltip, similar to XML Schema appinfo tag." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :X3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "If this field definition has type SFNode or MFNode, then initialization node (or nodes) of any appropriate type may be provided as children of the field definition." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentfield .
:documentation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :SFString ;
  rdfs:label "Documentation url for further information, similar to XML Schema documentation tag." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Name of this field declaration." .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :fieldTypeChoices ;
  rdfs:label "Base type of this field variable." .
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :field ;
  rdfs:range :SFString ;
  rdfs:label "Provide default initialization value for this field variable (which may be re-initialized later by instantiation value of a named ProtoInstance fieldValue)." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:fieldValue a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: a fieldValue statement re-initializes the default value of a field in a ProtoInstance. Each fieldValue statement can contain either attribute-value or node content." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :fieldValue ;
  rdfs:range :X3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "If this field definition has type SFNode or MFNode, then initialization node (or nodes) of any appropriate type may be provided as children of the field definition." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentfieldValue .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :fieldValue ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Name of the ProtoInstance field being re-initialized (corresponding to field name already defined in ProtoDeclare or ExternProtoDeclare)." .
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :fieldValue ;
  rdfs:range :SFString ;
  rdfs:label "Initial value for this field, which overrides default initialization value defined in original ProtoDeclare field." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:head a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: each X3D scene includes a head statement that can contain component, unit and meta statements." .
:hasComponent a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :head ;
  rdfs:range :component ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Add component statements to indicate necessary scene functionality above the given profile for this X3D model." .
:fieldComponentHasParenthead a owl:ObjectProperty ;
  owl:inverseOf :hasComponent ;
  rdfs:subPropertyOf :hasParenthead .
:hasMeta a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :head ;
  rdfs:range :meta ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Add meta statements to provide metadata information about this X3D model." .
:fieldMetaHasParenthead a owl:ObjectProperty ;
  owl:inverseOf :hasMeta ;
  rdfs:subPropertyOf :hasParenthead .
:hasUnit a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :head ;
  rdfs:range :unit ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Add unit statements to define data-conversion factors for typed values defined within a scene." .
:fieldUnitHasParenthead a owl:ObjectProperty ;
  owl:inverseOf :hasUnit ;
  rdfs:subPropertyOf :hasParenthead .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:IMPORT a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: IMPORT provides ROUTE access to a node that has a corresponding EXPORT statement within an Inline scene. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model." .
:AS a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IMPORT ;
  rdfs:range xsd:ID ;
  rdfs:label "map importedDEF name AS a new name in current scene." .
:importedDEF a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IMPORT ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "importedDEF is DEF name of the node of interest that is contained in the remote inlineDEF scene." .
:inlineDEF a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IMPORT ;
  rdfs:range xsd:IDREF ;
  rdfs:label "inlineDEF is the DEF name of Inline node in the same scene as this IMPORT statement." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:IS a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: the IS statement connects node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields. IS/connect statements can be added if the parent node is within a ProtoBody and connect statements define correspondences between prototype fields and built-in node fields." .
:hasConnect a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IS ;
  rdfs:range :connect ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When inside a ProtoBody declaration and an IS statement, add a connect statement to define event-routing connections between a parent node's field to a corresponding ProtoInterface field." .
:fieldConnectHasParentIS a owl:ObjectProperty ;
  owl:inverseOf :hasConnect ;
  rdfs:subPropertyOf :hasParentIS .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:meta a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: the meta statement provides metadata information about a scene, where name and content attributes provide attribute=value metadata pairs." .
:content a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :SFString ;
  rdfs:label "The content attribute provides metadata information relevant to the name attribute provided." .
:dir a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :metaDirectionChoices ;
  rdfs:label "Direction for weak/neutral text (ltr=left-to-right, rtl=right-to-left)." .
:http-equiv a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :SFString ;
  rdfs:label "The http-equiv attribute provides an HTTP header for the value of the content attribute." .
:lang a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :SFString ;
  rdfs:label "Language code, as per [IETF BCP47/RFC5646]." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :metaNameValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "Keyword name of the meta attribute, following the same naming conventions as HTML's meta tag." .
:scheme a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :meta ;
  rdfs:range :SFString ;
  rdfs:label "The scheme attribute allows authors to provide user agents more context for the correct interpretation of meta information." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:ProtoBody a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "ProtoBody contains the definition nodes for new Prototype nodes." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoBody ;
  rdfs:range :X3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "ProtoBody can contain nodes, statements and comments." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentProtoBody .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:ProtoDeclare a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "ProtoDeclare defines new Prototype nodes. Nested ProtoDeclares and ProtoInstances are allowed by the specification." .
:appinfo a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoDeclare ;
  rdfs:range :SFString ;
  rdfs:label "Application information to provide simple description usable as a tooltip, similar to XML Schema appinfo tag." .
:documentation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoDeclare ;
  rdfs:range :SFString ;
  rdfs:label "Documentation url for further information, similar to XML Schema documentation tag." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoDeclare ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "name of this prototype being declared." .
:hasProtoBody a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoDeclare ;
  rdfs:range :ProtoBody ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include one ProtoBody statement after the ProtoInterface statement." .
:fieldProtoBodyHasParentProtoDeclare a owl:ObjectProperty ;
  owl:inverseOf :hasProtoBody ;
  rdfs:subPropertyOf :hasParentProtoDeclare .
:hasProtoInterface a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoDeclare ;
  rdfs:range :ProtoInterface ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include an optional ProtoInterface statement if this ProtoDeclare has field declarations." .
:fieldProtoInterfaceHasParentProtoDeclare a owl:ObjectProperty ;
  owl:inverseOf :hasProtoInterface ;
  rdfs:subPropertyOf :hasParentProtoDeclare .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:ProtoInterface a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "ProtoInterface defines fields for new Prototype nodes." .
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoInterface ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in this ProtoDeclare's ProtoInterface." .
:fieldFieldHasParentProtoInterface a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentProtoInterface .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:ROUTE a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "ROUTE connects output fields of event-producing nodes to input fields of event-consuming nodes." .
:fromField a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ROUTE ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "fromField is the field name in the source node which is originating an event." .
:fromNode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ROUTE ;
  rdfs:range xsd:IDREF ;
  rdfs:label "fromNode is the DEF name of the node originating an event." .
:toField a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ROUTE ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "toField is the field name in the destination node which is receiving an event." .
:toNode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ROUTE ;
  rdfs:range xsd:IDREF ;
  rdfs:label "toNode is the DEF name of the destination node receiving an event." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:Scene a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Scene is the implicit root node of the X3D scene graph." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Scene ;
  rdfs:range  [ owl:unionOf (:X3DChildNode :X3DMetadataObject :LayerSet) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Scene can contain nodes, statements and comments." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentScene .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:unit a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "Functional summary: unit statement defines data-conversion factors for typed values defined in a scene." .
:category a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :unit ;
  rdfs:range :unitCategoryChoices ;
  rdfs:label "Base-unit category as defined in X3D Specification." .
:conversionFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :unit ;
  rdfs:range :SFDouble ;
  rdfs:label "Positive double-precision factor that converts new base unit to default base unit." ;
  :conversionFactorDefault 1.0 .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :unit ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Author-defined name for this unit conversionFactor value (for example, FeetToMeters)." .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

:X3D a owl:Class ;
  rdfs:subClassOf :X3DStatement ;
  rdfs:label "X3D is the root node for an Extensible 3D (X3D) Graphics model." .
:hasHead a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3D ;
  rdfs:range :head ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a head element to contain component, unit or meta statements for this X3D model." .
:fieldHeadHasParentX3D a owl:ObjectProperty ;
  owl:inverseOf :hasHead ;
  rdfs:subPropertyOf :hasParentX3D .
:profile a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3D ;
  rdfs:range :profileNameChoices ;
  rdfs:label "profile attribute is required and defines the player or tool support needed for this model." ;
  :profileDefault "Full" .
:hasScene a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3D ;
  rdfs:range :Scene ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a Scene element to contain scene-graph nodes for this X3D model." .
:fieldSceneHasParentX3D a owl:ObjectProperty ;
  owl:inverseOf :hasScene ;
  rdfs:subPropertyOf :hasParentX3D .
:version a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :X3D ;
  rdfs:range :x3dVersionChoices ;
  rdfs:label "Default is highest value matching schema and DOCTYPE in the scene." ;
  :versionDefault "4.0" .
# :class inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DStatement with accessType=inputOutput, type=SFString

###############################################

# ConcreteNodes

:AcousticProperties a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "AcousticProperties specifies the interaction of sound waves with characteristics of geometric objects in the scene." .
:absorption a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "specifies the sound absorption coefficient of a surface, meaning the ratio of sound intensity not reflected by a surface." ;
  :absorptionDefault 0 .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of the url asset." .
:diffuse a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "diffuse coefficient of sound reflection indicates how much of the incident sound energy is reflected back in multiple directions." ;
  :diffuseDefault 0 .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:refraction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "sound refraction coefficient of a medium, which determines change in propagation direction of sound wave when obliquely crossing boundary between two mediums where its speed is different." ;
  :refractionDefault 0 .
:specular a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AcousticProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "specular coefficient of sound reflection striking a plane surface, directly reflected back into space, where angle of reflection equals angle of incidence." ;
  :specularDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Analyser a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "Analyser provides real-time frequency and time-domain analysis information, without any change to the input." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentAnalyser .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
:fftSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range :SFInt32 ;
  rdfs:label "fftSize represents size of Fast Fourier Transform (FFT) used to determine frequency domain." ;
  :fftSizeDefault 2048 .
:frequencyBinCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range :SFInt32 ;
  rdfs:label "frequencyBinCount is half of fftSize and generally equates to number of data values available for the visualization." ;
  :frequencyBinCountDefault 1024 .
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:maxDecibels a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range :SFFloat ;
  rdfs:label "maxDecibels represents maximum power value in scaling range for FFT analysis data." ;
  :maxDecibelsDefault -30 .
:minDecibels a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range :SFFloat ;
  rdfs:label "minDecibels represents minimum power value in scaling range for FFT analysis data." ;
  :minDecibelsDefault -100 .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:smoothingTimeConstant a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Analyser ;
  rdfs:range :SFFloat ;
  rdfs:label "smoothingTimeConstant represents averaging constant during last analysis frame." ;
  :smoothingTimeConstantDefault 0.8 .
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Anchor a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "Anchor is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:parameter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Anchor ;
  rdfs:range :MFString ;
  rdfs:label "If provided, parameter tells the X3D player where to to redirect the loaded url." .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Appearance a owl:Class ;
  rdfs:subClassOf :X3DAppearanceNode ;
  rdfs:label "Appearance specifies the visual properties of geometry by containing the Material, ImageTexture/MovieTexture/PixelTexture, FillProperties, LineProperties, programmable shader nodes (ComposedShader, PackagedShader, ProgramShader) and TextureTransform nodes." .
:hasAcousticProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :AcousticProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained acousticProperties node that can specify additional acoustic attributes applied to associated surface geometry." .
:fieldAcousticPropertiesHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasAcousticProperties ;
  rdfs:subPropertyOf :hasParentAppearance .
:alphaCutoff a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :SFFloat ;
  rdfs:label "Threshold value used for pixel rendering either transparent or opaque, used when alphaMode='MASK'." ;
  :alphaCutoffDefault 0.5 .
:alphaMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :alphaModeChoices ;
  rdfs:label "Provides options for control of alpha transparency handling for textures." ;
  :alphaModeDefault "AUTO" .
:hasFillProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :FillProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FillProperties node that can specify additional visual attributes applied to polygonal areas of corresponding geometry, on top of whatever other appearance is already defined." .
:fieldFillPropertiesHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasFillProperties ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasLineProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :LineProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained LineProperties node that can specify additional visual attributes applied to corresponding line geometry." .
:fieldLinePropertiesHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasLineProperties ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasMaterial a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :X3DMaterialNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Material node that can specify visual attributes for lighting response (color types, transparency, etc." .
:fieldMaterialHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasMaterial ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasPointProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :PointProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained PointProperties node that can specify additional visual attributes applied to corresponding point geometry." .
:fieldPointPropertiesHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasPointProperties ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasShaders a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :X3DShaderNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Zero or more contained programmable shader nodes (ComposedShader, PackagedShader, ProgramShader) that specify, in order of preference, author-programmed rendering characteristics." .
:fieldShadersHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasShaders ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :X3DTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained texture node (ImageTexture, MovieTexture, PixelTexture, MultiTexture) that maps image(s) to surface geometry." .
:fieldTextureHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasTexture ;
  rdfs:subPropertyOf :hasParentAppearance .
:hasTextureTransform a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Appearance ;
  rdfs:range :X3DTextureTransformNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureTransform node that defines 2D transformation applied to texture coordinates." .
:fieldTextureTransformHasParentAppearance a owl:ObjectProperty ;
  owl:inverseOf :hasTextureTransform ;
  rdfs:subPropertyOf :hasParentAppearance .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Arc2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Arc2D is a line-based geometry node that defines a linear circular arc with center (0,0) in X-Y plane, with angles measured starting at positive x-axis and sweeping towards positive y-axis." .
:endAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Arc2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Arc extends from startAngle counterclockwise to endAngle, in radians." ;
  :endAngleDefault 1.570796 .
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Arc2D ;
  rdfs:range :SFFloat ;
  rdfs:label "circle radius, of which the arc is a portion." ;
  :radiusDefault 1 .
:startAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Arc2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Arc extends from startAngle counterclockwise to endAngle, in radians." ;
  :startAngleDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ArcClose2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "ArcClose2D is a polygonal geometry node that defines a linear circular arc, closed by PIE or CHORD line segments, with center (0,0) in X-Y plane, with angles measured starting at positive x-axis and sweeping towards positive y-axis." .
:closureType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ArcClose2D ;
  rdfs:range :closureTypeChoices ;
  rdfs:label "Defines whether pair of line segments connect to center (PIE), or single line-segment chord connects arc endpoints (CHORD)." ;
  :closureTypeDefault "PIE" .
:endAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ArcClose2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Arc extends from startAngle counterclockwise to endAngle, in radians." ;
  :endAngleDefault 1.570796 .
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ArcClose2D ;
  rdfs:range :SFFloat ;
  rdfs:label "circle radius, of which the arc is a portion." ;
  :radiusDefault 1 .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ArcClose2D ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:false .
:startAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ArcClose2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Arc extends from startAngle counterclockwise to endAngle, in radians." ;
  :startAngleDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:AudioClip a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "AudioClip provides audio data used by parent Sound nodes." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:duration_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :AudioClip ;
  rdfs:range :SFTime ;
  rdfs:label "or -1." .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:loop a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AudioClip ;
  rdfs:range :SFBool ;
  rdfs:label "Repeat indefinitely when loop=true, repeat only once when loop=false." ;
  :loopDefault xsd:false .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:pitch a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AudioClip ;
  rdfs:range :SFFloat ;
  rdfs:label "Multiplier for the rate at which sampled sound is played." ;
  :pitchDefault 1.0 .
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:AudioDestination a owl:Class ;
  rdfs:subClassOf :X3DSoundDestinationNode ;
  rdfs:label "AudioDestination node represents the final audio destination and is what user ultimately hears, typically from the speakers of user device." .
# :channelCount inheritedFrom=X3DSoundDestinationNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AudioDestination ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentAudioDestination .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DSoundDestinationNode with accessType=outputOnly, type=SFBool
:maxChannelCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :AudioDestination ;
  rdfs:range :SFInt32 ;
  rdfs:label "[maxChannelCount." ;
  :maxChannelCountDefault 2 .
# :mediaDeviceID inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Background a owl:Class ;
  rdfs:subClassOf :X3DBackgroundNode ;
  rdfs:label "Background simulates ground and sky, using vertical arrays of wraparound color values." .
:backUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:bottomUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
:frontUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
# :groundAngle inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFFloat
# :groundColor inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFColor
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
:leftUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
:rightUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
# :skyAngle inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFFloat
# :skyColor inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFColor, default=0 0 0
:topUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Background ;
  rdfs:range :MFString ;
  rdfs:label "Image background panorama between ground/sky backdrop and scene's geometry." .
# :transparency inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=SFFloat, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BallJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "BallJoint represents an unconstrained joint between two bodies that pivot about a common anchor point." .
:anchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BallJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "anchorPoint is joint center, specified in world coordinates." ;
  :anchorPointDefault ( 0 0 0 ) .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body1AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BallJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "body1AnchorPoint describes anchorPoint position relative to local coordinate reference frame." .
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body2AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BallJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "body2AnchorPoint describes anchorPoint position relative to local coordinate reference frame." .
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Billboard a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "Billboard is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:axisOfRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Billboard ;
  rdfs:range :SFVec3f ;
  rdfs:label "axisOfRotation direction is relative to local coordinate system." ;
  :axisOfRotationDefault ( 0 1 0 ) .
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BiquadFilter a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "BiquadFilter node is an AudioNode processor implementing common low-order filters." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BiquadFilter ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentBiquadFilter .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:detune a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BiquadFilter ;
  rdfs:range :SFFloat ;
  rdfs:label "The detune field forms a compound field together with playbackRate that together determine a computedPlaybackRate value." ;
  :detuneDefault 0 .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
:frequency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BiquadFilter ;
  rdfs:range :SFFloat ;
  rdfs:label "frequency at which the BiquadFilterNode operates, in Hz." ;
  :frequencyDefault 350 .
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:qualityFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BiquadFilter ;
  rdfs:range :SFFloat ;
  rdfs:label "qualityFactor is Quality Factor (Q) of the respective filter algorithm." ;
  :qualityFactorDefault 1 .
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BiquadFilter ;
  rdfs:range :biquadTypeFilterChoices ;
  rdfs:label "type selects which BiquadFilter algorithm is used." ;
  :typeDefault "lowpass" .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BlendedVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "BlendedVolumeStyle combines rendering of two voxel data sets into one by blending voxel values." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:hasRenderStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :X3DComposableVolumeRenderStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DComposableVolumeRenderStyleNode node that defines specific rendering technique for data in the voxels field, and the result is blended with parent VolumeData or SegmentedVoliumeData node." .
:fieldRenderStyleHasParentBlendedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasRenderStyle ;
  rdfs:subPropertyOf :hasParentBlendedVolumeStyle .
:hasVoxels a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) that provides second set of raw voxel information utilized by corresponding rendering styles." .
:fieldVoxelsHasParentBlendedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasVoxels ;
  rdfs:subPropertyOf :hasParentBlendedVolumeStyle .
:weightConstant1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "weightConstant1 is used when weightFunction1=CONSTANT." ;
  :weightConstant1Default 0.5 .
:weightConstant2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "weightConstant2 is used when weightFunction2=CONSTANT." ;
  :weightConstant2Default 0.5 .
:weightFunction1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :volumeRenderingWeightFunctionChoices ;
  rdfs:label "specifies 2D textures used to determine weight values when weight function is set to TABLE." ;
  :weightFunction1Default "CONSTANT" .
:weightFunction2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :volumeRenderingWeightFunctionChoices ;
  rdfs:label "specifies 2D textures used to determine weight values when weight function is set to TABLE." ;
  :weightFunction2Default "CONSTANT" .
:hasWeightTransferFunction1 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The weightTransferFunction1 and weightTransferFunction2 fields specify two-dimensional textures that are used to determine the weight values when the weight function is set to 'TABLE'." .
:fieldWeightTransferFunction1HasParentBlendedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasWeightTransferFunction1 ;
  rdfs:subPropertyOf :hasParentBlendedVolumeStyle .
:hasWeightTransferFunction2 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BlendedVolumeStyle ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The weightTransferFunction1 and weightTransferFunction2 fields specify two-dimensional textures that are used to determine the weight values when the weight function is set to 'TABLE'." .
:fieldWeightTransferFunction2HasParentBlendedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasWeightTransferFunction2 ;
  rdfs:subPropertyOf :hasParentBlendedVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BooleanFilter a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "BooleanFilter selectively passes true, false or negated events." .
:inputFalse a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BooleanFilter ;
  rdfs:range :SFBool ;
  rdfs:label "inputFalse only passes a false value, which occurs when set_boolean is false." .
:inputNegate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BooleanFilter ;
  rdfs:range :SFBool ;
  rdfs:label "inputNegate is an output event that provides an opposite value by negating set_boolean input." .
:inputTrue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BooleanFilter ;
  rdfs:range :SFBool ;
  rdfs:label "inputTrue only passes a true value, which occurs when set_boolean input is true." .
:set_boolean a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :BooleanFilter ;
  rdfs:range :SFBool ;
  rdfs:label "set_boolean is the input value to be filtered." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BooleanSequencer a owl:Class ;
  rdfs:subClassOf :X3DSequencerNode ;
  rdfs:label "BooleanSequencer generates periodic discrete Boolean values." .
# :key inheritedFrom=X3DSequencerNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BooleanSequencer ;
  rdfs:range :MFBool ;
  rdfs:label "Output values for linear sequencing, each corresponding to an input-fraction value in the key array." .
# :next inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFBool
# :previous inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFBool
# :set_fraction inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BooleanSequencer ;
  rdfs:range :SFBool ;
  rdfs:label "Single intermittent output value determined by current key time and corresponding keyValue entry." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BooleanToggle a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "BooleanToggle maintains state and negates output when a true input is provided." .
:set_boolean a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :BooleanToggle ;
  rdfs:range :SFBool ;
  rdfs:label "If input event set_boolean is true, flip state by negating current value of the toggle field Hint: for logical consistency, input event set_boolean false has no effect (under review as part of Mantis issue 519)." .
:toggle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BooleanToggle ;
  rdfs:range :SFBool ;
  rdfs:label "Persistent state value that gets toggled or reset." ;
  :toggleDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BooleanTrigger a owl:Class ;
  rdfs:subClassOf :X3DTriggerNode ;
  rdfs:label "BooleanTrigger converts time events to boolean true events." .
:set_triggerTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :BooleanTrigger ;
  rdfs:range :SFTime ;
  rdfs:label "set_triggerTime provides input time event, typical event sent is TouchSensor touchTime." .
:triggerTrue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BooleanTrigger ;
  rdfs:range :SFBool ;
  rdfs:label "triggerTrue outputs a true value whenever a triggerTime event is received." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BoundaryEnhancementVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "BoundaryEnhancementVolumeStyle provides boundary enhancement for the volume rendering style." .
:boundaryOpacity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BoundaryEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "boundaryOpacity k_gs is the factored amount of the gradient enhancement to use." ;
  :boundaryOpacityDefault 0.9 .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:opacityFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BoundaryEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "opacityFactor k_ge is the power function to control the slope of the opacity curve to highlight the set of data." ;
  :opacityFactorDefault 2 .
:retainedOpacity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BoundaryEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "retainedOpacity k_gc is the amount of initial opacity to mix into the output." ;
  :retainedOpacityDefault 0.2 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BoundedPhysicsModel a owl:Class ;
  rdfs:subClassOf :X3DParticlePhysicsModelNode ;
  rdfs:label "BoundedPhysicsModel provides user-defined geometrical boundaries for particle motion." .
# :enabled inheritedFrom=X3DParticlePhysicsModelNode with accessType=inputOutput, type=SFBool, default=true
:hasGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BoundedPhysicsModel ;
  rdfs:range :X3DGeometryNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained geometry node provides the geometry used for each particle when the parent ParticleSystem node has geometryType=GEOMETRY." .
:fieldGeometryHasParentBoundedPhysicsModel a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry ;
  rdfs:subPropertyOf :hasParentBoundedPhysicsModel .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Box a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Box is a geometry node specifying a rectangular cuboid." .
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Box ;
  rdfs:range :SFVec3f ;
  rdfs:label "size x y z in meters." ;
  :sizeDefault ( 2 2 2 ) .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Box ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:BufferAudioSource a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "BufferAudioSource node represents a memory-resident audio asset that can contain one or more channels." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
:buffer a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :MFFloat ;
  rdfs:label "buffer is a memory-resident audio asset that can contain one or more channels." .
:bufferDuration a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFTime ;
  rdfs:label "bufferDuration is duration in seconds to use from buffer field." ;
  :bufferDurationDefault 0 .
:bufferlength a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFInt32 .
:channelCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFInt32 ;
  rdfs:label "channelCount reports number of channels provided by input nodes." .
:channelCountMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :channelCountModeChoices ;
  rdfs:label "channelCountMode determines how individual channels are counted when up-mixing and down-mixing connections to any inputs." ;
  :channelCountModeDefault "max" .
:channelInterpretation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :channelInterpretationChoices ;
  rdfs:label "channelInterpretation determines how individual channels are treated when up-mixing and down-mixing connections to any inputs." ;
  :channelInterpretationDefault "speakers" .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:detune a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFFloat ;
  rdfs:label "The detune field forms a compound field together with playbackRate that together determine a computedPlaybackRate value." ;
  :detuneDefault 0 .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:length a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFInt32 .
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:loop a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFBool ;
  rdfs:label "Repeat indefinitely when loop=true, repeat only once when loop=false." ;
  :loopDefault xsd:false .
:loopEnd a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFFloat ;
  rdfs:label "loopEnd field is optional playhead position where looping ends if loop=true." ;
  :loopEndDefault 0 .
:loopStart a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFFloat ;
  rdfs:label "loopStart field is optional playhead position where looping begins if loop=true." ;
  :loopStartDefault 0 .
:numberOfChannels a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFInt32 ;
  rdfs:label "numberOfChannels is number of audio channels found in this buffer source." ;
  :numberOfChannelsDefault 0 .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:playbackRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFFloat ;
  rdfs:label "playbackRate field is speed at which to render the audio stream, and forms a compound field together with detune field Hint: negative values play in reverse." ;
  :playbackRateDefault 1 .
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:sampleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :BufferAudioSource ;
  rdfs:range :SFFloat ;
  rdfs:label "sampleRate field is sample-frames per second." ;
  :sampleRateDefault 0 .
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CADAssembly a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:subClassOf :X3DProductStructureChildNode ;
  rdfs:label "CADAssembly holds a set of Computer-Aided Design (CAD) assemblies or parts grouped together." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :name inheritedFrom=X3DProductStructureChildNode with accessType=inputOutput, type=SFString
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CADFace a owl:Class ;
  rdfs:subClassOf :X3DProductStructureChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "CADFace holds geometry representing one face in a Computer-Aided Design (CAD) CADPart." .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :name inheritedFrom=X3DProductStructureChildNode with accessType=inputOutput, type=SFString
:hasShape a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADFace ;
  rdfs:range  [ owl:unionOf (:Shape :LOD :Transform) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Contained Shape for this CADPart." .
:fieldShapeHasParentCADFace a owl:ObjectProperty ;
  owl:inverseOf :hasShape ;
  rdfs:subPropertyOf :hasParentCADFace .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CADLayer a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "CADLayer nodes define a hierarchy that shows layer structure for a Computer-Aided Design (CAD) model." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADLayer ;
  rdfs:range :SFString ;
  rdfs:label "Optional name for this particular CAD node." .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CADPart a owl:Class ;
  rdfs:subClassOf :X3DProductStructureChildNode ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "CADPart is an atomic part that defines both coordinate-system location and the faces that constitute a part in a Computer-Aided Design (CAD) model." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CADPart ;
  rdfs:range :CADFace ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentCADPart a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentCADPart .
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system, applied prior to rotation or scaling." ;
  :centerDefault ( 0 0 0 ) .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :CADFace ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Grouping nodes contain an ordered list of children nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentCADPart .
# :name inheritedFrom=X3DProductStructureChildNode with accessType=inputOutput, type=SFString
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CADPart ;
  rdfs:range :CADFace ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentCADPart a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentCADPart .
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation (axis, angle in radians) of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CADPart ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position (x, y, z in meters) of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CartoonVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "CartoonVolumeStyle generates cartoon-style non-photorealistic rendering of associated volumetric data." .
:colorSteps a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CartoonVolumeStyle ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of distinct colors taken from interpolated colors and used to render the object." ;
  :colorStepsDefault 4 .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:orthogonalColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CartoonVolumeStyle ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "orthogonalColor is used for surface normals that are orthogonal (perpendicular) to viewer's current location." ;
  :orthogonalColorDefault ( 1 1 1 1 ) .
:parallelColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CartoonVolumeStyle ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "parallelColor is used for surface normals that are orthogonal to viewer's current location." ;
  :parallelColorDefault ( 0 0 0 1 ) .
:hasSurfaceNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CartoonVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The surfaceNormals field contains a 3D texture with at least three component values." .
:fieldSurfaceNormalsHasParentCartoonVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasSurfaceNormals ;
  rdfs:subPropertyOf :hasParentCartoonVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ChannelMerger a owl:Class ;
  rdfs:subClassOf :X3DSoundChannelNode ;
  rdfs:label "ChannelMerger unites different input channels into a single output channel." .
# :channelCount inheritedFrom=X3DSoundChannelNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ChannelMerger ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentChannelMerger .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFFloat, default=1
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ChannelSelector a owl:Class ;
  rdfs:subClassOf :X3DSoundChannelNode ;
  rdfs:label "ChannelSelector selects a single channel output from all input channels." .
# :channelCount inheritedFrom=X3DSoundChannelNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:channelSelection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ChannelSelector ;
  rdfs:range :SFInt32 ;
  rdfs:label "channelSelection is single channel of interest from those provided by input nodes." ;
  :channelSelectionDefault 0 .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ChannelSelector ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentChannelSelector .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFFloat, default=1
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ChannelSplitter a owl:Class ;
  rdfs:subClassOf :X3DSoundChannelNode ;
  rdfs:label "ChannelSplitter separates the different channels of a single audio source into a set of monophonic output channels." .
# :channelCount inheritedFrom=X3DSoundChannelNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ChannelSplitter ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node, making up a section of the audio graph." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentChannelSplitter .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundChannelNode with accessType=inputOutput, type=SFFloat, default=1
:hasOutputs a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ChannelSplitter ;
  rdfs:range  [ owl:unionOf (:X3DSoundChannelNode :X3DSoundProcessingNode :X3DSoundSourceNode) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The outputs field is a set of output nodes receiving the split channels, and making up a section of the audio graph." .
:fieldOutputsHasParentChannelSplitter a owl:ObjectProperty ;
  owl:inverseOf :hasOutputs ;
  rdfs:subPropertyOf :hasParentChannelSplitter .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Circle2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Circle2D is a geometry node that defines a linear X-Y circle with center (0,0) in X-Y plane." .
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Circle2D ;
  rdfs:range :SFFloat ;
  rdfs:label "circle radius." ;
  :radiusDefault 1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ClipPlane a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "ClipPlane specifies a single plane equation used to clip (i." .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ClipPlane ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:plane a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ClipPlane ;
  rdfs:range :SFVec4f ;
  rdfs:label "If (a,b,c,d) is the plane, with the first three components being a normalized vector describing the plane's normal direction (and thus the fourth component d being distance from the origin), a point (x,y,z) is visible to the user, with regards to the clipping plane, if a*x+b*y+c*z+d is greater than 0." ;
  :planeDefault ( 0 1 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CollidableOffset a owl:Class ;
  rdfs:subClassOf :X3DNBodyCollidableNode ;
  rdfs:label "CollidableOffset repositions geometry relative to center of owning body." .
# :bboxCenter inheritedFrom=X3DNBodyCollidableNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DNBodyCollidableNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasCollidable a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CollidableOffset ;
  rdfs:range :X3DNBodyCollidableNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The collidable field holds a reference to a single nested item of a collidable scene graph." .
:fieldCollidableHasParentCollidableOffset a owl:ObjectProperty ;
  owl:inverseOf :hasCollidable ;
  rdfs:subPropertyOf :hasParentCollidableOffset .
# :enabled inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=true
# :rotation inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFRotation, default=0 0 1 0
# :translation inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :visible inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CollidableShape a owl:Class ;
  rdfs:subClassOf :X3DNBodyCollidableNode ;
  rdfs:label "CollidableShape connects the collision detection system, the rigid body model, and the renderable scene graph." .
# :bboxCenter inheritedFrom=X3DNBodyCollidableNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DNBodyCollidableNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :enabled inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=true
# :rotation inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFRotation, default=0 0 1 0
:hasShape a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CollidableShape ;
  rdfs:range :Shape ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The shape field provides a geometry proxy for specifying which geometry best represents the collidable object." .
:fieldShapeHasParentCollidableShape a owl:ObjectProperty ;
  owl:inverseOf :hasShape ;
  rdfs:subPropertyOf :hasParentCollidableShape .
# :translation inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :visible inheritedFrom=X3DNBodyCollidableNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Collision a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "Collision detects camera-to-object contact using current view and NavigationInfo avatarSize." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:collideTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :Collision ;
  rdfs:range :SFTime ;
  rdfs:label "Time of collision between camera (avatar) and geometry." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:hasProxy a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Collision ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The proxy node is used as a substitute for Collision children during collision detection, simplifying collision-intersection computations." .
:fieldProxyHasParentCollision a owl:ObjectProperty ;
  owl:inverseOf :hasProxy ;
  rdfs:subPropertyOf :hasParentCollision .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CollisionCollection a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "CollisionCollection holds a collection of objects that can be managed as a single entity for resolution of inter-object collisions." .
:appliedParameters a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :appliedParametersChoices ;
  rdfs:label "Default global parameters for collision outputs of rigid body physics system." ;
  :appliedParametersDefault ( "BOUNCE" ) .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "bounce indicates bounciness (0 = no bounce at all, 1 = maximum bounce)." ;
  :bounceDefault 0 .
:hasCollidables a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range  [ owl:unionOf (:X3DNBodyCollisionSpaceNode :X3DNBodyCollidableNode) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "CollisionCollection node holds a collection of objects in the collidables field that can be managed as a single entity for resolution of inter-object collisions with other groups of collidable objects." .
:fieldCollidablesHasParentCollisionCollection a owl:ObjectProperty ;
  owl:inverseOf :hasCollidables ;
  rdfs:subPropertyOf :hasParentCollisionCollection .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:frictionCoefficients a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFVec2f ;
  rdfs:label "frictionCoefficients used for computing surface drag." ;
  :frictionCoefficientsDefault ( 0 0 ) .
:minBounceSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "minBounceSpeed m/s needed to bounce." ;
  :minBounceSpeedDefault 0.1 .
:slipFactors a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFVec2f ;
  rdfs:label "slipFactors used for computing surface drag." ;
  :slipFactorsDefault ( 0 0 ) .
:softnessConstantForceMix a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "softnessConstantForceMix value applies a constant force value to make colliding surfaces appear to be somewhat soft." ;
  :softnessConstantForceMixDefault 0.0001 .
:softnessErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "softnessErrorCorrection indicates fraction of collision error fixed in a set of evaluations (0 = no error correction, 1 = all errors corrected in single step)." ;
  :softnessErrorCorrectionDefault 0.8 .
:surfaceSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionCollection ;
  rdfs:range :SFVec2f ;
  rdfs:label "surfaceSpeed defines speed vectors for computing surface drag, if contact surfaces move independently of bodies." ;
  :surfaceSpeedDefault ( 0 0 ) .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CollisionSensor a owl:Class ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "CollisionSensor generates collision-detection events." .
:hasCollider a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionSensor ;
  rdfs:range :CollisionCollection ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The collider field specifies a CollisionCollection node that holds a collidables field of nodes and spaces that are to be included in collision-detection computations." .
:fieldColliderHasParentCollisionSensor a owl:ObjectProperty ;
  owl:inverseOf :hasCollider ;
  rdfs:subPropertyOf :hasParentCollisionSensor .
:hasContacts a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CollisionSensor ;
  rdfs:range :Contact ;
  rdfs:subPropertyOf :hasChild .
:fieldContactsHasParentCollisionSensor a owl:ObjectProperty ;
  owl:inverseOf :hasContacts ;
  rdfs:subPropertyOf :hasParentCollisionSensor .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:hasIntersections a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CollisionSensor ;
  rdfs:range :X3DNBodyCollidableNode ;
  rdfs:subPropertyOf :hasChild .
:fieldIntersectionsHasParentCollisionSensor a owl:ObjectProperty ;
  owl:inverseOf :hasIntersections ;
  rdfs:subPropertyOf :hasParentCollisionSensor .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CollisionSpace a owl:Class ;
  rdfs:subClassOf :X3DNBodyCollisionSpaceNode ;
  rdfs:label "CollisionSpace holds collection of objects considered together for resolution of inter-object collisions." .
# :bboxCenter inheritedFrom=X3DNBodyCollisionSpaceNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DNBodyCollisionSpaceNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DNBodyCollisionSpaceNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasCollidables a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionSpace ;
  rdfs:range  [ owl:unionOf (:X3DNBodyCollisionSpaceNode :X3DNBodyCollidableNode) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Collection of collidable objects as well as nested CollisionSpace collections." .
:fieldCollidablesHasParentCollisionSpace a owl:ObjectProperty ;
  owl:inverseOf :hasCollidables ;
  rdfs:subPropertyOf :hasParentCollisionSpace .
# :enabled inheritedFrom=X3DNBodyCollisionSpaceNode with accessType=inputOutput, type=SFBool, default=true
:useGeometry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CollisionSpace ;
  rdfs:range :SFBool ;
  rdfs:label "useGeometry indicates whether collision-detection code checks down to level of geometry, or only make approximations using geometry bounds." ;
  :useGeometryDefault xsd:false .
# :visible inheritedFrom=X3DNBodyCollisionSpaceNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Color a owl:Class ;
  rdfs:subClassOf :X3DColorNode ;
  rdfs:label "Color node defines a set of RGB color values that apply either to a sibling Coordinate|CoordinateDouble node, or else to a parent ElevationGrid node." .
:color a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Color ;
  rdfs:range :MFColor ;
  rdfs:label "The color field defines an array of 3-tuple RGB colors." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ColorChaser a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "ColorChaser generates a series of SFColor values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ColorChaser ;
  rdfs:range :SFColor ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0.8 0.8 0.8 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ColorChaser ;
  rdfs:range :SFColor ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0.8 0.8 0.8 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ColorChaser ;
  rdfs:range :SFColor ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ColorChaser ;
  rdfs:range :SFColor ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ColorChaser ;
  rdfs:range :SFColor ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ColorDamper a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "ColorDamper generates a series of RGB color values that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ColorDamper ;
  rdfs:range :SFColor ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0.8 0.8 0.8 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ColorDamper ;
  rdfs:range :SFColor ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0.8 0.8 0.8 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ColorDamper ;
  rdfs:range :SFColor ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ColorDamper ;
  rdfs:range :SFColor ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ColorDamper ;
  rdfs:range :SFColor ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ColorInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "ColorInterpolator generates a range of color values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ColorInterpolator ;
  rdfs:range :MFColor ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ColorInterpolator ;
  rdfs:range :SFColor ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ColorRGBA a owl:Class ;
  rdfs:subClassOf :X3DColorNode ;
  rdfs:label "ColorRGBA node defines a set of RGBA color values that apply either to a sibling Coordinate|CoordinateDouble node, or else to a parent ElevationGrid node." .
:color a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ColorRGBA ;
  rdfs:range :MFColorRGBA ;
  rdfs:label "The color field defines an array of 4-tuple RGBA colors." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ComposedCubeMapTexture a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentTextureNode ;
  rdfs:label "ComposedCubeMapTexture is a texture node that defines a cubic environment map source as an explicit set of images drawn from individual 2D texture nodes." .
:hasBackTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture, other texture nodes)." .
:fieldBackTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasBackTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasBack a owl:ObjectProperty ;
  owl:equivalentProperty :hasBackTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldBackHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldBackTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasBottomTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture, other texture nodes)." .
:fieldBottomTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasBottomTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasBottom a owl:ObjectProperty ;
  owl:equivalentProperty :hasBottomTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldBottomHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldBottomTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:hasFrontTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture, other texture nodes)." .
:fieldFrontTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasFrontTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasFront a owl:ObjectProperty ;
  owl:equivalentProperty :hasFrontTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldFrontHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldFrontTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasLeftTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture, other texture nodese)." .
:fieldLeftTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasLeftTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasLeft a owl:ObjectProperty ;
  owl:equivalentProperty :hasLeftTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldLeftHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldLeftTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasRightTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture, other texture nodes)." .
:fieldRightTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasRightTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasRight a owl:ObjectProperty ;
  owl:equivalentProperty :hasRightTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldRightHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldRightTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasTopTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedCubeMapTexture ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent ComposedCubeMapTexture element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture, other texture nodes)." .
:fieldTopTextureHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasTopTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
:hasTop a owl:ObjectProperty ;
  owl:equivalentProperty :hasTopTexture ;
  rdfs:subPropertyOf :hasChild .
:fieldTopHasParentComposedCubeMapTexture a owl:ObjectProperty ;
  owl:equivalentProperty :fieldTopTextureHasParentComposedCubeMapTexture ;
  rdfs:subPropertyOf :hasParentComposedCubeMapTexture .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ComposedShader a owl:Class ;
  rdfs:subClassOf :X3DShaderNode ;
  rdfs:subClassOf :X3DProgrammableShaderObject ;
  rdfs:label "ComposedShader can contain field declarations, but no CDATA section of plain-text source code, since programs are composed from child ShaderPart nodes." .
# :activate inheritedFrom=X3DShaderNode with accessType=inputOnly, type=SFBool
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedShader ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in the ComposedShader node." .
:fieldFieldHasParentComposedShader a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentComposedShader .
# :isSelected inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :isValid inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :language inheritedFrom=X3DShaderNode with accessType=initializeOnly, type=SFString, simpleType=shaderLanguageValues, baseType=xsd:NMTOKEN
:hasParts a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedShader ;
  rdfs:range :ShaderPart ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "ComposedShader can contain multiple ShaderPart nodes in the parts field." .
:fieldPartsHasParentComposedShader a owl:ObjectProperty ;
  owl:inverseOf :hasParts ;
  rdfs:subPropertyOf :hasParentComposedShader .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ComposedTexture3D a owl:Class ;
  rdfs:subClassOf :X3DTexture3DNode ;
  rdfs:label "ComposedTexture3D defines a 3D image-based texture map as a collection of 2D texture sources at various depths." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :repeatR inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatS inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatT inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
:hasTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedTexture3D ;
  rdfs:range :X3DTexture2DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "collection of 2D texture sources." .
:fieldTextureHasParentComposedTexture3D a owl:ObjectProperty ;
  owl:inverseOf :hasTexture ;
  rdfs:subPropertyOf :hasParentComposedTexture3D .
# :textureProperties inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ComposedVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "ComposedVolumeStyle allows compositing multiple rendering styles into single rendering pass." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:hasRenderStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ComposedVolumeStyle ;
  rdfs:range :X3DComposableVolumeRenderStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "List of contributing rendering style nodes or node references that can be applied to the object." .
:fieldRenderStyleHasParentComposedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasRenderStyle ;
  rdfs:subPropertyOf :hasParentComposedVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Cone a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Cone is a geometry node." .
:bottom a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cone ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to draw bottom (other inside faces are not drawn)." ;
  :bottomDefault xsd:true .
:bottomRadius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Cone ;
  rdfs:range :SFFloat ;
  rdfs:label "Size in meters." ;
  :bottomRadiusDefault 1 .
:height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Cone ;
  rdfs:range :SFFloat ;
  rdfs:label "Size in meters." ;
  :heightDefault 2 .
:side a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cone ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to draw sides (other inside faces are not drawn)." ;
  :sideDefault xsd:true .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cone ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ConeEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "ConeEmitter generates all available particles from a specific point in space." .
:angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ConeEmitter ;
  rdfs:range :SFFloat ;
  rdfs:label "Cone boundary for random distribution of particles about initial direction." ;
  :angleDefault 0.7854 .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ConeEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial direction from which particles emanate." ;
  :directionDefault ( 0 1 0 ) .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ConeEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Point from which particles emanate." ;
  :positionDefault ( 0 0 0 ) .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Contact a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Contact nodes are produced as output events when two collidable objects or spaces make contact." .
:appliedParameters a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :appliedParametersChoices ;
  rdfs:label "Default global parameters for collision outputs of rigid body physics system." ;
  :appliedParametersDefault ( "BOUNCE" ) .
:hasBody1 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :RigidBody ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The body1 and body2 fields specify two top-level nodes that should be evaluated in the physics model as a single set of interactions with respect to each other." .
:fieldBody1HasParentContact a owl:ObjectProperty ;
  owl:inverseOf :hasBody1 ;
  rdfs:subPropertyOf :hasParentContact .
:hasBody2 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :RigidBody ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The body1 and body2 fields specify two top-level nodes that should be evaluated in the physics model as a single set of interactions with respect to each other." .
:fieldBody2HasParentContact a owl:ObjectProperty ;
  owl:inverseOf :hasBody2 ;
  rdfs:subPropertyOf :hasParentContact .
:bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFFloat ;
  rdfs:label "bounce indicates bounciness (0 = no bounce at all, 1 = maximum bounce)." ;
  :bounceDefault 0 .
:contactNormal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec3f ;
  rdfs:label "contactNormal is unit vector describing normal between two colliding bodies." ;
  :contactNormalDefault ( 0 1 0 ) .
:depth a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFFloat ;
  rdfs:label "depth indicates how deep the current intersection is along normal vector." ;
  :depthDefault 0 .
:frictionCoefficients a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec2f ;
  rdfs:label "frictionCoefficients used for computing surface drag." ;
  :frictionCoefficientsDefault ( 0 0 ) .
:frictionDirection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec3f ;
  rdfs:label "frictionDirection controls friction vector." ;
  :frictionDirectionDefault ( 0 1 0 ) .
:hasGeometry1 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :X3DNBodyCollidableNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The geometry1 and geometry2 fields specify collision-related information about body1 and body2." .
:fieldGeometry1HasParentContact a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry1 ;
  rdfs:subPropertyOf :hasParentContact .
:hasGeometry2 a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :X3DNBodyCollidableNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The geometry1 and geometry2 fields specify collision-related information about body1 and body2." .
:fieldGeometry2HasParentContact a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry2 ;
  rdfs:subPropertyOf :hasParentContact .
:minBounceSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFFloat ;
  rdfs:label "minBounceSpeed m/s needed to bounce." ;
  :minBounceSpeedDefault 0 .
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec3f ;
  rdfs:label "position (x, y, z in meters) of exact location of collision." ;
  :positionDefault ( 0 0 0 ) .
:slipCoefficients a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec2f ;
  rdfs:label "slipCoefficients used for computing surface drag." ;
  :slipCoefficientsDefault ( 0 0 ) .
:softnessConstantForceMix a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFFloat ;
  rdfs:label "softnessConstantForceMix value applies a constant force value to make colliding surfaces appear to be somewhat soft." ;
  :softnessConstantForceMixDefault 0.0001 .
:softnessErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFFloat ;
  rdfs:label "softnessErrorCorrection indicates fraction of collision error fixed in a set of evaluations (0 = no error correction, 1 = all errors corrected in single step)." ;
  :softnessErrorCorrectionDefault 0.8 .
:surfaceSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contact ;
  rdfs:range :SFVec2f ;
  rdfs:label "surfaceSpeed defines speed vectors for computing surface drag, if contact surfaces move independently of bodies." ;
  :surfaceSpeedDefault ( 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Contour2D a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "Contour2D groups a set of curve segments into a composite contour." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Contour2D ;
  rdfs:range  [ owl:unionOf (:NurbsCurve2D :ContourPolyline2D) ] ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentContour2D a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentContour2D .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Contour2D ;
  rdfs:range  [ owl:unionOf (:NurbsCurve2D :ContourPolyline2D) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children form a closed loop with first point of first child repeated as last point of last child, and the last point of a segment repeated as first point of the consecutive one." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentContour2D .
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Contour2D ;
  rdfs:range  [ owl:unionOf (:NurbsCurve2D :ContourPolyline2D) ] ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentContour2D a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentContour2D .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ContourPolyline2D a owl:Class ;
  rdfs:subClassOf :X3DNurbsControlCurveNode ;
  rdfs:label "ContourPolyline2D defines a linear curve segment as part of a trimming contour in the u-v domain of a NURBS surface." .
# :controlPoint inheritedFrom=X3DNurbsControlCurveNode with accessType=inputOutput, type=MFVec2d
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Convolver a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "Convolver performs a linear convolution on a given AudioBuffer, often used to achieve a reverberation effect." .
:buffer a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Convolver ;
  rdfs:range :MFFloat ;
  rdfs:label "buffer is a memory-resident audio asset that can contain one or more channels." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Convolver ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentConvolver .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:normalize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Convolver ;
  rdfs:range :SFBool ;
  rdfs:label "normalize controls whether or not the impulse response from the buffer is scaled by an equal-power normalization when the buffer field is set." ;
  :normalizeDefault xsd:false .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Coordinate a owl:Class ;
  rdfs:subClassOf :X3DCoordinateNode ;
  rdfs:label "Coordinate builds geometry by defining a set of 3D coordinate (triplet) point values." .
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Coordinate ;
  rdfs:range :MFVec3f ;
  rdfs:label "point contains a set of 3D coordinate (triplet) point values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CoordinateChaser a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "CoordinateChaser generates a series of coordinate arrays that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CoordinateChaser ;
  rdfs:range :MFVec3f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CoordinateChaser ;
  rdfs:range :MFVec3f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CoordinateChaser ;
  rdfs:range :MFVec3f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CoordinateChaser ;
  rdfs:range :MFVec3f ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CoordinateChaser ;
  rdfs:range :MFVec3f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CoordinateDamper a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "CoordinateDamper generates a series of coordinate arrays that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CoordinateDamper ;
  rdfs:range :MFVec3f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :CoordinateDamper ;
  rdfs:range :MFVec3f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CoordinateDamper ;
  rdfs:range :MFVec3f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :CoordinateDamper ;
  rdfs:range :MFVec3f ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CoordinateDamper ;
  rdfs:range :MFVec3f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CoordinateDouble a owl:Class ;
  rdfs:subClassOf :X3DCoordinateNode ;
  rdfs:label "CoordinateDouble builds geometry by defining a set of 3D coordinate (triplet) point values." .
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CoordinateDouble ;
  rdfs:range :MFVec3d ;
  rdfs:label "point contains a set of 3D coordinate (triplet) point values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CoordinateInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "CoordinateInterpolator linearly interpolates among a list of 3-tuple MFVec3f arrays, producing a single MFVec3f array that is fractional average between two nearest arrays in the list." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CoordinateInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CoordinateInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CoordinateInterpolator2D a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "CoordinateInterpolator2D generates a series of SFVec2f or MFVec2f 2-tuple float values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CoordinateInterpolator2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CoordinateInterpolator2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Cylinder a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Cylinder is a geometry node." .
:bottom a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to draw bottom (inside faces are never drawn)." ;
  :bottomDefault xsd:true .
:height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFFloat ;
  rdfs:label "Size in meters." ;
  :heightDefault 2 .
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFFloat ;
  rdfs:label "Size in meters." ;
  :radiusDefault 1 .
:side a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to draw sides (inside faces are never drawn)." ;
  :sideDefault xsd:true .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:top a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Cylinder ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to draw top (inside faces are never drawn)." ;
  :topDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:CylinderSensor a owl:Class ;
  rdfs:subClassOf :X3DDragSensorNode ;
  rdfs:label "CylinderSensor converts pointer motion (for example, a mouse or wand) into rotation values using an invisible cylinder aligned with local Y-axis." .
# :autoOffset inheritedFrom=X3DDragSensorNode with accessType=inputOutput, type=SFBool, default=true
:axisRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "axisRotation determines local sensor coordinate system by rotating the local coordinate system." ;
  :axisRotationDefault ( 0 1 0 0 ) .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
:diskAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "Help decide rotation behavior from initial relative bearing of pointer drag: acute angle whether cylinder sides or end-cap disks of virtual-geometry sensor are used for manipulation." ;
  :diskAngleDefault 0.26179167 .
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
:maxAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "clamps rotation_changed events within range of min/max values Hint: if minAngle > maxAngle, rotation is not clamped." ;
  :maxAngleDefault -1 .
:minAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "clamps rotation_changed events within range of min/max values Hint: if minAngle > maxAngle, rotation is not clamped." ;
  :minAngleDefault 0 .
:offset a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "Sends event and remembers last value sensed." ;
  :offsetDefault 0 .
:rotation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :CylinderSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "rotation_changed events equal sum of relative bearing changes plus offset value about Y-axis in local coordinate system." .
# :trackPoint_changed inheritedFrom=X3DDragSensorNode with accessType=outputOnly, type=SFVec3f
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Delay a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "Delay causes a time delay between the arrival of input data and subsequent propagation to the output." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Delay ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentDelay .
:delayTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Delay ;
  rdfs:range :SFTime ;
  rdfs:label "delayTime is duration of delay (in seconds) to apply." ;
  :delayTimeDefault 0 .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:maxDelayTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Delay ;
  rdfs:range :SFTime ;
  rdfs:label "maxDelayTime is duration of maximum amount of delay (in seconds) that can be applied." ;
  :maxDelayTimeDefault 1 .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:DirectionalLight a owl:Class ;
  rdfs:subClassOf :X3DLightNode ;
  rdfs:label "DirectionalLight might not be scoped by parent Group or Transform at levels 1 or 2." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DirectionalLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Orientation vector of light relative to local coordinate system." ;
  :directionDefault ( 0 0 -1 ) .
:global a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DirectionalLight ;
  rdfs:range :SFBool ;
  rdfs:label "Global lights illuminate all objects within their volume of lighting influence." ;
  :globalDefault xsd:false .
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:DISEntityManager a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "DISEntityManager notifies a scene when new DIS ESPDU entities arrive or current entities leave." .
:hasAddedEntities a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :EspduTransform ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "addedEntities array contains any new entities added during the last frame." .
:fieldAddedEntitiesHasParentDISEntityManager a owl:ObjectProperty ;
  owl:inverseOf :hasAddedEntities ;
  rdfs:subPropertyOf :hasParentDISEntityManager .
:address a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :SFString ;
  rdfs:label "Multicast network address, or else 'localhost'." ;
  :addressDefault "localhost" .
:applicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :SFInt32 ;
  rdfs:label "Each simulation application that can respond to simulation management PDUs needs to have a unique applicationID." ;
  :applicationIDDefault 0 .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :DISEntityTypeMapping ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "mapping field provides a mechanism for automatically creating an X3D model when a new entity arrives over the network." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentDISEntityManager .
:hasMapping a owl:ObjectProperty ;
  owl:equivalentProperty :hasChildren ;
  rdfs:subPropertyOf :hasChild .
:fieldMappingHasParent a owl:ObjectProperty ;
  owl:equivalentProperty :fieldChildrenHasParent ;
  rdfs:subPropertyOf :hasParentDISEntityManager .
:port a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :SFInt32 ;
  rdfs:label "Multicast network port, for example: 3000." ;
  :portDefault 0 .
:hasRemovedEntities a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :EspduTransform ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "removedEntities output array provides EspduTransform references to any entities removed during last frame, either due to a timeout or from an explicit RemoveEntityPDU action." .
:fieldRemovedEntitiesHasParentDISEntityManager a owl:ObjectProperty ;
  owl:inverseOf :hasRemovedEntities ;
  rdfs:subPropertyOf :hasParentDISEntityManager .
:siteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DISEntityManager ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :siteIDDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:DISEntityTypeMapping a owl:Class ;
  rdfs:subClassOf :X3DInfoNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "DISEntityTypeMapping provides a best-match mapping from DIS ESPDU entity type information to a specific X3D model, thus providing a visual and behavioral representation that best matches the entity type." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
:category a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for main category that describes the entity, semantics of each code varies according to domain." ;
  :categoryDefault 0 .
:country a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for country to which the design of the entity or its design specification is attributed." ;
  :countryDefault 0 .
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
:domain a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for domain in which the entity operates: LAND, AIR, SURFACE, SUBSURFACE, SPACE or OTHER." ;
  :domainDefault 0 .
:extra a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Any extra information required to describe a particular entity." ;
  :extraDefault 0 .
:kind a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for whether entity is a PLATFORM, MUNITION, LIFE_FORM, ENVIRONMENTAL, CULTURAL_FEATURE, SUPPLY, RADIO, EXPENDABLE, SENSOR_EMITTER or OTHER." ;
  :kindDefault 0 .
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:specific a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Specific information about an entity based on the subcategory field." ;
  :specificDefault 0 .
:subcategory a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :DISEntityTypeMapping ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for particular subcategory to which an entity belongs based on the category field." ;
  :subcategoryDefault 0 .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Disk2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Disk2D is a geometry node that defines a filled (or partially filled) planar circle with center (0,0)." .
:innerRadius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Disk2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Inner circle radius, greater than or equal to 0." ;
  :innerRadiusDefault 0 .
:outerRadius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Disk2D ;
  rdfs:range :SFFloat ;
  rdfs:label "Outer radius of circle, greater than or equal to inner radius." ;
  :outerRadiusDefault 1 .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Disk2D ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:DoubleAxisHingeJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "DoubleAxisHingeJoint has two independent axes located around a common anchor point." .
:anchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "anchorPoint is joint center, specified in world coordinates." ;
  :anchorPointDefault ( 0 0 0 ) .
:axis1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis1 defines axis vector of joint connection to body1." ;
  :axis1Default ( 1 0 0 ) .
:axis2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis2 defines axis vector of joint connection to body2." ;
  :axis2Default ( 0 1 0 ) .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body1AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f .
:body1Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f .
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body2AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f .
:body2Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFVec3f .
:desiredAngularVelocity1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "desiredAngularVelocity1 is goal rotation rate for hinge connection to body1." ;
  :desiredAngularVelocity1Default 0 .
:desiredAngularVelocity2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "desiredAngularVelocity2 is goal rotation rate for hinge connection to body2." ;
  :desiredAngularVelocity2Default 0 .
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
:hinge1Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat .
:hinge1AngleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat .
:hinge2Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat .
:hinge2AngleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat .
:maxAngle1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "maxAngle1 is maximum rotation angle for hinge." ;
  :maxAngle1Default 3.141592653 .
:maxTorque1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "maxTorque1 is maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity1." ;
  :maxTorque1Default 0 .
:maxTorque2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "maxTorque2 is maximum rotational torque applied by corresponding motor axis to achieve desiredAngularVelocity2." ;
  :maxTorque2Default 0 .
:minAngle1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "minAngle1 is minimum rotation angle for hinge." ;
  :minAngle1Default -3.141592653 .
:stop1Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop1BounceDefault 0 .
:stop1ConstantForceMix a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1ConstantForceMix value applies a constant force value to make colliding surfaces appear to be somewhat soft." ;
  :stop1ConstantForceMixDefault 0.001 .
:stop1ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop1ErrorCorrectionDefault 0.8 .
:suspensionErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "suspensionErrorCorrection describes how quickly the system resolves intersection errors due to floating-point inaccuracies." ;
  :suspensionErrorCorrectionDefault 0.8 .
:suspensionForce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DoubleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "suspensionForce describes how quickly the system resolves intersection errors due to floating-point inaccuracies." ;
  :suspensionForceDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:DynamicsCompressor a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "DynamicsCompressor node implements a dynamics compression effect, lowering volume of loudest parts of signal and raising volume of softest parts." .
:attack a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFFloat ;
  rdfs:label "The attack field is the amount of time (in seconds) to reduce the gain by 10dB." ;
  :attackDefault 0.003 .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentDynamicsCompressor .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:knee a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFFloat ;
  rdfs:label "knee field contains a decibel value representing range above threshold where the curve smoothly transitions to compressed portion." ;
  :kneeDefault 30 .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:ratio a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFFloat ;
  rdfs:label "ratio field represents amount of input change, in dB, needed for 1 dB change in output." ;
  :ratioDefault 12 .
:reduction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFFloat ;
  rdfs:label "reduction field provides amount of gain reduction in dB currently applied by compressor to signal." .
:release a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFTime ;
  rdfs:label "release field represents amount of time (in seconds) to increase gain by 10dB." ;
  :releaseDefault 0.25 .
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
:threshold a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :DynamicsCompressor ;
  rdfs:range :SFFloat ;
  rdfs:label "threshold field represents decibel value above which compression starts taking effect." ;
  :thresholdDefault -24 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:EaseInEaseOut a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "EaseInEaseOut enables gradual animation transitions by modifying TimeSensor fraction outputs." .
:easeInEaseOut a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EaseInEaseOut ;
  rdfs:range :MFVec2f ;
  rdfs:label "Array of paired values for easeOut fraction and easeIn fraction within each key interval." .
:key a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EaseInEaseOut ;
  rdfs:range :MFFloat ;
  rdfs:label "Definition values for linear-interpolation function input intervals, listed in non-decreasing order and corresponding to easeInEaseOut array." .
:modifiedFraction_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EaseInEaseOut ;
  rdfs:range :SFFloat ;
  rdfs:label "Interpolated output value determined by current key time, corresponding easeInEaseOut smoothing intervals, and corresponding key pair." .
:set_fraction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EaseInEaseOut ;
  rdfs:range :SFFloat ;
  rdfs:label "set_fraction selects input fraction for computation of corresponding easeInEaseOut output value, modifiedFraction_changed." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:EdgeEnhancementVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "EdgeEnhancementVolumeStyle specifies edge enhancement for the volume rendering style." .
:edgeColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EdgeEnhancementVolumeStyle ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "color used to highlight edges." ;
  :edgeColorDefault ( 0 0 0 1 ) .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:gradientThreshold a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EdgeEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "minimum angle (in radians) away from view-direction vector for surface normal before applying enhancement." ;
  :gradientThresholdDefault 0.4 .
:hasSurfaceNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EdgeEnhancementVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The surfaceNormals field contains a 3D texture with at least three component values." .
:fieldSurfaceNormalsHasParentEdgeEnhancementVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasSurfaceNormals ;
  rdfs:subPropertyOf :hasParentEdgeEnhancementVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ElevationGrid a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "ElevationGrid is a geometry node defining a rectangular height field, with default values for a 1m by 1m square at height 0." .
:hasAttrib a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :X3DVertexAttributeNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FloatVertexAttribute node that can specify list of per-vertex attribute information for programmable shaders." .
:fieldAttribHasParentElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasAttrib ;
  rdfs:subPropertyOf :hasParentElevationGrid .
:ccw a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "ccw defines clockwise/counterclockwise ordering of vertex coordinates, which in turn defines front/back orientation of polygon normals according to Right-Hand Rule (RHR)." ;
  :ccwDefault xsd:true .
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Color or ColorRGBA node that can specify color values applied to corresponding vertices according to colorPerVertex field." .
:fieldColorHasParentElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentElevationGrid .
:colorPerVertex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Whether Color node color values are applied to each point vertex (true) or per quadrilateral (false)." ;
  :colorPerVertexDefault xsd:true .
:creaseAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFFloat ;
  rdfs:label "creaseAngle defines angle (in radians) for determining whether adjacent polygons are drawn with sharp edges or smooth shading." ;
  :creaseAngleDefault 0 .
:hasFogCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :FogCoordinate ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FogCoordinate node that can specify depth parameters for fog in corresponding geometry." .
:fieldFogCoordHasParentElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasFogCoord ;
  rdfs:subPropertyOf :hasParentElevationGrid .
:height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :MFFloat ;
  rdfs:label "Grid array of height vertices with upward direction along +Y axis, with xDimension rows and zDimension columns." ;
  :heightDefault ( 0 0 0 0 ) .
:hasNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Normal node that can specify perpendicular vectors for corresponding vertices to support rendering computations, applied according to the normalPerVertex field." .
:fieldNormalHasParentElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasNormal ;
  rdfs:subPropertyOf :hasParentElevationGrid .
:normalPerVertex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Whether Normal node vector values are applied to each point vertex (true) or per quadrilateral (false)." ;
  :normalPerVertexDefault xsd:true .
:set_height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :MFFloat ;
  rdfs:label "Grid array of height vertices with upward direction along +Y axis, with xDimension rows and zDimension columns." .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:hasTexCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :X3DSingleTextureCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureCoordinate, TextureCoordinateGenerator or MultiTextureCoordinate node that can specify coordinates for texture mapping onto corresponding geometry." .
:fieldTexCoordHasParentElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasTexCoord ;
  rdfs:subPropertyOf :hasParentElevationGrid .
:xDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of elements in the height array along X direction." ;
  :xDimensionDefault 2 .
:xSpacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFFloat ;
  rdfs:label "Meters distance between grid-array vertices along X direction." ;
  :xSpacingDefault 1.0 .
:zDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of elements in the height array along Z direction." ;
  :zDimensionDefault 2 .
:zSpacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ElevationGrid ;
  rdfs:range :SFFloat ;
  rdfs:label "Meters distance between grid-array vertices along Z direction." ;
  :zSpacingDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:EspduTransform a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:subClassOf :X3DNetworkSensorNode ;
  rdfs:label "EspduTransform is a networked Transform node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:address a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFString ;
  rdfs:label "Multicast network address, or else 'localhost'; Example: 224." ;
  :addressDefault "localhost" .
:applicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise applicationID is unique for application at that site." ;
  :applicationIDDefault 0 .
:articulationParameterArray a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFFloat ;
  rdfs:label "Information required for representation of the entity's visual appearance and position of its articulated parts." .
:articulationParameterChangeIndicatorArray a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFInt32 ;
  rdfs:label "Array of change counters, each incremented when an articulated parameter is updated." .
:articulationParameterCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of articulated parameters attached to this entity state PDU." ;
  :articulationParameterCountDefault 0 .
:articulationParameterDesignatorArray a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFInt32 ;
  rdfs:label "Array of designators for each articulated parameter." .
:articulationParameterIdPartAttachedToArray a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFInt32 ;
  rdfs:label "Array of ID parts that each articulated parameter is attached to." .
:articulationParameterTypeArray a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFInt32 ;
  rdfs:label "Array of type enumerations for each articulated parameter element." .
:articulationParameterValue0_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue1_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue2_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue3_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue4_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue5_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue6_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
:articulationParameterValue7_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Get element of user-defined payload array." .
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:collideTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "When were we collided with? Warning: it is an error to define this transient outputOnly field in an X3D file, instead only use it a source for ROUTE events." .
:collisionType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumeration for type of collision: ELASTIC or INELASTIC." ;
  :collisionTypeDefault 0 .
:deadReckoning a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Dead reckoning algorithm being used to project position/orientation with velocities/accelerations." ;
  :deadReckoningDefault 0 .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of the node." .
:detonateTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "When were we detonated?." .
:detonationLocation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "World coordinates for detonationLocation." ;
  :detonationLocationDefault ( 0 0 0 ) .
:detonationRelativeLocation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Relative coordinates for detonation location." ;
  :detonationRelativeLocationDefault ( 0 0 0 ) .
:detonationResult a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumeration for type of detonation and result that occurred." ;
  :detonationResultDefault 0 .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables the sensor node." ;
  :enabledDefault xsd:true .
:entityCategory a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for main category that describes the entity, semantics of each code varies according to domain." ;
  :entityCategoryDefault 0 .
:entityCountry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for country to which the design of the entity or its design specification is attributed." ;
  :entityCountryDefault 0 .
:entityDomain a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for domain in which the entity operates: LAND, AIR, SURFACE, SUBSURFACE, SPACE or OTHER." ;
  :entityDomainDefault 0 .
:entityExtra a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Any extra information required to describe a particular entity." ;
  :entityExtraDefault 0 .
:entityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise entityID is a unique ID for a single entity within that application." ;
  :entityIDDefault 0 .
:entityKind a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for whether entity is a PLATFORM, MUNITION, LIFE_FORM, ENVIRONMENTAL, CULTURAL_FEATURE, SUPPLY, RADIO, EXPENDABLE, SENSOR_EMITTER or OTHER." ;
  :entityKindDefault 0 .
:entitySpecific a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Specific information about an entity based on the Subcategory field." ;
  :entitySpecificDefault 0 .
:entitySubcategory a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for particular subcategory to which an entity belongs based on the category field." ;
  :entitySubcategoryDefault 0 .
:eventApplicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise eventApplicationID is unique for events generated from application at that site." ;
  :eventApplicationIDDefault 0 .
:eventEntityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "For a given event, simulation/exercise entityID is a unique ID for a single entity within that application." ;
  :eventEntityIDDefault 0 .
:eventNumber a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Sequential number of each event issued by an application." ;
  :eventNumberDefault 0 .
:eventSiteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :eventSiteIDDefault 0 .
:fired1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Has the primary weapon (Fire PDU) been fired?." ;
  :fired1Default xsd:false .
:fired2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Has the secondary weapon (Fire PDU) been fired?." ;
  :fired2Default xsd:false .
:firedTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "When did we shoot a weapon (Fire PDU)? Warning: it is an error to define this transient outputOnly field in an X3D file, instead only use it a source for ROUTE events." .
:fireMissionIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "." ;
  :fireMissionIndexDefault 0 .
:firingRange a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Range (three dimension, straight-line distance) that the firing entity's fire control system has assumed for computing the fire control solution if a weapon and if the value is known." ;
  :firingRangeDefault 0 .
:firingRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Rate at which munitions are fired." ;
  :firingRateDefault 0 .
:forceID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "forceID determines the team membership of the issuing entity, and whether FRIENDLY OPPOSING or NEUTRAL or OTHER." ;
  :forceIDDefault 0 .
:fuse a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for type of fuse on the munition." ;
  :fuseDefault 0 .
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic location (specified in current geoSystem coordinates) for children geometry (specified in relative coordinate system, in meters)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:isActive a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Have we received a network update recently? Warning: it is an error to define this transient outputOnly field in an X3D file, instead only use it a source for ROUTE events." .
:isCollided a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Has a matching CollisionPDU reported a collision? Warning: it is an error to define this transient outputOnly field in an X3D file, instead only use it a source for ROUTE events." .
:isDetonated a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Has a matching DetonationPDU reported a detonation? Warning: it is an error to define this transient outputOnly field in an X3D file, instead only use it a source for ROUTE events." .
:isNetworkReader a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='remote' (listen to network as copy of remote entity)." .
:isNetworkWriter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='master' (output to network as master entity at writeInterval)." .
:isRtpHeaderHeard a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Whether incoming DIS packets have an RTP header prepended." .
:isStandAlone a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='local' (ignore network but still respond to local events)." .
:linearAcceleration a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Acceleration of the entity relative to the rotating Earth in either world or entity coordinates, depending on the dead reckoning algorithm used." ;
  :linearAccelerationDefault ( 0 0 0 ) .
:linearVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Velocity of the entity relative to the rotating Earth in either world or entity coordinates, depending on the dead reckoning algorithm used." ;
  :linearVelocityDefault ( 0 0 0 ) .
:marking a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFString ;
  rdfs:label "Maximum of 11 characters for simple entity label." .
:multicastRelayHost a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFString ;
  rdfs:label "Fallback server address if multicast not available locally." .
:multicastRelayPort a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Fallback server port if multicast not available locally." ;
  :multicastRelayPortDefault 0 .
:munitionApplicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "munitionApplicationID, unique for application at that site." ;
  :munitionApplicationIDDefault 0 .
:munitionEndPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Final point of the munition path from firing weapon to detonation or impact, in exercise coordinates." ;
  :munitionEndPointDefault ( 0 0 0 ) .
:munitionEntityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "munitionEntityID is unique ID for entity firing munition within that application." ;
  :munitionEntityIDDefault 0 .
:munitionQuantity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Quantity of munitions fired." ;
  :munitionQuantityDefault 0 .
:munitionSiteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Munition siteID of the participating LAN or organization." ;
  :munitionSiteIDDefault 0 .
:munitionStartPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial point of the munition path from firing weapon to detonation or impact, in exercise coordinates." ;
  :munitionStartPointDefault ( 0 0 0 ) .
:networkMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :networkModeChoices ;
  rdfs:label "Whether this entity is ignoring the network, sending DIS packets to the network, or receiving DIS packets from the network." ;
  :networkModeDefault "standAlone" .
:port a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Network connection port number (EXAMPLE 3000) for sending or receiving DIS messages." ;
  :portDefault 0 .
:readInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between read updates, 0 means no reading." ;
  :readIntervalDefault 0.1 .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation of children relative to local coordinate system, usually read from (or written to) remote, networked EspduTransform nodes." ;
  :rotationDefault ( 0 0 1 0 ) .
:rtpHeaderExpected a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFBool ;
  rdfs:label "Whether RTP headers are prepended to DIS PDUs." ;
  :rtpHeaderExpectedDefault xsd:false .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:set_articulationParameterValue0 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue3 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue4 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue5 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue6 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:set_articulationParameterValue7 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "Set element of user-defined payload array." .
:siteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :siteIDDefault 0 .
:timestamp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "DIS timestamp received from latest PDU update, converted to X3D SFTime units." .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of children relative to local coordinate system, usually read from (or written to) remote, networked EspduTransform nodes." ;
  :translationDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
:warhead a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for type of warhead on the munition." ;
  :warheadDefault 0 .
:writeInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :EspduTransform ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between write updates, 0 means no writing (sending)." ;
  :writeIntervalDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ExplosionEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "ExplosionEmitter generates all particles from a specific point in space at the initial time enabled." .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ExplosionEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Point from which particles emanate." ;
  :positionDefault ( 0 0 0 ) .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Extrusion a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Extrusion is a geometry node that sequentially stretches a 2D cross section along a 3D-spine path in the local coordinate system, creating an outer hull." .
:beginCap a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFBool ;
  rdfs:label "Whether beginning cap is drawn (similar to Cylinder top cap)." ;
  :beginCapDefault xsd:true .
:ccw a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFBool ;
  rdfs:label "The ccw field indicates counterclockwise ordering of vertex-coordinates orientation." ;
  :ccwDefault xsd:true .
:convex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFBool ;
  rdfs:label "The convex field is a hint to renderers whether all polygons in a shape are convex (true), or possibly concave (false)." ;
  :convexDefault xsd:true .
:creaseAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFFloat ;
  rdfs:label "creaseAngle defines angle (in radians) where adjacent polygons are drawn with sharp edges or smooth shading." ;
  :creaseAngleDefault 0 .
:crossSection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec2f ;
  rdfs:label "The crossSection array defines a silhouette outline of the outer Extrusion surface." ;
  :crossSectionDefault ( 1 1 1 -1 -1 -1 -1 1 1 1 ) .
:endCap a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFBool ;
  rdfs:label "Whether end cap is drawn (similar to Cylinder bottom cap)." ;
  :endCapDefault xsd:true .
:orientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFRotation ;
  rdfs:label "The orientation array is a list of axis-angle 4-tuple values applied at each spine-aligned cross-section plane." ;
  :orientationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec2f ;
  rdfs:label "scale is a list of 2D-scale parameters applied at each spine-aligned cross-section plane." ;
  :scaleDefault ( 1 1 ) .
:set_crossSection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec2f ;
  rdfs:label "The crossSection array defines a silhouette outline of the outer Extrusion surface." .
:set_orientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFRotation ;
  rdfs:label "The orientation array is a list of axis-angle 4-tuple values applied at each spine-aligned cross-section plane." .
:set_scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec2f ;
  rdfs:label "scale is a list of 2D-scale parameters applied at each spine-aligned cross-section plane." .
:set_spine a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec3f ;
  rdfs:label "The spine array defines a center-line sequence of 3D points that define a piecewise-linear curve forming a series of connected vertices." .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Extrusion ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:spine a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Extrusion ;
  rdfs:range :MFVec3f ;
  rdfs:label "The spine array defines a center-line sequence of 3D points that define a piecewise-linear curve forming a series of connected vertices." ;
  :spineDefault ( 0 0 0 0 1 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:FillProperties a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "FillProperties indicates whether appearance is filled or hatched for associated geometry nodes inside the same Shape." .
:filled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FillProperties ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not associated geometry is filled." ;
  :filledDefault xsd:true .
:hatchColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FillProperties ;
  rdfs:range :SFColor ;
  rdfs:label "Color of the hatch pattern." ;
  :hatchColorDefault ( 1 1 1 ) .
:hatched a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FillProperties ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not associated geometry is hatched." ;
  :hatchedDefault xsd:true .
:hatchStyle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FillProperties ;
  rdfs:range :hatchStyleValues ; # alternate enumeration values allowed, baseType SFInt32 ;
  rdfs:label "hatchStyle selects a hatch pattern from ISO/IEC 9973 International Register of Graphical Items." ;
  :hatchStyleDefault 1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:FloatVertexAttribute a owl:Class ;
  rdfs:subClassOf :X3DVertexAttributeNode ;
  rdfs:label "FloatVertexAttribute defines a set of per-vertex single-precision floating-point attributes." .
# :name inheritedFrom=X3DVertexAttributeNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:numComponents a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :FloatVertexAttribute ;
  rdfs:range :SFInt32 ;
  rdfs:label "numComponents pecifies how many consecutive floating-point values should be grouped together per vertex." ;
  :numComponentsDefault 4 .
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FloatVertexAttribute ;
  rdfs:range :MFFloat ;
  rdfs:label "value specifies an arbitrary collection of floating-point values that will be passed to the shader as per-vertex information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Fog a owl:Class ;
  rdfs:subClassOf :X3DBindableNode ;
  rdfs:subClassOf :X3DFogObject ;
  rdfs:label "Fog simulates atmospheric effects by blending distant objects with fog color." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
# :color inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFColor, default=1 1 1
# :fogType inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFString, default=LINEAR, simpleType=fogTypeChoices, baseType=xsd:NMTOKEN
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
# :visibilityRange inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFFloat, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:FogCoordinate a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "FogCoordinate defines a set of explicit fog depths on a per-vertex basis, overriding Fog visibilityRange." .
:depth a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FogCoordinate ;
  rdfs:range :MFFloat ;
  rdfs:label "depth contains a set of 3D coordinate (triplet) point values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:FontStyle a owl:Class ;
  rdfs:subClassOf :X3DFontStyleNode ;
  rdfs:label "FontStyle is an X3DFontStyleNode that defines the size, family, justification, and other styles used by Text nodes." .
:family a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :fontFamilyValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "Array of quoted font family names in preference order, browsers use the first supported family." ;
  :familyDefault ( "SERIF" ) .
:horizontal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is horizontal (true) or vertical (false)." ;
  :horizontalDefault xsd:true .
:justify a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :justifyChoices ;
  rdfs:label "The justify field determines horizontal and vertical alignment of text layout, relative to the origin of the object coordinate system." ;
  :justifyDefault ( "BEGIN" ) .
:language a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFString ;
  rdfs:label "Language codes consist of a primary code and a (possibly empty) series of subcodes." .
:leftToRight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is left-to-right (true) or right-to-left (false)." ;
  :leftToRightDefault xsd:true .
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "Nominal height (in local coordinate system) of text glyphs, also sets default spacing between adjacent lines of text." ;
  :sizeDefault 1.0 .
:spacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "Adjustment factor for line spacing between adjacent lines of text." ;
  :spacingDefault 1.0 .
:topToBottom a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is top-to-bottom (true) or bottom-to-top (false)." ;
  :topToBottomDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:styleSelection a owl:DatatypeProperty ; ### renamed to avoid naming collision with CSS style attribute
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :FontStyle ;
  rdfs:range :fontStyleChoices ;
  rdfs:label "Pick one of four values for text style (PLAIN | BOLD | ITALIC | BOLDITALIC). Renamed from original 'style' as 'styleSelection' to avoid name collision with CSS style attribute." ;
  :styleSelectionDefault "PLAIN" .

:ForcePhysicsModel a owl:Class ;
  rdfs:subClassOf :X3DParticlePhysicsModelNode ;
  rdfs:label "ForcePhysicsModel applies a constant force value to the particles." .
# :enabled inheritedFrom=X3DParticlePhysicsModelNode with accessType=inputOutput, type=SFBool, default=true
:force a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ForcePhysicsModel ;
  rdfs:range :SFVec3f ;
  rdfs:label "force field indicates strength and direction of the propelling force on the particles (for example, default is Earth's gravity)." ;
  :forceDefault ( 0 -9.8 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Gain a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "The Gain node amplifies or deamplifies the input signal." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Gain ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentGain .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeneratedCubeMapTexture a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentTextureNode ;
  rdfs:label "GeneratedCubeMapTexture is a texture node that defines a cubic environment map that sources its data from internally generated images." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeneratedCubeMapTexture ;
  rdfs:range :SFInt32 ;
  rdfs:label "size indicates the resolution of the generated images in number of pixels per side." ;
  :sizeDefault 128 .
:hasTextureProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeneratedCubeMapTexture ;
  rdfs:range :TextureProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureProperties node that can specify additional visual attributes applied to corresponding texture images." .
:fieldTexturePropertiesHasParentGeneratedCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasTextureProperties ;
  rdfs:subPropertyOf :hasParentGeneratedCubeMapTexture .
:update a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeneratedCubeMapTexture ;
  rdfs:range :generatedCubeMapTextureUpdateChoices ;
  rdfs:label "update controls regeneration of the texture." ;
  :updateDefault "NONE" .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoCoordinate a owl:Class ;
  rdfs:subClassOf :X3DCoordinateNode ;
  rdfs:label "GeoCoordinate builds geometry as a set of geographic 3D coordinates." .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoCoordinate ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoCoordinate a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoCoordinate .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoCoordinate ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoCoordinate ;
  rdfs:range :MFVec3d ;
  rdfs:label "point contains a set of actual 3D geographic coordinates, provided in geoSystem format can split strings if desired: 'x1 y1 z1 x2 y2 z2' or 'x1 y1 z1', 'x2 y2 z2'." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoElevationGrid a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "GeoElevationGrid is a geometry node defining a rectangular height field, with default values for a 1m by 1m square at height 0." .
:ccw a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "ccw defines clockwise/counterclockwise ordering of vertex coordinates, which in turn defines front/back orientation of polygon normals according to Right-Hand Rule (RHR)." ;
  :ccwDefault xsd:true .
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Color or ColorRGBA node that can specify color values applied to corresponding vertices according to colorPerVertex field." .
:fieldColorHasParentGeoElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentGeoElevationGrid .
:colorPerVertex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Whether Color node color values are applied to each point vertex (true) or per quadrilateral (false)." ;
  :colorPerVertexDefault xsd:true .
:creaseAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFDouble ;
  rdfs:label "creaseAngle defines angle (in radians) for determining whether adjacent polygons are drawn with sharp edges or smooth shading." ;
  :creaseAngleDefault 0 .
:geoGridOrigin a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic coordinate for southwest (lower-left) corner of height dataset." ;
  :geoGridOriginDefault ( 0 0 0 ) .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoElevationGrid .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :MFDouble ;
  rdfs:label "Contains xDimension rows * zDimension columns floating-point values for elevation above ellipsoid." ;
  :heightDefault ( 0 0 0 0 ) .
:hasNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Normal node that can specify perpendicular vectors for corresponding vertices to support rendering computations, applied according to the normalPerVertex field." .
:fieldNormalHasParentGeoElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasNormal ;
  rdfs:subPropertyOf :hasParentGeoElevationGrid .
:normalPerVertex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Whether Normal node vector values are applied to each point vertex (true) or per quadrilateral (false)." ;
  :normalPerVertexDefault xsd:true .
:set_height a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :MFFloat ;
  rdfs:label "Contains xDimension rows * zDimension columns floating-point values for elevation above ellipsoid." .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:hasTexCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :X3DSingleTextureCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureCoordinate, TextureCoordinateGenerator or MultiTextureCoordinate node that can specify coordinates for texture mapping onto corresponding geometry." .
:fieldTexCoordHasParentGeoElevationGrid a owl:ObjectProperty ;
  owl:inverseOf :hasTexCoord ;
  rdfs:subPropertyOf :hasParentGeoElevationGrid .
:xDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of elements in the height array along east-west X direction." ;
  :xDimensionDefault 2 .
:xSpacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFDouble ;
  rdfs:label "Distance between grid-array vertices along east-west X direction." ;
  :xSpacingDefault 1.0 .
:yScale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFFloat ;
  rdfs:label "Vertical exaggeration of displayed data produced from the height array." ;
  :yScaleDefault 1 .
:zDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of elements in the height array along north-south Z direction." ;
  :zDimensionDefault 2 .
:zSpacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoElevationGrid ;
  rdfs:range :SFDouble ;
  rdfs:label "Distance between grid-array vertices along north-south Z direction." ;
  :zSpacingDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoLocation a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "GeoLocation positions a regular X3D model onto earth's surface." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoLocation ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic location (specified in current geoSystem coordinates) for children geometry (specified in relative coordinate system, in meters)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLocation ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoLocation a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoLocation .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLocation ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoLOD a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "Note that MFNode rootNode field can contain multiple nodes and has accessType inputOutput. Meanwhile MFNode children field is outputOnly, unlike other X3DGroupingNode exemplars." .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :SFVec3d ;
  rdfs:label "Viewer range from geographic-coordinates center triggers quadtree loading/unloading." ;
  :centerDefault ( 0 0 0 ) .
:child1Url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "quadtree geometry loaded when viewer is within range." .
:child2Url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "quadtree geometry loaded when viewer is within range." .
:child3Url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "quadtree geometry loaded when viewer is within range." .
:child4Url a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "quadtree geometry loaded when viewer is within range." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The outputOnly children field exposes a portion of the scene graph for the currently loaded set of nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentGeoLOD .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoLOD a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoLOD .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:level_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :SFInt32 ;
  rdfs:label "Output event that reports when the new children outputOnly event is generated, with value 0 or 1, where 0 indicates the rootNode field and 1 indicates the nodes specified by the child1Url, child2Url, child3Url, and child4Url fields." .
:range a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :SFFloat ;
  rdfs:label "Viewer range from geographic-coordinates center triggers quadtree loading/unloading." ;
  :rangeDefault 10 .
:hasRootNode a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Geometry for the root tile." .
:fieldRootNodeHasParentGeoLOD a owl:ObjectProperty ;
  owl:inverseOf :hasRootNode ;
  rdfs:subPropertyOf :hasParentGeoLOD .
:rootUrl a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoLOD ;
  rdfs:range :MFString ;
  rdfs:label "url for scene providing geometry for the root tile." .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoMetadata a owl:Class ;
  rdfs:subClassOf :X3DInfoNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "GeoMetadata includes a generic subset of metadata about the geographic data." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
:hasData a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoMetadata ;
  rdfs:range :X3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "DEF list of all nodes that implement this data." .
:fieldDataHasParentGeoMetadata a owl:ObjectProperty ;
  owl:inverseOf :hasData ;
  rdfs:subPropertyOf :hasParentGeoMetadata .
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:summary a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoMetadata ;
  rdfs:range :MFString ;
  rdfs:label "The summary string array contains a set of keyword/value pairs, with each keyword and its subsequent value contained in separate strings." .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoOrigin a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "GeoOrigin is deprecated and discouraged (but nevertheless allowed) in X3D version 3.3. GeoOrigin is restored in X3D version 4.0 for special use on devices with limited floating-point resolution." .
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoOrigin ;
  rdfs:range :SFVec3d ;
  rdfs:label "Defines absolute geographic location (and implicit local coordinate frame)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoOrigin ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:rotateYUp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoOrigin ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to rotate coordinates of nodes using this GeoOrigin so that local-up direction aligns with VRML Y axis rotateYUp false means local up-direction is relative to planet surface rotateYUp true allows proper operation of NavigationInfo modes FLY, WALK." ;
  :rotateYUpDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoPositionInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "GeoPositionInterpolator animates objects within a geographic coordinate system." .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoPositionInterpolator ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoPositionInterpolator a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoPositionInterpolator .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoPositionInterpolator ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:geovalue_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoPositionInterpolator ;
  rdfs:range :SFVec3d ;
  rdfs:label "interpolated coordinate in the geographic coordinate system specified by geoSystem Hint: X3D for Advanced Modeling (X3D4AM) slideset https://x3dgraphics." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoPositionInterpolator ;
  rdfs:range :MFVec3d ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoPositionInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoProximitySensor a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentalSensorNode ;
  rdfs:label "GeoProximitySensor generates events when the viewer enters, exits and moves within a region of space (defined by a box)." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFVec3d ;
  rdfs:label "Position offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
:centerOfRotation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends changed centerOfRotation values, likely caused by user interaction." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:enterTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera enters the box." .
:exitTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera exits the box." .
:geoCenter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFVec3d ;
  rdfs:label "Position offset from origin of local coordinate system." ;
  :geoCenterDefault ( 0 0 0 ) .
:geoCoord_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFVec3d ;
  rdfs:label "Sends geospatial coordinates of viewer's position corresponding to world position returned by position_changed." .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoProximitySensor a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoProximitySensor .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:orientation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFRotation ;
  rdfs:label "Sends rotation event relative to center." .
:position_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoProximitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends translation event relative to center." .
# :size inheritedFrom=X3DEnvironmentalSensorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoTouchSensor a owl:Class ;
  rdfs:subClassOf :X3DTouchSensorNode ;
  rdfs:label "GeoTouchSensor returns geographic coordinates for the object being selected." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoTouchSensor a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoTouchSensor .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (G D), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:hitGeoCoord_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :SFVec3d ;
  rdfs:label "Output event containing 3D point on surface of underlying geometry, given in GeoTouchSensor's local coordinate system." .
:hitNormal_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Output event containing surface normal vector at the hitGeoCoordinate." .
:hitPoint_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Output event containing 3D point on surface of underlying geometry, given in geometry coordinates (not geographic coordinates)." .
:hitTexCoord_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :GeoTouchSensor ;
  rdfs:range :SFVec2f ;
  rdfs:label "Output event containing texture coordinates of surface at the hitGeoCoordinate." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
# :touchTime inheritedFrom=X3DTouchSensorNode with accessType=outputOnly, type=SFTime
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoTransform a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "GeoTransform is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:geoCenter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoTransform ;
  rdfs:range :SFVec3d ;
  rdfs:label "Translation offset from origin of local coordinate system, applied prior to rotation or scaling." ;
  :geoCenterDefault ( 0 0 0 ) .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoTransform ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoTransform a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoTransform .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoTransform ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoTransform ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation (axis, angle in radians) of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoTransform ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate sys tem before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoTransform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position (x, y, z in meters) of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:GeoViewpoint a owl:Class ;
  rdfs:subClassOf :X3DViewpointNode ;
  rdfs:label "GeoViewpoint specifies viewpoints using geographic coordinates." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:centerOfRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :SFVec3d ;
  rdfs:label "centerOfRotation specifies center point about which to rotate user's eyepoint when in EXAMINE or LOOKAT mode." ;
  :centerOfRotationDefault ( 0 0 0 ) .
# :description inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFString
# :farDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
:fieldOfView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :SFFloat ;
  rdfs:label "Preferred minimum viewing angle from this viewpoint in radians, providing minimum height or minimum width (whichever is smaller)." ;
  :fieldOfViewDefault 0.7854 .
:hasGeoOrigin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :GeoOrigin ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained GeoOrigin node that can specify a local coordinate frame for extended precision." .
:fieldGeoOriginHasParentGeoViewpoint a owl:ObjectProperty ;
  owl:inverseOf :hasGeoOrigin ;
  rdfs:subPropertyOf :hasParentGeoViewpoint .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :jump inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=true
# :navigationInfo inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFNode, default=NULL
# :nearDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
# :orientation inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFRotation, default=0 0 1 0
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :SFVec3d ;
  rdfs:label "position relative to local georeferenced coordinate system, in proper format." ;
  :positionDefault ( 0 0 100000 ) .
# :retainUserOffsets inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
:speedFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :GeoViewpoint ;
  rdfs:range :SFFloat ;
  rdfs:label "speedFactor is a multiplier to modify the original elevation-based speed that is set automatically by the browser." ;
  :speedFactorDefault 1.0 .
# :viewAll inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Group a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "Group is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimDisplacer a owl:Class ;
  rdfs:subClassOf :X3DGeometricPropertyNode ;
  rdfs:label "HAnimDisplacer nodes alter the shape of coordinate-based geometry within parent HAnimJoint or HAnimSegment nodes." .
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :HAnimDisplacer ;
  rdfs:range :MFInt32 ;
  rdfs:label "Defines index values into the parent HAnimSegment or HAnimBody/HAnimHumanoid coordinate array for the mesh of vertices affected by this HAnimDisplacer." .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimDisplacer ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:displacements a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimDisplacer ;
  rdfs:range :MFVec3f ;
  rdfs:label "displacements are a set of SFVec3f values added to neutral/resting position of each of the corresponding HAnimSegment vertices (or HAnimJoint/HAnimHumanoid vertices) referenced by coordIndex field." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimDisplacer ;
  rdfs:range :hanimFeaturePointNameValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "Unique name attribute must be defined so that HAnimDisplacer node can be identified at run time for animation purposes." .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimDisplacer ;
  rdfs:range :SFFloat ;
  rdfs:label "The weigh factor has typical range [0,1] and defines the scale factor applied to displacement values before adding them to neutral vertex positions." ;
  :weightDefault 0.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimHumanoid a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "The HAnimHumanoid node is used to: (a) store references to the joints, segments, sites, skeleton, optional skin, and fixed viewpoints, (b) serve as a container for the entire humanoid, (c) provide a convenient way of moving the humanoid through its environment, and (d) store human-readable metadata such as name, version, author, copyright, age, gender and other information." .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:info a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :MFString ;
  rdfs:label "Contains metadata keyword=value pairs, where approved keyword terms are humanoidVersion authorName authorEmail copyright creationDate usageRestrictions age gender height and weight." .
:jointBindingPositions a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :MFVec3f ;
  rdfs:label "Specifies an array of position values for each HAnimJoint node in the joints field, in order, corresponding to each binding pose." ;
  :jointBindingPositionsDefault ( 0 0 0 ) .
:jointBindingRotations a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :MFRotation ;
  rdfs:label "Specifies an array of rotation values for each HAnimJoint node in the joints field, in order, corresponding to each binding pose." ;
  :jointBindingRotationsDefault ( 0 0 1 0 ) .
:jointBindingScales a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :MFVec3f ;
  rdfs:label "Specifies an array of scale values for each HAnimJoint node in the joints field, in order, corresponding to each binding pose." ;
  :jointBindingScalesDefault ( 0 0 0 ) .
:hasJoints a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :HAnimJoint ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The joints field contains a list of USE references for all HAnimJoint node instances found within the preceding skeleton hierarchy." .
:fieldJointsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasJoints ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:loa a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFInt32 ;
  rdfs:label "Level Of Articulation 0." ;
  :loaDefault -1 .
:hasMotions a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :HAnimMotion ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Contains any HAnimMotion nodes that can animate the HAnimHumanoid." .
:fieldMotionsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasMotions ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "Unique name attribute must be defined so that each HAnimHumanoid node in a scene can be identified at run time for animation purposes." .
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:hasSegments a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :HAnimSegment ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The segments field contains a list of USE references for all HAnimSegment node instances found within the preceding skeleton hierarchy." .
:fieldSegmentsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSegments ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSites a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :HAnimSite ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "sites field contains a list of USE references for all HAnimSite node instances found within the preceding skeleton hierarchy." .
:fieldSitesHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSites ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:skeletalConfiguration a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFString ;
  rdfs:label "Models sharing a common skeletal configuration can share animations and binding poses." ;
  :skeletalConfigurationDefault "BASIC" .
:hasSkeleton a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range  [ owl:unionOf (:HAnimJoint :HAnimSite) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "List of top-level HAnimJoint and HAnimSite nodes that create the skeleton model." .
:fieldSkeletonHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkeleton ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSkin a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range  [ owl:unionOf (:Group :Transform :Shape :IndexedFaceSet) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "List of one or more indexed mesh definitions (such as IndexedFaceSet) that utilize skinCoord point and skinNormal normal data." .
:fieldSkinHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkin ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSkinBindingCoords a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Array of Coordinate nodes to handle non-default source pose so that both skin and skeleton can be in same binding pose." .
:fieldSkinBindingCoordsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkinBindingCoords ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSkinBindingNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Array of Normal nodes to handle non-default source pose so that both skin and skeleton can be in same binding pose." .
:fieldSkinBindingNormalsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkinBindingNormals ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSkinCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Coordinate node utilized by indexed mesh definitions for skin." .
:fieldSkinCoordHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkinCoord ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:hasSkinNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single Normal node utilized by indexed mesh definitions for skin." .
:fieldSkinNormalHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasSkinNormal ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
:version a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :hanimVersionChoices ;
  rdfs:label "HAnimHumanoid version, where allowed value is 2." ;
  :versionDefault "2.0" .
:hasViewpoints a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimHumanoid ;
  rdfs:range :HAnimSite ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "List of HAnimSite nodes containing Viewpoint nodes that appear in the skeleton model, usually as USE node references." .
:fieldViewpointsHasParentHAnimHumanoid a owl:ObjectProperty ;
  owl:inverseOf :hasViewpoints ;
  rdfs:subPropertyOf :hasParentHAnimHumanoid .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimJoint a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "HAnimJoint node can represent each joint in a body." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :HAnimJoint ;
  rdfs:range  [ owl:unionOf (:HAnimJoint :HAnimSegment) ] ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentHAnimJoint a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentHAnimJoint .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range  [ owl:unionOf (:HAnimJoint :HAnimSegment) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Grouping nodes contain an ordered list of children nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentHAnimJoint .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:hasDisplacers a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :HAnimDisplacer ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "the displacers field stores HAnimDisplacer objects for a particular HAnimJoint object." .
:fieldDisplacersHasParentHAnimJoint a owl:ObjectProperty ;
  owl:inverseOf :hasDisplacers ;
  rdfs:subPropertyOf :hasParentHAnimJoint .
:limitOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation of upper/lower rotation limits, relative to HAnimJoint center." ;
  :limitOrientationDefault ( 0 0 1 0 ) .
:llimit a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :MFFloat ;
  rdfs:label "Lower limit for minimum joint rotation in radians." ;
  :llimitDefault ( 0 0 0 ) .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :hanimJointNameValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "Unique name attribute must be defined so that HAnimJoint node can be identified at run time for animation purposes." .
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :HAnimJoint ;
  rdfs:range  [ owl:unionOf (:HAnimJoint :HAnimSegment) ] ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentHAnimJoint a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentHAnimJoint .
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:skinCoordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :MFInt32 ;
  rdfs:label "Coordinate index values referencing which vertices are influenced by the HAnimJoint." .
:skinCoordWeight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :MFFloat ;
  rdfs:label "Weight deformation values for the corresponding values in the skinCoordIndex field." .
:stiffness a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :MFFloat ;
  rdfs:label "A scale factor of (1 - stiffness) is applied around the corresponding axis (X, Y, or Z for entries 0, 1 and 2 of the stiffness field)." ;
  :stiffnessDefault ( 0 0 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
:ulimit a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimJoint ;
  rdfs:range :MFFloat ;
  rdfs:label "Upper limit for maximum joint rotation in radians." ;
  :ulimitDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimMotion a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "An HAnimMotion node supports discrete frame-by-frame playback for H-Anim motion data animation." .
:channels a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :MFString ;
  rdfs:label "list of number of channels for transformation, followed by transformation type of each channel of data." .
:channelsEnabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :MFBool ;
  rdfs:label "boolean values for each channels indicating whether enabled." .
:cycleTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFTime ;
  rdfs:label "cycleTime sends a time event at initial starting time and at beginning of each new cycle." .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:elapsedTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFTime ;
  rdfs:label "elapsedTime is computed elapsed time since the Motion object was activated and running, counting all traversed frames (as if frameIndex equaled 1) and multiplied by frameDuration, cumulative in seconds." .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:false .
:endFrame a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "endFrame indicates final index of animated frame." ;
  :endFrameDefault 0 .
:frameCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "frameCount indicates the number of frames present in the animation, equaling the number of sets of channel data present in the values array." ;
  :frameCountDefault 0 .
:frameDuration a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFTime ;
  rdfs:label "frameDuration specifies the duration of each frame in seconds." ;
  :frameDurationDefault 0.1 .
:frameIncrement a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "frameIncrement field controls whether playback direction is forwards or backwards, and also whether frames are skipped (for example, subsampled replay)." ;
  :frameIncrementDefault 1 .
:frameIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "frameIndex indicates index of current frame." ;
  :frameIndexDefault 0 .
:joints a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :MFString ;
  rdfs:label "joints field lists names of joints that raw motion data is to be applied to." .
:loa a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "Level Of Articulation 0." ;
  :loaDefault -1 .
:loop a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFBool ;
  rdfs:label "Repeat indefinitely when loop=true, repeat only once when loop=false." ;
  :loopDefault xsd:false .
:startFrame a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :SFInt32 ;
  rdfs:label "startFrame indicates initial index of animated frame." ;
  :startFrameDefault 0 .
:values a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimMotion ;
  rdfs:range :MFFloat ;
  rdfs:label "values field contains all transformation values, ordered first by frame, then by joint, and then by transformation Sets of floats in the values array matching the order listed in joints and channels fields." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimSegment a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "HAnimSegment node contains Shape geometry for each body segment." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:centerOfMass a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :SFVec3f ;
  rdfs:label "Location within segment of center of mass." ;
  :centerOfMassDefault ( 0 0 0 ) .
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "the coord field is used for HAnimSegment objects that have deformable meshes and shall contain coordinates referenced from the IndexedFaceSet for the paarent HAnimSegment object." .
:fieldCoordHasParentHAnimSegment a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentHAnimSegment .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:hasDisplacers a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :HAnimDisplacer ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "the displacers field stores HAnimDisplacer objects for a particular HAnimSegment object." .
:fieldDisplacersHasParentHAnimSegment a owl:ObjectProperty ;
  owl:inverseOf :hasDisplacers ;
  rdfs:subPropertyOf :hasParentHAnimSegment .
:mass a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :SFFloat ;
  rdfs:label "Total mass of the segment, 0 if not available, defined in mass base units (default is kilograms)." ;
  :massDefault 0 .
:momentsOfInertia a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :MFFloat ;
  rdfs:label "3x3 moments of inertia matrix." ;
  :momentsOfInertiaDefault ( 0 0 0 0 0 0 0 0 0 ) .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSegment ;
  rdfs:range :hanimSegmentNameValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "Unique name attribute must be defined so that HAnimSegment node can be identified at run time for animation purposes." .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:HAnimSite a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "An HAnimSite node serves three purposes: (a) define an end effector location which can be used by an inverse kinematics system, (b) define an attachment point for accessories such as jewelry and clothing, and (c) define a location for a Viewpoint virtual camera in the reference frame of an HAnimSegment (such as a view through the eyes of the humanoid for use in multi-user worlds)." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFVec3f ;
  rdfs:label "Default location of this HAnimSite, i." ;
  :centerDefault ( 0 0 0 ) .
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of this node." .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :hanimFeaturePointNameValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "Unique name attribute must be defined so that HAnimSite node can be identified at run time for animation purposes." .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :HAnimSite ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ImageCubeMapTexture a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentTextureNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "ImageCubeMapTexture is a texture node that defines a cubic environment map source as a single file format that contains multiple images, one for each side." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:hasTextureProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ImageCubeMapTexture ;
  rdfs:range :TextureProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureProperties node that can specify additional visual attributes applied to corresponding texture images." .
:fieldTexturePropertiesHasParentImageCubeMapTexture a owl:ObjectProperty ;
  owl:inverseOf :hasTextureProperties ;
  rdfs:subPropertyOf :hasParentImageCubeMapTexture .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ImageTexture a owl:Class ;
  rdfs:subClassOf :X3DTexture2DNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "ImageTexture maps a 2D-image file onto a geometric shape." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
# :repeatS inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :repeatT inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :textureProperties inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFNode, default=NULL
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ImageTexture3D a owl:Class ;
  rdfs:subClassOf :X3DTexture3DNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "ImageTexture3D defines a 3D image-based texture map by specifying a single image file that contains complete 3D data." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
# :repeatR inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatS inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatT inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :textureProperties inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFNode, default=NULL
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedFaceSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "IndexedFaceSet defines polygons using index lists corresponding to vertex coordinates." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:colorIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "colorIndex values define the order in which Color|ColorRGBA values are applied to polygons (or vertices)." .
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:convex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :SFBool ;
  rdfs:label "The convex field is a hint to renderers whether all polygons in a shape are convex (true), or possibly concave (false)." ;
  :convexDefault xsd:true .
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices provide the order in which coordinates are applied to construct each polygon face." .
:creaseAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :SFFloat ;
  rdfs:label "creaseAngle defines angle (in radians) for determining whether adjacent polygons are drawn with sharp edges or smooth shading." ;
  :creaseAngleDefault 0 .
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:normalIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "normalIndex values define the order in which normal vectors are applied to polygons (or vertices)." .
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:set_colorIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "colorIndex values define the order in which Color|ColorRGBA values are applied to polygons (or vertices)." .
:set_coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices provide the order in which coordinates are applied to construct each polygon face." .
:set_normalIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "normalIndex values define the order in which normal vectors are applied to polygons (or vertices)." .
:set_texCoordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "List of texture-coordinate indices mapping attached texture to corresponding coordinates." .
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:texCoordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedFaceSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "List of texture-coordinate indices mapping attached texture to corresponding coordinates." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedLineSet a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "IndexedLineSet defines polyline segments using index lists corresponding to vertex coordinates." .
:hasAttrib a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :X3DVertexAttributeNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FloatVertexAttribute node that can specify list of per-vertex attribute information for programmable shaders." .
:fieldAttribHasParentIndexedLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasAttrib ;
  rdfs:subPropertyOf :hasParentIndexedLineSet .
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Color or ColorRGBA node that can specify color values applied to corresponding vertices according to colorIndex and colorPerVertex fields." .
:fieldColorHasParentIndexedLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentIndexedLineSet .
:colorIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "colorIndex values define the order in which Color|ColorRGBA values are applied to polygons (or vertices)." .
:colorPerVertex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :SFBool ;
  rdfs:label "Whether Color node color values are applied to each point vertex (true) or per polyline (false)." ;
  :colorPerVertexDefault xsd:true .
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify a list of vertex values." .
:fieldCoordHasParentIndexedLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentIndexedLineSet .
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices provide the order in which coordinates are applied to construct each polygon face." .
:hasFogCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :FogCoordinate ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FogCoordinate node that can specify depth parameters for fog in corresponding geometry." .
:fieldFogCoordHasParentIndexedLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasFogCoord ;
  rdfs:subPropertyOf :hasParentIndexedLineSet .
:hasNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Normal node that can specify perpendicular vectors for corresponding vertices to support rendering computations, applied according to the normalPerVertex field." .
:fieldNormalHasParentIndexedLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasNormal ;
  rdfs:subPropertyOf :hasParentIndexedLineSet .
:set_colorIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "colorIndex values define the order in which Color|ColorRGBA values are applied to polygons (or vertices)." .
:set_coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedLineSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices provide the order in which coordinates are applied to construct each polyline." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedQuadSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "IndexedQuadSet is a geometry node that defines quadrilaterals." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedQuadSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "index values provide order in which coordinates are applied." .
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:set_index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedQuadSet ;
  rdfs:range :MFInt32 .
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedTriangleFanSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "IndexedTriangleFanSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedTriangleFanSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "index list specifies triangles by connecting Coordinate vertices, each individual fan separated by -1 sentinel value." .
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:set_index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedTriangleFanSet ;
  rdfs:range :MFInt32 .
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedTriangleSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "IndexedTriangleSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedTriangleSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "index list specifies triangles by connecting Coordinate vertices." .
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:set_index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedTriangleSet ;
  rdfs:range :MFInt32 .
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IndexedTriangleStripSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "IndexedTriangleStripSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :IndexedTriangleStripSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "index list specifies triangles by connecting Coordinate vertices for each individual strip, separated by -1 sentinel values." .
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
:set_index a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IndexedTriangleStripSet ;
  rdfs:range :MFInt32 .
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Inline a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "Inline can load another X3D or VRML model into the current scene via url." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
:global a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Inline ;
  rdfs:range :SFBool ;
  rdfs:label "The global field controls potential external scoping effects of lights found within an Inline scene." ;
  :globalDefault xsd:false .
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IntegerSequencer a owl:Class ;
  rdfs:subClassOf :X3DSequencerNode ;
  rdfs:label "IntegerSequencer generates periodic discrete integer values." .
# :key inheritedFrom=X3DSequencerNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IntegerSequencer ;
  rdfs:range :MFInt32 ;
  rdfs:label "Output values for linear sequencing, each corresponding to an input-fraction value in the key array." .
# :next inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFBool
# :previous inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFBool
# :set_fraction inheritedFrom=X3DSequencerNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :IntegerSequencer ;
  rdfs:range :SFInt32 ;
  rdfs:label "Single intermittent output value determined by current key time and corresponding keyValue entry." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IntegerTrigger a owl:Class ;
  rdfs:subClassOf :X3DTriggerNode ;
  rdfs:label "IntegerTrigger converts set_boolean true input events to an integer value (for example, useful when animating whichChoice in a Switch node)." .
:integerKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IntegerTrigger ;
  rdfs:range :SFInt32 ;
  rdfs:label "integerKey is value for output when triggered." ;
  :integerKeyDefault -1 .
:set_boolean a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :IntegerTrigger ;
  rdfs:range :SFBool ;
  rdfs:label "If input event set_boolean is true, trigger output of integer value." .
:triggerValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :IntegerTrigger ;
  rdfs:range :SFInt32 ;
  rdfs:label "triggerValue provides integer event output matching integerKey when true set_boolean received." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:IsoSurfaceVolumeData a owl:Class ;
  rdfs:subClassOf :X3DVolumeDataNode ;
  rdfs:label "IsoSurfaceVolumeData displays one or more surfaces extracted from a voxel dataset." .
# :bboxCenter inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:contourStepSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :SFFloat ;
  rdfs:label "If contourStepSize is non-zero, also render all isosurfaces that are multiples of that step size from initial surface value." ;
  :contourStepSizeDefault 0 .
# :dimensions inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFVec3f, default=1 1 1
:hasGradients a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) that provides explicit per-voxel gradient direction information for determining surface boundaries, rather than having it implicitly calculated by the implementation." .
:fieldGradientsHasParentIsoSurfaceVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasGradients ;
  rdfs:subPropertyOf :hasParentIsoSurfaceVolumeData .
:hasRenderStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :X3DVolumeRenderStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Multiple contained X3DVolumeRenderStyleNode nodes corresponding to each isosurface that define specific rendering technique for this volumetric object." .
:fieldRenderStyleHasParentIsoSurfaceVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasRenderStyle ;
  rdfs:subPropertyOf :hasParentIsoSurfaceVolumeData .
:surfaceTolerance a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :SFFloat ;
  rdfs:label "Threshold for gradient magnitude for voxel inolusion in isosurface." ;
  :surfaceToleranceDefault 0 .
:surfaceValues a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :MFFloat ;
  rdfs:label "If surfaceValues has one value defined, render corresponding isosurface plus any isosurfaces based on contourStepSize." .
# :visible inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=true
:hasVoxels a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :IsoSurfaceVolumeData ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) that provides raw voxel information utilized by corresponding rendering styles." .
:fieldVoxelsHasParentIsoSurfaceVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasVoxels ;
  rdfs:subPropertyOf :hasParentIsoSurfaceVolumeData .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:KeySensor a owl:Class ;
  rdfs:subClassOf :X3DKeyDeviceSensorNode ;
  rdfs:label "KeySensor generates events as the user presses keys on the keyboard." .
:actionKeyPress a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFInt32 ;
  rdfs:label "action key press gives following values: HOME=000 END=1001 PGUP=1002 PGDN=1003 UP=1004 DOWN=1005 LEFT=1006 RIGHT=1007 F1." .
:actionKeyRelease a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFInt32 ;
  rdfs:label "action key release gives following values: HOME=000 END=1001 PGUP=1002 PGDN=1003 UP=1004 DOWN=1005 LEFT=1006 RIGHT=1007 F1." .
:altKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFBool ;
  rdfs:label "altKey generates true event when pressed, false event when released." .
:controlKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFBool ;
  rdfs:label "controlKey generates true event when pressed, false event when released." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:keyPress a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFString ;
  rdfs:label "Events generated when user presses character-producing keys on keyboard produces integer UTF-8 character values." .
:keyRelease a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFString ;
  rdfs:label "Events generated when user releases character-producing keys on keyboard produces integer UTF-8 character values." .
:shiftKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :KeySensor ;
  rdfs:range :SFBool ;
  rdfs:label "shiftKey generates true event when pressed, false event when released." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Layer a owl:Class ;
  rdfs:subClassOf :X3DLayerNode ;
  rdfs:label "Layer contains a list of children nodes that define the contents of the layer." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Layer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentLayer a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentLayer .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Nodes making up this layer." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentLayer .
# :objectType inheritedFrom=X3DLayerNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickable inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFBool, default=true
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :Layer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentLayer a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentLayer .
# :viewport inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFNode, default=NULL
# :visible inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LayerSet a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "LayerSet defines a list of layers and a rendering order." .
:activeLayer a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayerSet ;
  rdfs:range :SFInt32 ;
  rdfs:label "activeLayer field specifies the layer in which navigation takes place." ;
  :activeLayerDefault 0 .
:hasLayers a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayerSet ;
  rdfs:range :X3DLayerNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The layers list defines a list of Layer nodes that contain the constituent parts of the scene." .
:fieldLayersHasParentLayerSet a owl:ObjectProperty ;
  owl:inverseOf :hasLayers ;
  rdfs:subPropertyOf :hasParentLayerSet .
:order a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :LayerSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "The order list defines the order in which layers are rendered." ;
  :orderDefault ( 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Layout a owl:Class ;
  rdfs:subClassOf :X3DLayoutNode ;
  rdfs:label "Layout node is used as layout field of LayoutLayer and LayoutGroup nodes." .
:align a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :layoutAlignChoices ;
  rdfs:label "The align field values align the sized rectangle to an edge or center of the parent rectangle." ;
  :alignDefault ( "CENTER" "CENTER" ) .
:offset a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :MFFloat ;
  rdfs:label "The values of the offset field are used to translate the location of this rectangle after the initial alignment." ;
  :offsetDefault ( 0 0 ) .
:offsetUnits a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :layoutUnitsChoices ;
  rdfs:label "The offsetUnits field values are used to interprete the offset values." ;
  :offsetUnitsDefault ( "WORLD" "WORLD" ) .
:scaleMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :layoutScaleModeChoices ;
  rdfs:label "The scaleMode field specifies how the scale of the parent is modified." ;
  :scaleModeDefault ( "NONE" "NONE" ) .
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :MFFloat ;
  rdfs:label "The two values in the size field define the width and height of the layout rectangle." ;
  :sizeDefault ( 1 1 ) .
:sizeUnits a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Layout ;
  rdfs:range :layoutUnitsChoices ;
  rdfs:label "The sizeUnits field values are used to interprete the offset values." ;
  :sizeUnitsDefault ( "WORLD" "WORLD" ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LayoutGroup a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "LayoutGroup is a Grouping node that can contain most nodes, whose children are related by a common layout within a parent layout." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :LayoutGroup ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentLayoutGroup a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentLayoutGroup .
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayoutGroup ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Grouping nodes contain an ordered list of children nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentLayoutGroup .
:hasLayout a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayoutGroup ;
  rdfs:range :X3DLayoutNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The layout field contains an X3DLayoutNode node that provides the information required to locate and size the layout region of the LayoutGroup node relative to its parent’s layout region, and also to scale the contents of the LayoutGroup." .
:fieldLayoutHasParentLayoutGroup a owl:ObjectProperty ;
  owl:inverseOf :hasLayout ;
  rdfs:subPropertyOf :hasParentLayoutGroup .
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :LayoutGroup ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentLayoutGroup a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentLayoutGroup .
:hasViewport a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayoutGroup ;
  rdfs:range :X3DViewportNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The content of the LayoutGroup is clipped by the specified viewport." .
:fieldViewportHasParentLayoutGroup a owl:ObjectProperty ;
  owl:inverseOf :hasViewport ;
  rdfs:subPropertyOf :hasParentLayoutGroup .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LayoutLayer a owl:Class ;
  rdfs:subClassOf :X3DLayerNode ;
  rdfs:label "LayoutLayer is a Grouping node that can contain most nodes." .
:hasAddChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :LayoutLayer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldAddChildrenHasParentLayoutLayer a owl:ObjectProperty ;
  owl:inverseOf :hasAddChildren ;
  rdfs:subPropertyOf :hasParentLayoutLayer .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayoutLayer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Grouping nodes contain an ordered list of children nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentLayoutLayer .
:hasLayout a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LayoutLayer ;
  rdfs:range :X3DLayoutNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The layout field contains an X3DLayoutNode node that provides the information required to locate and size the layout region of the LayoutGroup node relative to its parent’s layout region, and also to scale the contents of the LayoutGroup." .
:fieldLayoutHasParentLayoutLayer a owl:ObjectProperty ;
  owl:inverseOf :hasLayout ;
  rdfs:subPropertyOf :hasParentLayoutLayer .
# :objectType inheritedFrom=X3DLayerNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickable inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFBool, default=true
:hasRemoveChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :LayoutLayer ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveChildrenHasParentLayoutLayer a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveChildren ;
  rdfs:subPropertyOf :hasParentLayoutLayer .
# :viewport inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFNode, default=NULL
# :visible inheritedFrom=X3DLayerNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LinePickSensor a owl:Class ;
  rdfs:subClassOf :X3DPickSensorNode ;
  rdfs:label "LinePickSensor uses one or more pickingGeometry line segments to compute intersections with pickTarget shapes." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :intersectionType inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=BOUNDS, simpleType=intersectionTypeValues, baseType=xsd:NMTOKEN
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :matchCriterion inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFString, default=MATCH_ANY, simpleType=pickSensorMatchCriterionChoices, baseType=xsd:NMTOKEN
# :objectType inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickedGeometry inheritedFrom=X3DPickSensorNode with accessType=outputOnly, type=MFNode
:pickedNormal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LinePickSensor ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output event containing surface normal vectors computed by the picking intersection computations." .
:pickedPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LinePickSensor ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output event containing 3D points on surface of underlying pickingGeometry computed by the picking intersection computations, given in the local coordinate system." .
:pickedTextureCoordinate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LinePickSensor ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output event containing 3D texture coordinates of surfaces computed by the picking intersection computations." .
# :pickingGeometry inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFNode, default=NULL
# :pickTarget inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFNode
# :sortOrder inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=CLOSEST, simpleType=pickSensorSortOrderValues, baseType=xsd:NMTOKEN
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LineProperties a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "LineProperties allows precise fine-grained control over the rendering style of lines and edges for associated geometry nodes inside the same Shape." .
:applied a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineProperties ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not LineProperties are applied to associated geometry." ;
  :appliedDefault xsd:true .
:linetype a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineProperties ;
  rdfs:range :lineTypeValues ; # alternate enumeration values allowed, baseType SFInt32 ;
  rdfs:label "linetype selects a line pattern, with solid default if defined value isn't supported." ;
  :linetypeDefault 1 .
:linewidthScaleFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "linewidthScaleFactor is a scale factor multiplied by browser-dependent nominal linewidth, mapped to nearest available line width." ;
  :linewidthScaleFactorDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LineSet a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "LineSet is a geometry node that can contain a Coordinate|CoordinateDouble node and optionally a Color|ColorRGBA node." .
:hasAttrib a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :X3DVertexAttributeNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FloatVertexAttribute node that can specify list of per-vertex attribute information for programmable shaders." .
:fieldAttribHasParentLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasAttrib ;
  rdfs:subPropertyOf :hasParentLineSet .
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Color or ColorRGBA node that can specify color values applied to corresponding vertices according to colorIndex and colorPerVertex fields." .
:fieldColorHasParentLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentLineSet .
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify a list of vertex values." .
:fieldCoordHasParentLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentLineSet .
:hasFogCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :FogCoordinate ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FogCoordinate node that can specify depth parameters for fog in corresponding geometry." .
:fieldFogCoordHasParentLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasFogCoord ;
  rdfs:subPropertyOf :hasParentLineSet .
:hasNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Normal node that can specify perpendicular vectors for corresponding vertices to support rendering computations, applied according to the normalPerVertex field." .
:fieldNormalHasParentLineSet a owl:ObjectProperty ;
  owl:inverseOf :hasNormal ;
  rdfs:subPropertyOf :hasParentLineSet .
:vertexCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LineSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "vertexCount describes how many vertices are used in each individual polyline segment from the Coordinate point values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ListenerPointSource a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:label "ListenerPointSource node represents position and orientation of a person listening to virtual sound in the audio scene, and provides single or multiple sound channels as output." .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:dopplerEnabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ListenerPointSource ;
  rdfs:range :SFBool ;
  rdfs:label "dopplerEnabled enables/disables whether real-time Doppler effects (due to relation motion between sources and listeners) are computed by browser between virtual sound sources and active listening locations, then applied to received frequency at active listening locations." ;
  :dopplerEnabledDefault xsd:false .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
:interauralDistance a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ListenerPointSource ;
  rdfs:range :SFFloat ;
  rdfs:label "The interauralDistance field is." ;
  :interauralDistanceDefault 0 .
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:orientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ListenerPointSource ;
  rdfs:range :SFRotation ;
  rdfs:label "Rotation (axis, angle in radians) of listening point direction relative to default -Z axis direction in local coordinate system." ;
  :orientationDefault ( 0 0 1 0 ) .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ListenerPointSource ;
  rdfs:range :SFVec3f ;
  rdfs:label "position (x, y, z in meters) relative to local coordinate system." ;
  :positionDefault ( 0 0 0 ) .
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:trackCurrentView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ListenerPointSource ;
  rdfs:range :SFBool ;
  rdfs:label "If trackCurrentView field is true then position and orientation match avatar's (user's) current view." ;
  :trackCurrentViewDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LoadSensor a owl:Class ;
  rdfs:subClassOf :X3DNetworkSensorNode ;
  rdfs:label "LoadSensor generates events as watchList child nodes are either loaded or fail to load." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LoadSensor ;
  rdfs:range :X3DUrlObject ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field monitors one or more USE nodes that contain a valid url field." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentLoadSensor .
:hasWatchList a owl:ObjectProperty ;
  owl:equivalentProperty :hasChildren ;
  rdfs:subPropertyOf :hasChild .
:fieldWatchListHasParent a owl:ObjectProperty ;
  owl:equivalentProperty :fieldChildrenHasParent ;
  rdfs:subPropertyOf :hasParentLoadSensor .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:isLoaded a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LoadSensor ;
  rdfs:range :SFBool ;
  rdfs:label "Notify when all watchList child nodes are loaded, or at least one has failed." .
:loadTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LoadSensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time of successful load complete, not sent on failure." .
:progress a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LoadSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "Sends 0." .
:timeOut a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LoadSensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time in seconds of maximum load duration prior to declaring failure." ;
  :timeOutDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LocalFog a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DFogObject ;
  rdfs:label "LocalFog simulates atmospheric effects by blending distant objects with fog color." .
# :color inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFColor, default=1 1 1
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :LocalFog ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
# :fogType inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFString, default=LINEAR, simpleType=fogTypeChoices, baseType=xsd:NMTOKEN
# :visibilityRange inheritedFrom=X3DFogObject with accessType=inputOutput, type=SFFloat, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:LOD a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "LOD (Level Of Detail) uses camera-to-object distance to switch among contained child levels." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :LOD ;
  rdfs:range :SFVec3f ;
  rdfs:label "Viewpoint distance-measurement offset from origin of local coordinate system, used for LOD node distance calculations." ;
  :centerDefault ( 0 0 0 ) .
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:forceTransitions a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :LOD ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to perform every range-based transition, regardless of browser optimizations that might otherwise occur." ;
  :forceTransitionsDefault xsd:false .
:level_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :LOD ;
  rdfs:range :SFInt32 ;
  rdfs:label "Output event that reports current level of LOD children whenever switching occurs." .
:range a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :LOD ;
  rdfs:range :MFFloat ;
  rdfs:label "Specifies ideal distances at which to switch between levels." .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Material a owl:Class ;
  rdfs:subClassOf :X3DOneSidedMaterialNode ;
  rdfs:label "Material specifies surface rendering properties for associated geometry nodes." .
:ambientIntensity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFFloat ;
  rdfs:label "how much ambient omnidirectional light is reflected from all light sources." ;
  :ambientIntensityDefault 0.2 .
:hasAmbientTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying ambientIntensity for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldAmbientTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasAmbientTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
:ambientTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:diffuseColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFColor ;
  rdfs:label "how much direct, angle-dependent light is reflected from all light sources." ;
  :diffuseColorDefault ( 0.8 0.8 0.8 ) .
:hasDiffuseTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying diffuseColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldDiffuseTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasDiffuseTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
:diffuseTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:emissiveColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFColor ;
  rdfs:label "how much glowing light is emitted from this object." ;
  :emissiveColorDefault ( 0 0 0 ) .
:hasEmissiveTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying emissiveColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldEmissiveTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasEmissiveTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
# :emissiveTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :normalScale inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFFloat, default=1
:hasNormalTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying normalScale for this material node, the contained texture modulates the texture across the surface." .
:fieldNormalTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasNormalTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
# :normalTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:occlusionStrength a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFFloat ;
  rdfs:label "occlusionStrength indicates areas of indirect lighting, typically called ambient occlusion." ;
  :occlusionStrengthDefault 1 .
:hasOcclusionTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying occlusionStrength for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldOcclusionTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasOcclusionTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
:occlusionTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:shininess a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFFloat ;
  rdfs:label "Lower shininess values provide soft specular glows, while higher values result in sharper, smaller highlights." ;
  :shininessDefault 0.2 .
:hasShininessTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying shininess for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldShininessTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasShininessTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
:shininessTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:specularColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFColor ;
  rdfs:label "specular highlights are brightness reflections (example: shiny spots on an apple)." ;
  :specularColorDefault ( 0 0 0 ) .
:hasSpecularTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying specularColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldSpecularTextureHasParentMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasSpecularTexture ;
  rdfs:subPropertyOf :hasParentMaterial .
:specularTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:transparency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Material ;
  rdfs:range :SFFloat ;
  rdfs:label "how 'clear' an object is: 1." ;
  :transparencyDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Matrix3VertexAttribute a owl:Class ;
  rdfs:subClassOf :X3DVertexAttributeNode ;
  rdfs:label "Matrix3VertexAttribute defines a set of per-vertex 3x3 matrix attributes." .
# :name inheritedFrom=X3DVertexAttributeNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Matrix3VertexAttribute ;
  rdfs:range :MFMatrix3f ;
  rdfs:label "value specifies an arbitrary collection of matrix values that will be passed to the shader as per-vertex information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Matrix4VertexAttribute a owl:Class ;
  rdfs:subClassOf :X3DVertexAttributeNode ;
  rdfs:label "Matrix4VertexAttribute defines a set of per-vertex 4x4 matrix attributes." .
# :name inheritedFrom=X3DVertexAttributeNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Matrix4VertexAttribute ;
  rdfs:range :MFMatrix4f ;
  rdfs:label "value specifies an arbitrary collection of matrix values that will be passed to the shader as per-vertex information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataBoolean a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the Boolean values of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataBoolean ;
  rdfs:range :MFBool ;
  rdfs:label "The value attribute is a strictly typed data array providing relevant metadata information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataDouble a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the double-precision floating point numbers of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataDouble ;
  rdfs:range :MFDouble ;
  rdfs:label "The value attribute is a strictly typed data array providing relevant metadata information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataFloat a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the single-precision floating point numbers of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataFloat ;
  rdfs:range :MFFloat ;
  rdfs:label "The value attribute is a strictly typed data array providing relevant metadata information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataInteger a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the integer numbers of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataInteger ;
  rdfs:range :MFInt32 ;
  rdfs:label "The value attribute is a strictly typed data array providing relevant metadata information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataSet a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the metadata nodes of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:hasValue a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataSet ;
  rdfs:range :X3DMetadataObject ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The value field provides a list of X3DMetadataObject nodes whose meaning is determined by the name field." .
:fieldValueHasParentMetadataSet a owl:ObjectProperty ;
  owl:inverseOf :hasValue ;
  rdfs:subPropertyOf :hasParentMetadataSet .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MetadataString a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DMetadataObject ;
  rdfs:label "The metadata provided by this node is contained in the strings of the value field." .
# :name inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
# :reference inheritedFrom=X3DMetadataObject with accessType=inputOutput, type=SFString
:value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MetadataString ;
  rdfs:range :MFString ;
  rdfs:label "The value attribute is a strictly typed data array providing relevant metadata information." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MicrophoneSource a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:label "MicrophoneSource captures input from a physical microphone in the real world." .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:mediaDeviceID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MicrophoneSource ;
  rdfs:range :SFString ;
  rdfs:label "mediaDeviceID field provides ID parameter functionality." .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MotorJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "MotorJoint drives relative angular velocities between body1 and body2 within a common reference frame." .
:autoCalc a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFBool ;
  rdfs:label "autoCalc controls whether user manually provides individual angle rotations each frame (false) or if angle values are automatically calculated by motor implementations (true)." ;
  :autoCalcDefault xsd:false .
:axis1Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis1Angle (radians) is rotation angle for corresponding motor axis when in user-calculated mode." ;
  :axis1AngleDefault 0 .
:axis1Torque a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis1Torque is rotational torque applied by corresponding motor axis when in user-calculated mode." ;
  :axis1TorqueDefault 0 .
:axis2Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis2Angle (radians) is rotation angle for corresponding motor axis when in user-calculated mode." ;
  :axis2AngleDefault 0 .
:axis2Torque a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis2Torque is rotational torque applied by corresponding motor axis when in user-calculated mode." ;
  :axis2TorqueDefault 0 .
:axis3Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis3Angle (radians) is rotation angle for corresponding motor axis when in user-calculated mode." ;
  :axis3AngleDefault 0 .
:axis3Torque a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "axis3Torque is rotational torque applied by corresponding motor axis when in user-calculated mode." ;
  :axis3TorqueDefault 0 .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:enabledAxes a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFInt32 ;
  rdfs:label "enabledAxes indicates which motor axes are active." ;
  :enabledAxesDefault 1 .
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
:motor1Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor1Angle provides calculated angle of rotation (radians) for this motor joint from last frame." .
:motor1AngleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor1AngleRate provides calculated anglular rotation rate (radians/second) for this motor joint from last frame." .
:motor1Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "motor1Axis defines axis vector of corresponding motor axis." ;
  :motor1AxisDefault ( 1 0 0 ) .
:motor2Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor2Angle provides calculated angle of rotation (radians) for this motor joint from last frame." .
:motor2AngleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor2AngleRate provides calculated anglular rotation rate (radians/second) for this motor joint from last frame." .
:motor2Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "motor2Axis defines axis vector of corresponding motor axis." ;
  :motor2AxisDefault ( 0 1 0 ) .
:motor3Angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor3Angle provides calculated angle of rotation (radians) for this motor joint from last frame." .
:motor3AngleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "motor3AngleRate provides calculated anglular rotation rate (radians/second) for this motor joint from last frame." .
:motor3Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "motor3Axis defines axis vector of corresponding motor axis." ;
  :motor3AxisDefault ( 0 0 1 ) .
:stop1Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop1BounceDefault 0 .
:stop1ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop1ErrorCorrectionDefault 0.8 .
:stop2Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop2Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop2BounceDefault 0 .
:stop2ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop2ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop2ErrorCorrectionDefault 0.8 .
:stop3Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop3Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop3BounceDefault 0 .
:stop3ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MotorJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop3ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop3ErrorCorrectionDefault 0.8 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MovieTexture a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:subClassOf :X3DTexture2DNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "MovieTexture applies a 2D movie image to surface geometry, or provides audio for a Sound node." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:duration_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :MovieTexture ;
  rdfs:range :SFTime ;
  rdfs:label "or -1." .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:loop a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MovieTexture ;
  rdfs:range :SFBool ;
  rdfs:label "Repeat indefinitely when loop=true, repeat only once when loop=false." ;
  :loopDefault xsd:false .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:pitch a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MovieTexture ;
  rdfs:range :SFFloat ;
  rdfs:label "Multiplier for the rate at which sampled sound is played." ;
  :pitchDefault 1.0 .
# :repeatS inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :repeatT inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:speed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MovieTexture ;
  rdfs:range :SFFloat ;
  rdfs:label "Factor for how fast the movie (or soundtrack) is played." ;
  :speedDefault 1.0 .
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:hasTextureProperties a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :MovieTexture ;
  rdfs:range :TextureProperties ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained TextureProperties node that can specify additional visual attributes applied to corresponding texture images." .
:fieldTexturePropertiesHasParentMovieTexture a owl:ObjectProperty ;
  owl:inverseOf :hasTextureProperties ;
  rdfs:subPropertyOf :hasParentMovieTexture .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MultiTexture a owl:Class ;
  rdfs:subClassOf :X3DTextureNode ;
  rdfs:label "MultiTexture applies several individual textures to a single geometry node, enabling a variety of visual effects that include light mapping and environment mapping." .
:alpha a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :SFFloat ;
  rdfs:label "The alpha field defines the alpha (1-transparency) base value for mode operations." ;
  :alphaDefault 1 .
:color a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :SFColor ;
  rdfs:label "The color field defines the RGB base values for mode operations." ;
  :colorDefault ( 1 1 1 ) .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:function a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :multiTextureFunctionValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "function operators COMPLEMENT or ALPHAREPLICATE can be applied after the mode blending operation." .
:mode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :multiTextureModeValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "mode field indicates the type of blending operation, both for color and for alpha channel." .
:source a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :multiTextureSourceValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "source field determines whether each image source is treated as DIFFUSE, SPECULAR or a multiplicative FACTOR." .
:hasTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTexture ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Contained texture nodes (ImageTexture, MovieTexture, PixelTexture) that map image(s) to surface geometry, defining each of the different texture channels." .
:fieldTextureHasParentMultiTexture a owl:ObjectProperty ;
  owl:inverseOf :hasTexture ;
  rdfs:subPropertyOf :hasParentMultiTexture .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MultiTextureCoordinate a owl:Class ;
  rdfs:subClassOf :X3DTextureCoordinateNode ;
  rdfs:label "MultiTextureCoordinate contains multiple TextureCoordinate or TextureCoordinateGenerator nodes, for use by a parent polygonal geometry node such as IndexedFaceSet or a Triangle* node." .
:hasTexCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTextureCoordinate ;
  rdfs:range :X3DSingleTextureCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Zero or more contained TextureCoordinate or TextureCoordinateGenerator nodes that specify texture coordinates for the different texture channels, used for texture mapping onto corresponding geometry." .
:fieldTexCoordHasParentMultiTextureCoordinate a owl:ObjectProperty ;
  owl:inverseOf :hasTexCoord ;
  rdfs:subPropertyOf :hasParentMultiTextureCoordinate .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:MultiTextureTransform a owl:Class ;
  rdfs:subClassOf :X3DTextureTransformNode ;
  rdfs:label "MultiTextureTransform contains multiple TextureTransform nodes, each provided for use by corresponding ImageTexture MovieTexture or PixelTexture nodes within a sibling MultiTexture node." .
:hasTextureTransform a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :MultiTextureTransform ;
  rdfs:range :X3DSingleTextureTransformNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Zero or more contained TextureTransform nodes, for each of the different texture channels, that define 2D transformation applied to texture coordinates." .
:fieldTextureTransformHasParentMultiTextureTransform a owl:ObjectProperty ;
  owl:inverseOf :hasTextureTransform ;
  rdfs:subPropertyOf :hasParentMultiTextureTransform .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NavigationInfo a owl:Class ;
  rdfs:subClassOf :X3DBindableNode ;
  rdfs:label "NavigationInfo describes the user's viewing model, user navigation-interaction modalities, and also dimensional characteristics of the user's (typically invisible) avatar." .
:avatarSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :MFFloat ;
  rdfs:label "avatarSize triplet values define three separate parameters: (a) collisionDistance between user and geometry, i." ;
  :avatarSizeDefault ( 0.25 1.6 0.75 ) .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:headlight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :SFBool ;
  rdfs:label "Enable/disable directional light that always points in the direction the user is looking." ;
  :headlightDefault xsd:true .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
:speed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :SFFloat ;
  rdfs:label "Default rate at which viewer travels through scene, meters/second." ;
  :speedDefault 1 .
:transitionComplete a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :SFBool ;
  rdfs:label "Event signaling viewpoint transition complete." .
:transitionTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :SFTime ;
  rdfs:label "transitionTime defines the expected duration of viewpoint transition in seconds." ;
  :transitionTimeDefault 1.0 .
:transitionType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :navigationTransitionTypeValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "Camera transition between viewpoints." ;
  :transitionTypeDefault ( "LINEAR" ) .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :navigationTypeValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "Enter one or more quoted SFString values: 'EXAMINE' 'WALK' 'FLY' 'LOOKAT' 'EXPLORE' 'ANY' 'NONE'." ;
  :typeDefault ( "EXAMINE" "ANY" ) .
:visibilityLimit a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NavigationInfo ;
  rdfs:range :SFFloat ;
  rdfs:label "Geometry beyond the visibilityLimit may not be rendered (far clipping plane of the view frustrum)." ;
  :visibilityLimitDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Normal a owl:Class ;
  rdfs:subClassOf :X3DNormalNode ;
  rdfs:label "Normal defines a set of 3D surface-normal vectors that apply either to a sibling Coordinate|CoordinateDouble node, or else to a parent ElevationGrid node." .
:vector a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Normal ;
  rdfs:range :MFVec3f ;
  rdfs:label "set of unit-length normal vectors, corresponding to indexed polygons or vertices." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NormalInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "NormalInterpolator generates a series of normal (perpendicular) 3-tuple SFVec3f values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NormalInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NormalInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsCurve a owl:Class ;
  rdfs:subClassOf :X3DParametricGeometryNode ;
  rdfs:label "NurbsCurve is a 3D curve analogous to NurbsPatchSurface." .
:closed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not the curve is closed (i." ;
  :closedDefault xsd:false .
:hasControlPoint a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsCurve ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify control points for NURBS geometry definitions." .
:fieldControlPointHasParentNurbsCurve a owl:ObjectProperty ;
  owl:inverseOf :hasControlPoint ;
  rdfs:subPropertyOf :hasParentNurbsCurve .
:knot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve ;
  rdfs:range :MFDouble ;
  rdfs:label "knot vector, where size = number of control points + order of curve." .
:order a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve ;
  rdfs:range :SFInt32 ;
  rdfs:label "define order of surface by polynomials of degree = order-1." ;
  :orderDefault 3 .
:tessellation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsCurve ;
  rdfs:range :SFInt32 ;
  rdfs:label "hint for surface tessellation." ;
  :tessellationDefault 0 .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsCurve ;
  rdfs:range :MFDouble ;
  rdfs:label "Vector assigning relative weight value to each control point." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsCurve2D a owl:Class ;
  rdfs:subClassOf :X3DNurbsControlCurveNode ;
  rdfs:label "NurbsCurve2D defines a trimming segment that is part of a trimming contour in the u-v domain of a surface." .
:closed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve2D ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not the curve is closed (i." ;
  :closedDefault xsd:false .
# :controlPoint inheritedFrom=X3DNurbsControlCurveNode with accessType=inputOutput, type=MFVec2d
:knot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve2D ;
  rdfs:range :MFDouble ;
  rdfs:label "knot vector, where size = number of control points + order of curve." .
:order a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsCurve2D ;
  rdfs:range :SFInt32 ;
  rdfs:label "define order of surface by polynomials of degree = order-1." ;
  :orderDefault 3 .
:tessellation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsCurve2D ;
  rdfs:range :SFInt32 ;
  rdfs:label "hint for surface tessellation." ;
  :tessellationDefault 0 .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsCurve2D ;
  rdfs:range :MFDouble ;
  rdfs:label "Vector assigning relative weight value to each control point." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsOrientationInterpolator a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "NurbsOrientationInterpolator describes a 3D NURBS curve and outputs interpolated orientation values." .
:hasControlPoint a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify control points for NURBS geometry definitions." .
:fieldControlPointHasParentNurbsOrientationInterpolator a owl:ObjectProperty ;
  owl:inverseOf :hasControlPoint ;
  rdfs:subPropertyOf :hasParentNurbsOrientationInterpolator .
:knot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "knot vector, where size = number of control points + order of curve." .
:order a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "define order of surface by polynomials of degree = order-1." ;
  :orderDefault 3 .
:set_fraction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range :SFFloat ;
  rdfs:label "setting fraction in range [0,1] selects input key for corresponding keyValue output, computing a 3D position on the curve." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range :SFRotation ;
  rdfs:label "Computationaly interpolated output value determined by current key time and corresponding keyValue pair." .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsOrientationInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "Output values for computational interpolation, each corresponding to knots." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsPatchSurface a owl:Class ;
  rdfs:subClassOf :X3DNurbsSurfaceGeometryNode ;
  rdfs:label "NurbsPatchSurface defines a contiguous 3D Non-Uniform Rational B-Spline (NURBS) surface." .
# :controlPoint inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :solid inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :uClosed inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFBool, default=false
# :uDimension inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=0
# :uKnot inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=MFDouble
# :uOrder inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=3
# :uTessellation inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFInt32, default=0
# :vClosed inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFBool, default=false
# :vDimension inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=0
# :vKnot inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=MFDouble
# :vOrder inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=3
# :vTessellation inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFInt32, default=0
# :weight inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=MFDouble
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsPositionInterpolator a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "NurbsPositionInterpolator describes a 3D NURBS curve and outputs interpolated position values." .
:hasControlPoint a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify control points for NURBS geometry definitions." .
:fieldControlPointHasParentNurbsPositionInterpolator a owl:ObjectProperty ;
  owl:inverseOf :hasControlPoint ;
  rdfs:subPropertyOf :hasParentNurbsPositionInterpolator .
:knot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "knot vector, where size = number of control points + order of curve." .
:order a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "define order of surface by polynomials of degree = order-1." ;
  :orderDefault 3 .
:set_fraction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range :SFFloat ;
  rdfs:label "setting fraction in range [0,1] selects input key for corresponding keyValue output, computing a 3D position on the curve." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Computationaly interpolated output value determined by current key time and corresponding keyValue pair." .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsPositionInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "Output values for linear interpolation, each corresponding to knots." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsSet a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "NurbsSet collects a set of NurbsSurface nodes into a common group and treats NurbsSurface set as a unit during tessellation, thereby enforcing tessellation continuity along borders." .
:hasAddGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsSet ;
  rdfs:range :X3DParametricGeometryNode ;
  rdfs:subPropertyOf :hasChild .
:fieldAddGeometryHasParentNurbsSet a owl:ObjectProperty ;
  owl:inverseOf :hasAddGeometry ;
  rdfs:subPropertyOf :hasParentNurbsSet .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSet ;
  rdfs:range :X3DParametricGeometryNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children form a closed loop with first point of first child repeated as last point of last child, and the last point of a segment repeated as first point of the consecutive one." .
:fieldGeometryHasParentNurbsSet a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry ;
  rdfs:subPropertyOf :hasParentNurbsSet .
:hasRemoveGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsSet ;
  rdfs:range :X3DParametricGeometryNode ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveGeometryHasParentNurbsSet a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveGeometry ;
  rdfs:subPropertyOf :hasParentNurbsSet .
:tessellationScale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSet ;
  rdfs:range :SFFloat ;
  rdfs:label "scale for surface tessellation in children NurbsSurface nodes." ;
  :tessellationScaleDefault 1.0 .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsSurfaceInterpolator a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "NurbsSurfaceInterpolator describes a 3D NURBS curve and outputs interpolated position and normal values." .
:hasControlPoint a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range  [ owl:unionOf (:Coordinate :CoordinateDouble) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify control points for NURBS geometry definitions." .
:fieldControlPointHasParentNurbsSurfaceInterpolator a owl:ObjectProperty ;
  owl:inverseOf :hasControlPoint ;
  rdfs:subPropertyOf :hasParentNurbsSurfaceInterpolator .
:normal_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Computationaly interpolated output value determined by current key time and corresponding keyValue pair." .
:position_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Computationaly interpolated output value determined by current key time and corresponding keyValue pair." .
:set_fraction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFVec2f ;
  rdfs:label "setting fraction in range [0,1] selects input key for corresponding keyValue output, computing a 3D position on the curve." .
:uDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of control points in u dimension." ;
  :uDimensionDefault 0 .
:uKnot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "Knot vector, where size = number of control points + order of curve." .
:uOrder a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "Define order of surface by polynomials of degree = order-1." ;
  :uOrderDefault 3 .
:vDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of control points in v dimension." ;
  :vDimensionDefault 0 .
:vKnot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "Knot vector, where size = number of control points + order of curve." .
:vOrder a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :SFInt32 ;
  rdfs:label "Define order of surface by polynomials of degree = order-1." ;
  :vOrderDefault 3 .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSurfaceInterpolator ;
  rdfs:range :MFDouble ;
  rdfs:label "Output values for linear interpolation, each corresponding to knots." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsSweptSurface a owl:Class ;
  rdfs:subClassOf :X3DParametricGeometryNode ;
  rdfs:label "NurbsSweptSurface uses a trajectoryCurve path to describe a generalized surface that is swept by a crossSectionCurve." .
:ccw a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSweptSurface ;
  rdfs:range :SFBool ;
  rdfs:label "ccw defines clockwise/counterclockwise ordering of vertex coordinates, which in turn defines front/back orientation of polygon normals according to Right-Hand Rule (RHR)." ;
  :ccwDefault xsd:true .
:hasCrossSectionCurve a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSweptSurface ;
  rdfs:range :X3DNurbsControlCurveNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "defines cross-section of the surface traced about the trajectoryCurve axis." .
:fieldCrossSectionCurveHasParentNurbsSweptSurface a owl:ObjectProperty ;
  owl:inverseOf :hasCrossSectionCurve ;
  rdfs:subPropertyOf :hasParentNurbsSweptSurface .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSweptSurface ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:hasTrajectoryCurve a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSweptSurface ;
  rdfs:range :NurbsCurve ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "describes the center-line path using a NurbsCurve node, oriented so that it is defined counterclockwise when looking down the −Y axis, thus defining a concept of inside and outside." .
:fieldTrajectoryCurveHasParentNurbsSweptSurface a owl:ObjectProperty ;
  owl:inverseOf :hasTrajectoryCurve ;
  rdfs:subPropertyOf :hasParentNurbsSweptSurface .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsSwungSurface a owl:Class ;
  rdfs:subClassOf :X3DParametricGeometryNode ;
  rdfs:label "NurbsSwungSurface contains a profileCurve and a trajectoryCurve [X3DNurbsControlCurveNode]." .
:ccw a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsSwungSurface ;
  rdfs:range :SFBool ;
  rdfs:label "ccw defines clockwise/counterclockwise ordering of vertex coordinates, which in turn defines front/back orientation of polygon normals according to Right-Hand Rule (RHR)." ;
  :ccwDefault xsd:true .
:hasProfileCurve a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSwungSurface ;
  rdfs:range :X3DNurbsControlCurveNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "2D curve in the yz-plane that describes the cross-sectional shape of the object." .
:fieldProfileCurveHasParentNurbsSwungSurface a owl:ObjectProperty ;
  owl:inverseOf :hasProfileCurve ;
  rdfs:subPropertyOf :hasParentNurbsSwungSurface .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSwungSurface ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
:hasTrajectoryCurve a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsSwungSurface ;
  rdfs:range :X3DNurbsControlCurveNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "2D curve in the xz-plane that describes path over which to trace the cross-section." .
:fieldTrajectoryCurveHasParentNurbsSwungSurface a owl:ObjectProperty ;
  owl:inverseOf :hasTrajectoryCurve ;
  rdfs:subPropertyOf :hasParentNurbsSwungSurface .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsTextureCoordinate a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "NurbsTextureCoordinate describes a 3D NURBS surface in the parametric domain of its surface host, specifying mapping of texture onto the surface." .
:controlPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :MFVec2f ;
  rdfs:label "controlPoint defines a set of control points of dimension uDimension by vDimension, and defines a mesh where the points do not have uniform spacing." .
:uDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of control points in u dimension." ;
  :uDimensionDefault 0 .
:uKnot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :MFDouble ;
  rdfs:label "Knot vector, where size = number of control points + order of curve." .
:uOrder a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :SFInt32 ;
  rdfs:label "Define order of surface by polynomials of degree = order-1." ;
  :uOrderDefault 3 .
:vDimension a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of control points in v dimension." ;
  :vDimensionDefault 0 .
:vKnot a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :MFDouble ;
  rdfs:label "Knot vector, where size = number of control points + order of curve." .
:vOrder a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :SFInt32 ;
  rdfs:label "Define order of surface by polynomials of degree = order-1." ;
  :vOrderDefault 3 .
:weight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsTextureCoordinate ;
  rdfs:range :MFDouble ;
  rdfs:label "Output values for linear interpolation, each corresponding to knots." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:NurbsTrimmedSurface a owl:Class ;
  rdfs:subClassOf :X3DNurbsSurfaceGeometryNode ;
  rdfs:label "NurbsTrimmedSurface generates texture coordinates from a Non-Uniform Rational B-Spline (NURBS) surface." .
:hasAddTrimmingContour a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsTrimmedSurface ;
  rdfs:range :Contour2D ;
  rdfs:subPropertyOf :hasChild .
:fieldAddTrimmingContourHasParentNurbsTrimmedSurface a owl:ObjectProperty ;
  owl:inverseOf :hasAddTrimmingContour ;
  rdfs:subPropertyOf :hasParentNurbsTrimmedSurface .
# :controlPoint inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:hasRemoveTrimmingContour a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :NurbsTrimmedSurface ;
  rdfs:range :Contour2D ;
  rdfs:subPropertyOf :hasChild .
:fieldRemoveTrimmingContourHasParentNurbsTrimmedSurface a owl:ObjectProperty ;
  owl:inverseOf :hasRemoveTrimmingContour ;
  rdfs:subPropertyOf :hasParentNurbsTrimmedSurface .
# :solid inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:hasTrimmingContour a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :NurbsTrimmedSurface ;
  rdfs:range :Contour2D ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "A set of Contour2D nodes are used as trimming loops." .
:fieldTrimmingContourHasParentNurbsTrimmedSurface a owl:ObjectProperty ;
  owl:inverseOf :hasTrimmingContour ;
  rdfs:subPropertyOf :hasParentNurbsTrimmedSurface .
# :uClosed inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFBool, default=false
# :uDimension inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=0
# :uKnot inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=MFDouble
# :uOrder inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=3
# :uTessellation inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFInt32, default=0
# :vClosed inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFBool, default=false
# :vDimension inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=0
# :vKnot inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=MFDouble
# :vOrder inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=initializeOnly, type=SFInt32, default=3
# :vTessellation inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=SFInt32, default=0
# :weight inheritedFrom=X3DNurbsSurfaceGeometryNode with accessType=inputOutput, type=MFDouble
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OpacityMapVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "OpacityMapVolumeStyle specifies that volumetric data is rendered using opacity mapped to a transfer function texture." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:hasTransferFunction a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OpacityMapVolumeStyle ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :X3DTexture3DNode) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The transferFunction field holds a single texture representation in either two or three dimensions that maps the voxel data values to a specific colour output." .
:fieldTransferFunctionHasParentOpacityMapVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasTransferFunction ;
  rdfs:subPropertyOf :hasParentOpacityMapVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OrientationChaser a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "OrientationChaser generates a series of 4-tuple axis-angle SFRotation values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :OrientationChaser ;
  rdfs:range :SFRotation ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 1 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :OrientationChaser ;
  rdfs:range :SFRotation ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 1 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :OrientationChaser ;
  rdfs:range :SFRotation ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :OrientationChaser ;
  rdfs:range :SFRotation ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :OrientationChaser ;
  rdfs:range :SFRotation ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OrientationDamper a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "OrientationDamper generates a series of 4-tuple axis-angle SFRotation values that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :OrientationDamper ;
  rdfs:range :SFRotation ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 1 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :OrientationDamper ;
  rdfs:range :SFRotation ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 1 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :OrientationDamper ;
  rdfs:range :SFRotation ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :OrientationDamper ;
  rdfs:range :SFRotation ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :OrientationDamper ;
  rdfs:range :SFRotation ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OrientationInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "OrientationInterpolator generates a series of 4-tuple axis-angle SFRotation values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OrientationInterpolator ;
  rdfs:range :MFRotation ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :OrientationInterpolator ;
  rdfs:range :SFRotation ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OrthoViewpoint a owl:Class ;
  rdfs:subClassOf :X3DViewpointNode ;
  rdfs:label "OrthoViewpoint provides an orthographic perspective-free view of a scene from a specific location and direction." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:centerOfRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OrthoViewpoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "centerOfRotation specifies center point about which to rotate user's eyepoint when in EXAMINE or LOOKAT mode." ;
  :centerOfRotationDefault ( 0 0 0 ) .
# :description inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFString
# :farDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
:fieldOfView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OrthoViewpoint ;
  rdfs:range :SFVec4f ;
  rdfs:label "Minimum and maximum extents of view in units of local coordinate system." ;
  :fieldOfViewDefault ( -1 -1 1 1 ) .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :jump inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=true
# :navigationInfo inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFNode, default=NULL
# :nearDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
# :orientation inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFRotation, default=0 0 1 0
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OrthoViewpoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "position (x, y, z in meters) relative to local coordinate system." ;
  :positionDefault ( 0 0 10 ) .
# :retainUserOffsets inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
# :viewAll inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:OscillatorSource a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:label "OscillatorSource node represents an audio source generating a periodic waveform, providing a constant tone." .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
:detune a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OscillatorSource ;
  rdfs:range :SFFloat ;
  rdfs:label "The detune ffield is an a-rate AudioParam representing detuning of oscillation in cents (though the AudioParam returned is read-only, the value it represents is not)." ;
  :detuneDefault 0 .
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
:frequency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :OscillatorSource ;
  rdfs:range :SFFloat ;
  rdfs:label "The frequency of oscillation in hertz." ;
  :frequencyDefault 440 .
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PackagedShader a owl:Class ;
  rdfs:subClassOf :X3DShaderNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:subClassOf :X3DProgrammableShaderObject ;
  rdfs:label "PackagedShader can contain field declarations, but no CDATA section of plain-text source code." .
# :activate inheritedFrom=X3DShaderNode with accessType=inputOnly, type=SFBool
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PackagedShader ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in the PackagedShader node." .
:fieldFieldHasParentPackagedShader a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentPackagedShader .
# :isSelected inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :isValid inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :language inheritedFrom=X3DShaderNode with accessType=initializeOnly, type=SFString, simpleType=shaderLanguageValues, baseType=xsd:NMTOKEN
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom= with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ParticleSystem a owl:Class ;
  rdfs:subClassOf :X3DShapeNode ;
  rdfs:label "ParticleSystem specifies a complete particle system." .
# :appearance inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFNode, default=NULL
# :bboxCenter inheritedFrom=X3DShapeNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DShapeNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :castShadow inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=true
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The color field contains Color|ColorRGBA nodes as a series of color values to be used at the given colorKey points in time." .
:fieldColorHasParentParticleSystem a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:hasColorRamp a owl:ObjectProperty ;
  owl:equivalentProperty :hasColor ;
  rdfs:subPropertyOf :hasChild .
:fieldColorRampHasParentParticleSystem a owl:ObjectProperty ;
  owl:equivalentProperty :fieldColorHasParentParticleSystem ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:colorKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :MFFloat ;
  rdfs:label "Array of time intervals in seconds, corresponding to particle lifetime, that are used to interpolate color array values." .
:createParticles a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables creation of new particles, while any existing particles remain in existence and continue to animate until the end of their lifetimes." ;
  :createParticlesDefault xsd:true .
:hasEmitter a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :X3DParticleEmitterNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The emitter field specifies the type of emitter geometry and properties that the particles are given for their initial positions." .
:fieldEmitterHasParentParticleSystem a owl:ObjectProperty ;
  owl:inverseOf :hasEmitter ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:hasGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :X3DGeometryNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained geometry node provides geometry used for each particle when geometryType=GEOMETRY." .
:fieldGeometryHasParentParticleSystem a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:geometryType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :particleSystemGeometryTypeValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "specifies type of geometry used to represent individual particles." ;
  :geometryTypeDefault "QUAD" .
:isActive a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFBool ;
  rdfs:label "isActive true/false events are sent when playback starts/stops." .
:lifetimeVariation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFFloat ;
  rdfs:label "TODO not properly defined in X3D spedification." ;
  :lifetimeVariationDefault 0.25 .
:maxParticles a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFInt32 ;
  rdfs:label "Maximum number of particles to be generated at one time (subject to player limitations)." ;
  :maxParticlesDefault 200 .
:particleLifetime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFFloat ;
  rdfs:label "TODO not properly defined in X3D spedification." ;
  :particleLifetimeDefault 5 .
:particleSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :SFVec2f ;
  rdfs:label "particleSize describes width and height dimensions for each particle in length base units (default is meters)." ;
  :particleSizeDefault ( 0.02 0.02 ) .
:hasPhysics a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :X3DParticlePhysicsModelNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "After being created, the individual particles are then manipulated according to the physics model(s) specified in the physics field." .
:fieldPhysicsHasParentParticleSystem a owl:ObjectProperty ;
  owl:inverseOf :hasPhysics ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:hasTexCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range  [ owl:unionOf (:TextureCoordinate :TextureCoordinateGenerator) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "texture coordinates of the provided texture(s) in the Appearance node, over time." .
:fieldTexCoordHasParentParticleSystem a owl:ObjectProperty ;
  owl:inverseOf :hasTexCoord ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:hasTexCoordRamp a owl:ObjectProperty ;
  owl:equivalentProperty :hasTexCoord ;
  rdfs:subPropertyOf :hasChild .
:fieldTexCoordRampHasParentParticleSystem a owl:ObjectProperty ;
  owl:equivalentProperty :fieldTexCoordHasParentParticleSystem ;
  rdfs:subPropertyOf :hasParentParticleSystem .
:texCoordKey a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ParticleSystem ;
  rdfs:range :MFFloat ;
  rdfs:label "Array of time intervals in seconds, corresponding to particle lifetime, that are used to sequence texCoord array values." .
# :visible inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PeriodicWave a owl:Class ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "PeriodicWave defines a periodic waveform that can be used to shape the output of an Oscillator." .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
:optionsImag a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PeriodicWave ;
  rdfs:range :MFFloat ;
  rdfs:label "imaginary coefficients for defining a waveform." .
:optionsReal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PeriodicWave ;
  rdfs:range :MFFloat ;
  rdfs:label "real coefficients for defining a waveform." .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PeriodicWave ;
  rdfs:range :periodicWaveTypeChoices ;
  rdfs:label "The type field specifies shape of waveform to play, which can be one of several provided values or else 'custom' to indicate that real and imaginary coefficient arrays define a custom waveform." ;
  :typeDefault "square" .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PhysicalMaterial a owl:Class ;
  rdfs:subClassOf :X3DOneSidedMaterialNode ;
  rdfs:label "PhysicalMaterial specifies surface rendering properties for associated geometry nodes." .
:baseColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "similar to diffuseColor, TODO define more precisely." ;
  :baseColorDefault ( 1 1 1 ) .
:hasBaseTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying baseColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldBaseTextureHasParentPhysicalMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasBaseTexture ;
  rdfs:subPropertyOf :hasParentPhysicalMaterial .
:baseTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:emissiveColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much glowing light is emitted from this object." ;
  :emissiveColorDefault ( 0 0 0 ) .
:hasEmissiveTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying emissiveColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldEmissiveTextureHasParentPhysicalMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasEmissiveTexture ;
  rdfs:subPropertyOf :hasParentPhysicalMaterial .
# :emissiveTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:metallic a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "metallic is a PBR parameter (TODO elaborate)." ;
  :metallicDefault 1 .
:hasMetallicRoughnessTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying metallic for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldMetallicRoughnessTextureHasParentPhysicalMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasMetallicRoughnessTexture ;
  rdfs:subPropertyOf :hasParentPhysicalMaterial .
:metallicRoughnessTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
# :normalScale inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFFloat, default=1
:hasNormalTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying normalScale for this material node, the contained texture modulates the texture across the surface." .
:fieldNormalTextureHasParentPhysicalMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasNormalTexture ;
  rdfs:subPropertyOf :hasParentPhysicalMaterial .
# :normalTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:occlusionStrength a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "occlusionStrength indicates areas of indirect lighting, typically called ambient occlusion." ;
  :occlusionStrengthDefault 1 .
:hasOcclusionTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying occlusionStrength for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldOcclusionTextureHasParentPhysicalMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasOcclusionTexture ;
  rdfs:subPropertyOf :hasParentPhysicalMaterial .
:occlusionTextureMapping a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "The mapping label identifies which texture coordinates and transformations are used to compute texture effects from corresponding geometry on a given material." .
:roughness a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "roughness is a PBR parameter (TODO elaborate)." ;
  :roughnessDefault 1 .
:transparency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PhysicalMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how 'clear' an object is: 1." ;
  :transparencyDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PickableGroup a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:subClassOf :X3DPickableObject ;
  rdfs:label "PickableGroup is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PickableGroup ;
  rdfs:range :SFString ;
  rdfs:label "Author-provided prose that describes intended purpose of the node." .
# :objectType inheritedFrom=X3DPickableObject with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickable inheritedFrom=X3DPickableObject with accessType=inputOutput, type=SFBool, default=true
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PixelTexture a owl:Class ;
  rdfs:subClassOf :X3DTexture2DNode ;
  rdfs:label "PixelTexture creates a 2D-image texture map using a numeric array of pixel values." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:image a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PixelTexture ;
  rdfs:range :SFImage ;
  rdfs:label "Defines image: width, height, number_of_components per each pixel value, and list of pixel_values." ;
  :imageDefault ( 0 0 0 ) .
# :repeatS inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :repeatT inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFBool, default=true
# :textureProperties inheritedFrom=X3DTexture2DNode with accessType=initializeOnly, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PixelTexture3D a owl:Class ;
  rdfs:subClassOf :X3DTexture3DNode ;
  rdfs:label "PixelTexture3D defines a 3D image-based texture map as an explicit array of pixel values (image field)." .
# :description inheritedFrom=X3DTextureNode with accessType=inputOutput, type=SFString
:image a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PixelTexture3D ;
  rdfs:range :MFInt32 ;
  rdfs:label "image describes raw data for this 3D texture: number of components to the image [0,4], width, height and depth of the texture, followed by (width x height x depth) pixel values." ;
  :imageDefault ( 0 0 0 0 ) .
# :repeatR inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatS inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :repeatT inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFBool, default=false
# :textureProperties inheritedFrom=X3DTexture3DNode with accessType=initializeOnly, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PlaneSensor a owl:Class ;
  rdfs:subClassOf :X3DDragSensorNode ;
  rdfs:label "PlaneSensor converts pointing device motion into 2D translation parallel to the local Z=0 plane." .
# :autoOffset inheritedFrom=X3DDragSensorNode with accessType=inputOutput, type=SFBool, default=true
:axisRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PlaneSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "axisRotation determines local sensor coordinate system by rotating the local coordinate system." ;
  :axisRotationDefault ( 0 1 0 0 ) .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
:maxPosition a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PlaneSensor ;
  rdfs:range :SFVec2f ;
  rdfs:label "minPosition and maxPosition clamp translations to a range of values measured from origin of Z=0 plane default maxPosition < minPosition means no clamping." ;
  :maxPositionDefault ( -1 -1 ) .
:minPosition a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PlaneSensor ;
  rdfs:range :SFVec2f ;
  rdfs:label "minPosition and maxPosition clamp translations to a range of values measured from origin of Z=0 plane default maxPosition < minPosition means no clamping." ;
  :minPositionDefault ( 0 0 ) .
:offset a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PlaneSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends event and remembers last value sensed." ;
  :offsetDefault ( 0 0 0 ) .
# :trackPoint_changed inheritedFrom=X3DDragSensorNode with accessType=outputOnly, type=SFVec3f
:translation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PlaneSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "translation_changed events equal sum of relative translation change plus offset value." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PointEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "PointEmitter generates particles from a specific point in space using the specified direction and speed." .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial direction from which particles emanate." ;
  :directionDefault ( 0 1 0 ) .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Point from which particles emanate." ;
  :positionDefault ( 0 0 0 ) .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PointLight a owl:Class ;
  rdfs:subClassOf :X3DLightNode ;
  rdfs:label "Linear attenuation may occur at level 2, full support at level 3." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
:attenuation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Constant, linear-distance and squared-distance dropoff factors as radial distance increases from the source." ;
  :attenuationDefault ( 1 0 0 ) .
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
:global a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointLight ;
  rdfs:range :SFBool ;
  rdfs:label "Global lights illuminate all objects within their volume of lighting influence." ;
  :globalDefault xsd:true .
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
:location a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of light relative to local coordinate system." ;
  :locationDefault ( 0 0 0 ) .
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PointLight ;
  rdfs:range :SFFloat ;
  rdfs:label "Maximum effective distance of light relative to local light position, affected by ancestor scaling." ;
  :radiusDefault 100 .
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PointPickSensor a owl:Class ;
  rdfs:subClassOf :X3DPickSensorNode ;
  rdfs:label "PointPickSensor tests one or more pickingGeometry points in space as lying inside the provided pickTarget geometry." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :intersectionType inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=BOUNDS, simpleType=intersectionTypeValues, baseType=xsd:NMTOKEN
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :matchCriterion inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFString, default=MATCH_ANY, simpleType=pickSensorMatchCriterionChoices, baseType=xsd:NMTOKEN
# :objectType inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickedGeometry inheritedFrom=X3DPickSensorNode with accessType=outputOnly, type=MFNode
:pickedPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PointPickSensor ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output event containing 3D points on surface of underlying pickingGeometry computed by the picking intersection computations, given in the local coordinate system." .
# :pickingGeometry inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFNode, default=NULL
# :pickTarget inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFNode
# :sortOrder inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=CLOSEST, simpleType=pickSensorSortOrderValues, baseType=xsd:NMTOKEN
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PointProperties a owl:Class ;
  rdfs:subClassOf :X3DAppearanceChildNode ;
  rdfs:label "PointProperties allows precise fine-grained control over the rendering style of PointSet node points inside the same Shape." .
:attenuation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointProperties ;
  rdfs:range :SFVec3f ;
  rdfs:label "attenuation array values [a, b, c] are set to default values if undefined." ;
  :attenuationDefault ( 1 0 0 ) .
:pointSizeMaxValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "pointSizeMaxValue is maximum allowed scaling factor on nominal browser point scaling." ;
  :pointSizeMaxValueDefault 1 .
:pointSizeMinValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "pointSizeMinValue is minimum allowed scaling factor on nominal browser point scaling." ;
  :pointSizeMinValueDefault 1 .
:pointSizeScaleFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "Nominal rendered point size is a browser-dependent minimum renderable point size, which is then multiplied by an additional pointSizeScaleFactor (which is greater than or equal to 1)." ;
  :pointSizeScaleFactorDefault 1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PointSet a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "PointSet is a node that contains a set of colored 3D points, represented by contained Color|ColorRGBA and Coordinate|CoordinateDouble nodes." .
:hasAttrib a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointSet ;
  rdfs:range :X3DVertexAttributeNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FloatVertexAttribute node that can specify list of per-vertex attribute information for programmable shaders." .
:fieldAttribHasParentPointSet a owl:ObjectProperty ;
  owl:inverseOf :hasAttrib ;
  rdfs:subPropertyOf :hasParentPointSet .
:hasColor a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointSet ;
  rdfs:range :X3DColorNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Color or ColorRGBA node that can specify color values applied to corresponding vertices according to colorIndex and colorPerVertex fields." .
:fieldColorHasParentPointSet a owl:ObjectProperty ;
  owl:inverseOf :hasColor ;
  rdfs:subPropertyOf :hasParentPointSet .
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointSet ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Coordinate or CoordinateDouble node that can specify a list of vertex values." .
:fieldCoordHasParentPointSet a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentPointSet .
:hasFogCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointSet ;
  rdfs:range :FogCoordinate ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained FogCoordinate node that can specify depth parameters for fog in corresponding geometry." .
:fieldFogCoordHasParentPointSet a owl:ObjectProperty ;
  owl:inverseOf :hasFogCoord ;
  rdfs:subPropertyOf :hasParentPointSet .
:hasNormal a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PointSet ;
  rdfs:range :X3DNormalNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained Normal node that can specify perpendicular vectors for corresponding vertices to support rendering computations." .
:fieldNormalHasParentPointSet a owl:ObjectProperty ;
  owl:inverseOf :hasNormal ;
  rdfs:subPropertyOf :hasParentPointSet .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Polyline2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Polyline2D is a geometry node that defines a connected set of vertices in a contiguous set of line segments in X-Y plane." .
:lineSegments a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Polyline2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Coordinates of vertices connected into contiguous Polyline2D." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PolylineEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "PolylineEmitter emits particles along a single polyline." .
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PolylineEmitter ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Coordinates for the line along which particles are randomly generated." .
:fieldCoordHasParentPolylineEmitter a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentPolylineEmitter .
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PolylineEmitter ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices are applied to contained Coordinate values in order to define randomly generated initial geometry of the particles." ;
  :coordIndexDefault ( -1 ) .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PolylineEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial direction from which particles emanate." ;
  :directionDefault ( 0 1 0 ) .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:set_coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PolylineEmitter ;
  rdfs:range :MFInt32 .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Polypoint2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Polypoint2D is a geometry node that defines a set of 2D points in X-Y plane." .
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Polypoint2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "2D coordinates of vertices." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionChaser a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "PositionChaser generates a series of position values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionChaser ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionChaser ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionChaser ;
  rdfs:range :SFVec3f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionChaser ;
  rdfs:range :SFVec3f ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionChaser ;
  rdfs:range :SFVec3f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionChaser2D a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "PositionChaser2D generates a series of 2D position values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionChaser2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionChaser2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionChaser2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionChaser2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionChaser2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionDamper a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "PositionDamper generates a series of position values that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionDamper ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionDamper ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionDamper ;
  rdfs:range :SFVec3f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionDamper ;
  rdfs:range :SFVec3f ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionDamper ;
  rdfs:range :SFVec3f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionDamper2D a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "PositionDamper2D generates a series of 2D floating-point values that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionDamper2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault ( 0 0 ) .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :PositionDamper2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault ( 0 0 ) .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionDamper2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :PositionDamper2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionDamper2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "PositionInterpolator generates a series of 3-tuple SFVec3f values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PositionInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PositionInterpolator2D a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "PositionInterpolator2D generates a series of SFVec2f values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :PositionInterpolator2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :PositionInterpolator2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:PrimitivePickSensor a owl:Class ;
  rdfs:subClassOf :X3DPickSensorNode ;
  rdfs:label "If a non-uniform scale is applied to the pick sensor, correct results may require level 3 support." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :intersectionType inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=BOUNDS, simpleType=intersectionTypeValues, baseType=xsd:NMTOKEN
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :matchCriterion inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFString, default=MATCH_ANY, simpleType=pickSensorMatchCriterionChoices, baseType=xsd:NMTOKEN
# :objectType inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickedGeometry inheritedFrom=X3DPickSensorNode with accessType=outputOnly, type=MFNode
# :pickingGeometry inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFNode, default=NULL
# :pickTarget inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFNode
# :sortOrder inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=CLOSEST, simpleType=pickSensorSortOrderValues, baseType=xsd:NMTOKEN
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ProgramShader a owl:Class ;
  rdfs:subClassOf :X3DShaderNode ;
  rdfs:label "ProgramShader contains no field declarations and no plain-text source code." .
# :activate inheritedFrom=X3DShaderNode with accessType=inputOnly, type=SFBool
# :isSelected inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :isValid inheritedFrom=X3DShaderNode with accessType=outputOnly, type=SFBool
# :language inheritedFrom=X3DShaderNode with accessType=initializeOnly, type=SFString, simpleType=shaderLanguageValues, baseType=xsd:NMTOKEN
:hasPrograms a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProgramShader ;
  rdfs:range :ShaderProgram ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "ProgramShader contains zero or more ShaderProgram node instances." .
:fieldProgramsHasParentProgramShader a owl:ObjectProperty ;
  owl:inverseOf :hasPrograms ;
  rdfs:subPropertyOf :hasParentProgramShader .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ProjectionVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DVolumeRenderStyleNode ;
  rdfs:label "ProjectionVolumeStyle uses voxel data to directly generate output color." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:intensityThreshold a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProjectionVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "Threshold value used when type=MIN (LMIP) or type=MAX (MIP)." ;
  :intensityThresholdDefault 0 .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProjectionVolumeStyle ;
  rdfs:range :projectionVolumeStyleTypeChoices ;
  rdfs:label "If type=MAX then Maximum Intensity Projection (MIP) or Least MIP (LMIP) algorithm is used to generate output color." ;
  :typeDefault "MAX" .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ProtoInstance a owl:Class ;
  rdfs:subClassOf :X3DPrototypeInstance ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "ProtoInstance can override field default values via fieldValue initializations. Non-recursive nested ProtoInstance and ProtoDeclare statements are allowed within a ProtoDeclare." .
:hasFieldValue a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoInstance ;
  rdfs:range :fieldValue ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include fieldValue statements if this ProtoInstance overrides default values in any of the original field declarations." .
:fieldFieldValueHasParentProtoInstance a owl:ObjectProperty ;
  owl:inverseOf :hasFieldValue ;
  rdfs:subPropertyOf :hasParentProtoInstance .
:name a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProtoInstance ;
  rdfs:range xsd:NMTOKEN ;
  rdfs:label "name of the prototype node being instanced." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ProximitySensor a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentalSensorNode ;
  rdfs:label "ProximitySensor generates events when the viewer enters, exits and moves within a region of space (defined by a box)." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
:centerOfRotation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends changed centerOfRotation values, likely caused by user interaction." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:enterTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera enters the box." .
:exitTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera exits the box." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:orientation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFRotation ;
  rdfs:label "Sends rotation event relative to center." .
:position_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ProximitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends translation event relative to center." .
# :size inheritedFrom=X3DEnvironmentalSensorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:QuadSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "QuadSet is a geometry node that defines quadrilaterals." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ReceiverPdu a owl:Class ;
  rdfs:subClassOf :X3DNetworkSensorNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "ReceiverPdu is a networked Protocol Data Unit (PDU) information node that transmits the state of radio frequency (RF) receivers modeled in a simulation." .
:address a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFString ;
  rdfs:label "Multicast network address, or else 'localhost'; Example: 224." ;
  :addressDefault "localhost" .
:applicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Each simulation application that can respond to simulation management PDUs needs to have a unique applicationID." ;
  :applicationIDDefault 0 .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:entityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "EntityID unique ID for entity within that application." ;
  :entityIDDefault 0 .
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic location (specified in current geoSystem coordinates) for children geometry (specified in relative coordinate system, in meters)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:isNetworkReader a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='remote' (listen to network as copy of remote entity)." .
:isNetworkWriter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='master' (output to network as master entity at writeInterval)." .
:isRtpHeaderHeard a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether incoming DIS packets have an RTP header prepended." .
:isStandAlone a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='local' (ignore network but still respond to local events)." .
:multicastRelayHost a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFString ;
  rdfs:label "Fallback server address if multicast not available locally." .
:multicastRelayPort a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Fallback server port if multicast not available locally." ;
  :multicastRelayPortDefault 0 .
:networkMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :networkModeChoices ;
  rdfs:label "Whether this entity is ignoring the network, sending DIS packets to the network, or receiving DIS packets from the network." ;
  :networkModeDefault "standAlone" .
:port a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Multicast network port, for example: 3000." ;
  :portDefault 0 .
:radioID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Identifies a particular radio within a given entity." ;
  :radioIDDefault 0 .
:readInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between read updates, 0 means no reading." ;
  :readIntervalDefault 0.1 .
:receivedPower a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFFloat ;
  rdfs:label "receivedPower indicates radio frequency (RF) power received, in units of decibel-milliwatts (dBm), after applying any propagation loss and antenna gain." ;
  :receivedPowerDefault 0.0 .
:receiverState a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "receiverState indicates if receiver is currently idle or busy via one of these enumerated values: 0 = off, 1 = on but not receiving, or 2 = on and receiving." ;
  :receiverStateDefault 0 .
:rtpHeaderExpected a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether RTP headers are prepended to DIS PDUs." ;
  :rtpHeaderExpectedDefault xsd:false .
:siteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :siteIDDefault 0 .
:timestamp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFTime ;
  rdfs:label "DIS timestamp in X3D units (value 0." .
:transmitterApplicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise transmitterApplicationID is unique for transmitter application at that site." ;
  :transmitterApplicationIDDefault 0 .
:transmitterEntityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise transmitterEntityID is a unique ID for a single entity within that application." ;
  :transmitterEntityIDDefault 0 .
:transmitterRadioID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Identifies a particular radio within a given entity." ;
  :transmitterRadioIDDefault 0 .
:transmitterSiteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise transmitterSiteID of the participating LAN or organization." ;
  :transmitterSiteIDDefault 0 .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
:whichGeometry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Select geometry to render: -1 for no geometry, 0 for text trace, 1 for default geometry, (optional) higher values to render different states." ;
  :whichGeometryDefault 1 .
:writeInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ReceiverPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between write updates, 0 means no writing (sending)." ;
  :writeIntervalDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Rectangle2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Rectangle2D is a geometry node that defines a 2D rectangle in X-Y plane." .
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Rectangle2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "2D dimensions of Rectangle2D." ;
  :sizeDefault ( 2 2 ) .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Rectangle2D ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:false .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:RigidBody a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "RigidBody describes a collection of shapes with a mass distribution that is affected by the physics model." .
:angularDampingFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFFloat ;
  rdfs:label "angularDampingFactor automatically damps a portion of body motion over time." ;
  :angularDampingFactorDefault 0.001 .
:angularVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFVec3f ;
  rdfs:label "angularVelocity sets constant velocity value to object every frame, and reports updates by physics model." ;
  :angularVelocityDefault ( 0 0 0 ) .
:autoDamp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "autoDamp enables/disables angularDampingFactor and linearDampingFactor." ;
  :autoDampDefault xsd:false .
:autoDisable a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "autoDisable toggles operation of disableAngularSpeed, disableLinearSpeed, disableTime." ;
  :autoDisableDefault xsd:false .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:centerOfMass a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFVec3f ;
  rdfs:label "centerOfMass defines local center of mass for physics calculations." ;
  :centerOfMassDefault ( 0 0 0 ) .
:disableAngularSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFFloat ;
  rdfs:label "disableAngularSpeed defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities." ;
  :disableAngularSpeedDefault 0 .
:disableLinearSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFFloat ;
  rdfs:label "disableLinearSpeed defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculation, reducing numeric instabilitiess." ;
  :disableLinearSpeedDefault 0 .
:disableTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFTime ;
  rdfs:label "disableTime defines interval when body becomes at rest and not part of rigid body calculations, reducing numeric instabilities." ;
  :disableTimeDefault 0 .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:finiteRotationAxis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFVec3f ;
  rdfs:label "finiteRotationAxis specifies vector around which the object rotates." ;
  :finiteRotationAxisDefault ( 0 1 0 ) .
:fixed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "fixed indicates whether body is able to move." ;
  :fixedDefault xsd:false .
:forces a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :MFVec3f ;
  rdfs:label "forces defines linear force values applied to the object every frame." .
:hasGeometry a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :X3DNBodyCollidableNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The geometry field is used to connect the body modelled by the physics engine implementation to the real geometry of the scene through the use of collidable nodes." .
:fieldGeometryHasParentRigidBody a owl:ObjectProperty ;
  owl:inverseOf :hasGeometry ;
  rdfs:subPropertyOf :hasParentRigidBody .
:inertia a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFMatrix3f ;
  rdfs:label "inertia matrix defines a 3x2 inertia tensor matrix." ;
  :inertiaDefault ( 1 0 0 0 1 0 0 0 1 ) .
:linearDampingFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFFloat ;
  rdfs:label "linearDampingFactor automatically damps a portion of body motion over time." ;
  :linearDampingFactorDefault 0.001 .
:linearVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFVec3f ;
  rdfs:label "linearVelocity sets constant velocity value to object every frame, and reports updates by physics model." ;
  :linearVelocityDefault ( 0 0 0 ) .
:mass a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFFloat ;
  rdfs:label "mass of the body in kilograms." ;
  :massDefault 1 .
:hasMassDensityModel a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range  [ owl:unionOf (:Sphere :Box :Cone) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The massDensityModel field is used to describe the geometry type and dimensions used to calculate the mass density in the physics model." .
:fieldMassDensityModelHasParentRigidBody a owl:ObjectProperty ;
  owl:inverseOf :hasMassDensityModel ;
  rdfs:subPropertyOf :hasParentRigidBody .
:orientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFRotation ;
  rdfs:label "orientation sets body direction in world space, then reports physics updates." ;
  :orientationDefault ( 0 0 1 0 ) .
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFVec3f ;
  rdfs:label "position sets body location in world space, then reports physics updates." ;
  :positionDefault ( 0 0 0 ) .
:torques a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :MFVec3f ;
  rdfs:label "torques defines rotational force values applied to the object every frame." .
:useFiniteRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "useFiniteRotation enables/disables higher-resolution, higher-cost computational method for calculating rotations." ;
  :useFiniteRotationDefault xsd:false .
:useGlobalGravity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBody ;
  rdfs:range :SFBool ;
  rdfs:label "useGlobalGravity indicates whether this particular body is influenced by parent RigidBodyCollection's gravity setting." ;
  :useGlobalGravityDefault xsd:true .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:RigidBodyCollection a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "RigidBodyCollection represents a system of bodies that interact within a single physics model." .
:autoDisable a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFBool ;
  rdfs:label "autoDisable toggles operation of disableAngularSpeed, disableLinearSpeed, disableTime." ;
  :autoDisableDefault xsd:false .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasBodies a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :RigidBody ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Collection of top-level nodes that comprise a set of bodies evaluated as a single set of interactions." .
:fieldBodiesHasParentRigidBodyCollection a owl:ObjectProperty ;
  owl:inverseOf :hasBodies ;
  rdfs:subPropertyOf :hasParentRigidBodyCollection .
:hasCollider a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :CollisionCollection ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The collider field associates a collision collection with this rigid body collection allowing seamless updates and integration without the need to use the X3D event model." .
:fieldColliderHasParentRigidBodyCollection a owl:ObjectProperty ;
  owl:inverseOf :hasCollider ;
  rdfs:subPropertyOf :hasParentRigidBodyCollection .
:constantForceMix a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "constantForceMix modifies damping calculations by violating normal constraints while applying small, constant forces in those calculations." ;
  :constantForceMixDefault 0.0001 .
:contactSurfaceThickness a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "contactSurfaceThickness defines how far bodies may interpenetrate after a collision, allowing simulation of softer bodies that deform somewhat during collision." ;
  :contactSurfaceThicknessDefault 0 .
:disableAngularSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "disableAngularSpeed defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculations, reducing numeric instabilities." ;
  :disableAngularSpeedDefault 0 .
:disableLinearSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "disableLinearSpeed defines lower-limit tolerance value when body is considered at rest and not part of rigid body calculation, reducing numeric instabilitiess." ;
  :disableLinearSpeedDefault 0 .
:disableTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFTime ;
  rdfs:label "disableTime defines interval when body becomes at rest and not part of rigid body calculations, reducing numeric instabilities." ;
  :disableTimeDefault 0 .
:enabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFBool ;
  rdfs:label "Enables/disables node operation." ;
  :enabledDefault xsd:true .
:errorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "errorCorrection describes how quickly intersection errors due to floating-point inaccuracies are resolved (0=no correction, 1=all corrected in single step)." ;
  :errorCorrectionDefault 0.8 .
:gravity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFVec3f ;
  rdfs:label "gravity indicates direction and strength of local gravity vector for this collection of bodies (units m/sec^2)." ;
  :gravityDefault ( 0 -9.8 0 ) .
:iterations a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFInt32 ;
  rdfs:label "iterations controls number of iterations performed over collectioned joints and bodies during each evaluation." ;
  :iterationsDefault 10 .
:hasJoints a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :X3DRigidJointNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The joints field is used to register all joints between bodies contained in this collection." .
:fieldJointsHasParentRigidBodyCollection a owl:ObjectProperty ;
  owl:inverseOf :hasJoints ;
  rdfs:subPropertyOf :hasParentRigidBodyCollection .
:maxCorrectionSpeed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFFloat ;
  rdfs:label "or -1, maxCorrectionSpeed." ;
  :maxCorrectionSpeedDefault -1 .
:preferAccuracy a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :SFBool ;
  rdfs:label "preferAccuracy provides hint for performance preference: higher accuracy or faster computational speed." ;
  :preferAccuracyDefault xsd:false .
:hasSet_contacts a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :RigidBodyCollection ;
  rdfs:range :Contact ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "set_contacts input field for Contact nodes provides per-frame information about contacts between bodies." .
:fieldSet_contactsHasParentRigidBodyCollection a owl:ObjectProperty ;
  owl:inverseOf :hasSet_contacts ;
  rdfs:subPropertyOf :hasParentRigidBodyCollection .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ScalarChaser a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "ScalarChaser generates a series of single floating-point values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ScalarChaser ;
  rdfs:range :SFFloat ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault 0 .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ScalarChaser ;
  rdfs:range :SFFloat ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault 0 .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ScalarChaser ;
  rdfs:range :SFFloat ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ScalarChaser ;
  rdfs:range :SFFloat ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ScalarChaser ;
  rdfs:range :SFFloat ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ScalarDamper a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "ScalarDamper generates a series of floating-point values that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ScalarDamper ;
  rdfs:range :SFFloat ;
  rdfs:label "Initial destination value for this node." ;
  :initialDestinationDefault 0 .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ScalarDamper ;
  rdfs:range :SFFloat ;
  rdfs:label "Initial starting value for this node." ;
  :initialValueDefault 0 .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ScalarDamper ;
  rdfs:range :SFFloat ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :ScalarDamper ;
  rdfs:range :SFFloat ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ScalarDamper ;
  rdfs:range :SFFloat ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ScalarInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "ScalarInterpolator generates piecewise-linear SFFloat values." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScalarInterpolator ;
  rdfs:range :MFFloat ;
  rdfs:label "Output values for linear interpolation, each corresponding to an input-fraction value in the key array." .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :ScalarInterpolator ;
  rdfs:range :SFFloat ;
  rdfs:label "Linearly interpolated output value determined by current key time and corresponding keyValue pair." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ScreenFontStyle a owl:Class ;
  rdfs:subClassOf :X3DFontStyleNode ;
  rdfs:label "ScreenFontStyle is an X3DFontStyleNode defines the size, family, justification, and other styles used within a screen layout." .
:family a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :fontFamilyValues ; # alternate enumeration values allowed, baseType MFString ;
  rdfs:label "Array of quoted font family names in preference order, browsers use the first supported family." ;
  :familyDefault ( "SERIF" ) .
:horizontal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is horizontal (true) or vertical (false)." ;
  :horizontalDefault xsd:true .
:justify a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :justifyChoices ;
  rdfs:label "The justify field determines horizontal and vertical alignment of text layout, relative to the origin of the object coordinate system." ;
  :justifyDefault ( "BEGIN" ) .
:language a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFString ;
  rdfs:label "Language codes consist of a primary code and a (possibly empty) series of subcodes." .
:leftToRight a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is left-to-right (true) or right-to-left (false)." ;
  :leftToRightDefault xsd:true .
:pointSize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "pointSize field specifies the size of text in points." ;
  :pointSizeDefault 12.0 .
:spacing a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "Adjustment factor for line spacing between adjacent lines of text." ;
  :spacingDefault 1.0 .
:topToBottom a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether text direction is top-to-bottom (true) or bottom-to-top (false)." ;
  :topToBottomDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:styleSelection a owl:DatatypeProperty ; ### renamed to avoid naming collision with CSS style attribute
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ScreenFontStyle ;
  rdfs:range :fontStyleChoices ;
  rdfs:label "Pick one of four values for text style (PLAIN | BOLD | ITALIC | BOLDITALIC). Renamed from original 'style' as 'styleSelection' to avoid name collision with CSS style attribute." ;
  :styleSelectionDefault "PLAIN" .

:ScreenGroup a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "ScreenGroup is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Script a owl:Class ;
  rdfs:subClassOf :X3DScriptNode ;
  rdfs:label "Script contains author-programmed event behaviors for a scene." .
# :autoRefresh inheritedFrom=X3DScriptNode with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DScriptNode with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DScriptNode with accessType=inputOutput, type=SFString
:directOutput a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Script ;
  rdfs:range :SFBool ;
  rdfs:label "Set directOutput true if Script has field reference(s) of type SFNode/MFNode, and also uses direct access to modify attributes of a referenced node in the Scene." ;
  :directOutputDefault xsd:false .
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Script ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in this Script node." .
:fieldFieldHasParentScript a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentScript .
# :load inheritedFrom=X3DScriptNode with accessType=inputOutput, type=SFBool, default=true
:mustEvaluate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Script ;
  rdfs:range :SFBool ;
  rdfs:label "If mustEvaluate false, then the X3D player may delay sending input events to Script until output events are needed." ;
  :mustEvaluateDefault xsd:false .
:sourceCode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Script ;
  rdfs:range xsd:string ;
  rdfs:label "Embedded scripting source code can be contained within the parent node as a plain-text CDATA block, without requiring escaping of special characters." .
# :url inheritedFrom=X3DScriptNode with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SegmentedVolumeData a owl:Class ;
  rdfs:subClassOf :X3DVolumeDataNode ;
  rdfs:label "SegmentedVolumeData displays a segmented voxel dataset with different RenderStyle nodes." .
# :bboxCenter inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :dimensions inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFVec3f, default=1 1 1
:hasRenderStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SegmentedVolumeData ;
  rdfs:range :X3DVolumeRenderStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Multiple contained X3DVolumeRenderStyleNode nodes corresponding to each isosurface that define specific rendering technique for this volumetric object." .
:fieldRenderStyleHasParentSegmentedVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasRenderStyle ;
  rdfs:subPropertyOf :hasParentSegmentedVolumeData .
:segmentEnabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SegmentedVolumeData ;
  rdfs:range :MFBool ;
  rdfs:label "Array of boolean values that indicates whether to draw each segment, with indices corresponding to the segment identifier." .
:hasSegmentIdentifiers a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SegmentedVolumeData ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) holds component texture that provides corresponding segment identifier." .
:fieldSegmentIdentifiersHasParentSegmentedVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasSegmentIdentifiers ;
  rdfs:subPropertyOf :hasParentSegmentedVolumeData .
# :visible inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=true
:hasVoxels a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SegmentedVolumeData ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) that provides raw voxel information utilized by corresponding rendering styles." .
:fieldVoxelsHasParentSegmentedVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasVoxels ;
  rdfs:subPropertyOf :hasParentSegmentedVolumeData .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ShadedVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "All fields fully supported except shadows supported with at least Phong shading at level 3. All fields fully supported with at least Phong shading and Henyey-Greenstein phase function, shadows fully supported at level 4." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:lighting a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShadedVolumeStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether rendering calculates and applies shading effects to visual output." ;
  :lightingDefault xsd:false .
:hasMaterial a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShadedVolumeStyle ;
  rdfs:range :X3DMaterialNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Colour and opacity is determined based on whether a value has been specified for the material field." .
:fieldMaterialHasParentShadedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasMaterial ;
  rdfs:subPropertyOf :hasParentShadedVolumeStyle .
:phaseFunction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ShadedVolumeStyle ;
  rdfs:range :phaseFunctionValues ; # alternate enumeration values allowed, baseType SFString ;
  rdfs:label "define scattering model for implementations using global illumination (NONE or Henyey-Greenstein phase function)." ;
  :phaseFunctionDefault "Henyey-Greenstein" .
:shadows a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShadedVolumeStyle ;
  rdfs:range :SFBool ;
  rdfs:label "Whether rendering calculates and applies shadows to visual output (using global illumination model)." ;
  :shadowsDefault xsd:false .
:hasSurfaceNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShadedVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The surfaceNormals field contains a 3D texture with at least three component values." .
:fieldSurfaceNormalsHasParentShadedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasSurfaceNormals ;
  rdfs:subPropertyOf :hasParentShadedVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ShaderPart a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:label "ShaderPart can contain a CDATA section of plain-text source code." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:sourceCode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShaderPart ;
  rdfs:range xsd:string ;
  rdfs:label "Embedded scripting source code can be contained within the parent node as a plain-text CDATA block, without requiring escaping of special characters." .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ShaderPart ;
  rdfs:range :shaderPartTypeValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "type indicates whether this ShaderProgram is a vertex or fragment (pixel) shader." ;
  :typeDefault "VERTEX" .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ShaderProgram a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:subClassOf :X3DUrlObject ;
  rdfs:subClassOf :X3DProgrammableShaderObject ;
  rdfs:label "ShaderProgram can contain field declarations and a CDATA section of plain-text source code." .
# :autoRefresh inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=0
# :autoRefreshTimeLimit inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFTime, default=3600
# :description inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFString
:hasField a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShaderProgram ;
  rdfs:range :field ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Include a field statement for each field declaration in the ShaderProgram node." .
:fieldFieldHasParentShaderProgram a owl:ObjectProperty ;
  owl:inverseOf :hasField ;
  rdfs:subPropertyOf :hasParentShaderProgram .
# :load inheritedFrom=X3DUrlObject with accessType=inputOutput, type=SFBool, default=true
:sourceCode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ShaderProgram ;
  rdfs:range xsd:string ;
  rdfs:label "Embedded scripting source code can be contained within the parent node as a plain-text CDATA block, without requiring escaping of special characters." .
:type a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :ShaderProgram ;
  rdfs:range :shaderPartTypeValues ; # alternate enumeration values allowed, baseType xs:NMTOKEN ;
  rdfs:label "type indicates whether this ShaderProgram is a vertex or fragment (pixel) shader." ;
  :typeDefault "VERTEX" .
# :url inheritedFrom=X3DUrlObject with accessType=inputOutput, type=MFString
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Shape a owl:Class ;
  rdfs:subClassOf :X3DShapeNode ;
  rdfs:label "Shape can appear under any grouping node." .
# :appearance inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFNode, default=NULL
# :bboxCenter inheritedFrom=X3DShapeNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DShapeNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :castShadow inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=true
# :geometry inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFNode, default=NULL
# :visible inheritedFrom=X3DShapeNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SignalPdu a owl:Class ;
  rdfs:subClassOf :X3DNetworkSensorNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "SignalPdu is a networked Protocol Data Unit (PDU) information node that communicates the transmission of voice, audio or other data modeled in a simulation." .
:address a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFString ;
  rdfs:label "Multicast network address, or else 'localhost'." ;
  :addressDefault "localhost" .
:applicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Each simulation application that can respond to simulation management PDUs needs to have a unique applicationID." ;
  :applicationIDDefault 0 .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:data a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :MFInt32 ;
  rdfs:label "Holds audio or digital data conveyed by the radio transmission." .
:dataLength a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "number of bits of digital voice audio or digital data being sent in the Signal PDU." ;
  :dataLengthDefault 0 .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:encodingScheme a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "designates both Encoding Class and Encoding Type." ;
  :encodingSchemeDefault 0 .
:entityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "EntityID unique ID for entity within that application." ;
  :entityIDDefault 0 .
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic location (specified in current geoSystem coordinates) for children geometry (specified in relative coordinate system, in meters)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:isNetworkReader a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='remote' (listen to network as copy of remote entity)." .
:isNetworkWriter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='master' (output to network as master entity at writeInterval)." .
:isRtpHeaderHeard a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether incoming DIS packets have an RTP header prepended." .
:isStandAlone a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='local' (ignore network but still respond to local events)." .
:multicastRelayHost a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFString ;
  rdfs:label "Fallback server address if multicast not available locally." .
:multicastRelayPort a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Fallback server port if multicast not available locally." ;
  :multicastRelayPortDefault 0 .
:networkMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :networkModeChoices ;
  rdfs:label "Whether this entity is ignoring the network, sending DIS packets to the network, or receiving DIS packets from the network." ;
  :networkModeDefault "standAlone" .
:port a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Multicast network port, for example: 3000." ;
  :portDefault 0 .
:radioID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Identifies a particular radio within a given entity." ;
  :radioIDDefault 0 .
:readInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between read updates, 0 means no reading." ;
  :readIntervalDefault 0.1 .
:rtpHeaderExpected a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether RTP headers are prepended to DIS PDUs." ;
  :rtpHeaderExpectedDefault xsd:false .
:sampleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "sampleRate gives either (1) sample rate in samples per second if Encoding Class is encoded audio, or (2) data rate in bits per second for data transmissions." ;
  :sampleRateDefault 0 .
:samples a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Number of samples in the PDU if the Encoding Class is encoded voice, otherwise the field is set to zero." ;
  :samplesDefault 0 .
:siteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :siteIDDefault 0 .
:tdlType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Tactical Data Link (TDL) type as an enumerated value when the Encoding Class is voice, raw binary, application-specific, or database index representation of a TDL message." ;
  :tdlTypeDefault 0 .
:timestamp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFTime ;
  rdfs:label "DIS timestamp in X3D units (value 0." .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
:whichGeometry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Select geometry to render: -1 for no geometry, 0 for text trace, 1 for default geometry, (optional) higher values to render different states." ;
  :whichGeometryDefault 1 .
:writeInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SignalPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between write updates, 0 means no writing (sending)." ;
  :writeIntervalDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SilhouetteEnhancementVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "SilhouetteEnhancementVolumeStyle specifies that volumetric data is rendered with silhouette enhancement." .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:silhouetteBoundaryOpacity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SilhouetteEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "amount of the silhouette enhancement to use." ;
  :silhouetteBoundaryOpacityDefault 0 .
:silhouetteRetainedOpacity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SilhouetteEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "scaling of non-silhouette regions." ;
  :silhouetteRetainedOpacityDefault 1 .
:silhouetteSharpness a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SilhouetteEnhancementVolumeStyle ;
  rdfs:range :SFFloat ;
  rdfs:label "power function to control sharpness of the silhouette." ;
  :silhouetteSharpnessDefault 0.5 .
:hasSurfaceNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SilhouetteEnhancementVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The surfaceNormals field contains a 3D texture with at least three component values." .
:fieldSurfaceNormalsHasParentSilhouetteEnhancementVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasSurfaceNormals ;
  rdfs:subPropertyOf :hasParentSilhouetteEnhancementVolumeStyle .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SingleAxisHingeJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "SingleAxisHingeJoint has single axis about which to rotate, similar to a traditional door hinge. Contains two RigidBody nodes (containerField values body1, body2)." .
:anchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "anchorPoint is joint center, specified in world coordinates." ;
  :anchorPointDefault ( 0 0 0 ) .
:angle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat .
:angleRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat .
:axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis defines vector of joint connection between body1 and body2." ;
  :axisDefault ( 0 1 0 ) .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body1AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFVec3f .
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body2AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFVec3f .
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
:maxAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "maxAngle is maximum rotation angle for hinge." ;
  :maxAngleDefault 3.141592653 .
:minAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "minAngle is minimum rotation angle for hinge." ;
  :minAngleDefault -3.141592653 .
:stopBounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stopBounce is velocity factor for bounce back once stop point is reached." ;
  :stopBounceDefault 0 .
:stopErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SingleAxisHingeJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stopErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stopErrorCorrectionDefault 0.8 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SliderJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "SliderJoint constrains all movement between body1 and body2 along a single axis. Contains two RigidBody nodes (containerField values body1, body2)." .
:axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis is normalized vector specifying direction of motion." ;
  :axisDefault ( 0 1 0 ) .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
:maxSeparation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "maxSeparation is maximum separation distance between the two bodies." ;
  :maxSeparationDefault 1 .
:minSeparation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "minSeparation is minimum separation distance between the two bodies." ;
  :minSeparationDefault 0 .
:separation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "separation indicates final separation distance between the two bodies." .
:separationRate a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "separationRate indicates change in separation distance over time between the two bodies." .
:sliderForce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "sliderForce value is used to apply a force (specified in force base units) along the axis of the slider in equal and opposite directions to the two bodies." ;
  :sliderForceDefault 0 .
:stopBounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stopBounce is velocity factor for bounce back once stop point is reached." ;
  :stopBounceDefault 0 .
:stopErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SliderJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stopErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stopErrorCorrectionDefault 1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Sound a owl:Class ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "The Sound node controls the 3D spatialization of sound playback by a child AudioClip or MovieTexture node." .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFVec3f ;
  rdfs:label "direction of sound axis, relative to local coordinate system." ;
  :directionDefault ( 0 0 1 ) .
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
:intensity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Factor [0,1] adjusting loudness (decibels) of emitted sound." ;
  :intensityDefault 1 .
:location a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of sound ellipsoid center, relative to local coordinate system." ;
  :locationDefault ( 0 0 0 ) .
:maxBack a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Outer (zero loudness)ellipsoid distance along back direction." ;
  :maxBackDefault 10 .
:maxFront a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Outer (zero loudness)ellipsoid distance along front direction." ;
  :maxFrontDefault 10 .
:minBack a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Inner (full loudness) ellipsoid distance along back direction." ;
  :minBackDefault 1 .
:minFront a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Inner (full loudness) ellipsoid distance along front direction." ;
  :minFrontDefault 1 .
:priority a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :SFFloat ;
  rdfs:label "Player hint [0,1] if needed to choose which sounds to play." ;
  :priorityDefault 0 .
:hasSource a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sound ;
  rdfs:range :X3DSoundSourceNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "sound source for the Sound node, either an AudioClip node or a MovieTexture node." .
:fieldSourceHasParentSound a owl:ObjectProperty ;
  owl:inverseOf :hasSource ;
  rdfs:subPropertyOf :hasParentSound .
:spatialize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Sound ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to spatialize sound playback relative to viewer." ;
  :spatializeDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SpatialSound a owl:Class ;
  rdfs:subClassOf :X3DSoundNode ;
  rdfs:label "The SpatialSound node controls the 3D spatialization of sound playback by a child AudioClip or MovieTexture node." .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentSpatialSound .
:coneInnerAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "coneInnerAngle is centered along direction and defines the inner conical volume, inside of which no source gain reduction occurs." ;
  :coneInnerAngleDefault 6.2832 .
:coneOuterAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "coneOuterAngle is centered along direction and defines an outer conical volume, within which the sound gain decreases linearly from full gain to coneOuterGain." ;
  :coneOuterAngleDefault 6.2832 .
:coneOuterGain a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "coneOuterGain is minimum gain value found outside coneOuterAngle." ;
  :coneOuterGainDefault 0 .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFVec3f ;
  rdfs:label "direction of sound axis, relative to local coordinate system." ;
  :directionDefault ( 0 0 1 ) .
:distanceModel a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :distanceModelChoices ;
  rdfs:label "distanceModel determines how field specifies which algorithm to use for sound attenuation, corresponding to distance between an audio source and a listener, as it moves away from the listener." ;
  :distanceModelDefault "inverse" .
:dopplerEnabled a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFBool ;
  rdfs:label "dopplerEnabled enables/disables whether real-time Doppler effects (due to relation motion between sources and listeners) are computed by browser between virtual sound sources and active listening locations, then applied to received frequency at active listening locations." ;
  :dopplerEnabledDefault xsd:false .
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
:enableHRTF a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFBool ;
  rdfs:label "enableHRTF enables/disables Head Related Transfer Function (HRTF) auralization, if available." ;
  :enableHRTFDefault xsd:false .
:gain a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "The gain field is a factor that represents the amount of linear amplification to apply to the output of the node." ;
  :gainDefault 1 .
:intensity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "Factor [0,1] adjusting loudness (decibels) of emitted sound." ;
  :intensityDefault 1 .
:location a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of sound ellipsoid center, relative to local coordinate system." ;
  :locationDefault ( 0 0 0 ) .
:maxDistance a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "maxDistance is the maximum distance where sound is renderable between source and listener, after which no reduction in sound volume occurs." ;
  :maxDistanceDefault 10000 .
:priority a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "Player hint [0,1] if needed to choose which sounds to play." ;
  :priorityDefault 0 .
:referenceDistance a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "referenceDistance for reducing volume as source moves further from the listener." ;
  :referenceDistanceDefault 1 .
:rolloffFactor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFFloat ;
  rdfs:label "rolloffFactor indicates how quickly volume is reduced as source moves further from listener." ;
  :rolloffFactorDefault 1 .
:spatialize a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SpatialSound ;
  rdfs:range :SFBool ;
  rdfs:label "Whether to spatialize sound playback relative to viewer." ;
  :spatializeDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Sphere a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Sphere is a geometry node, representing a perfectly round geometrical object that is the surface of a completely round ball." .
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :Sphere ;
  rdfs:range :SFFloat ;
  rdfs:label "Size in meters." ;
  :radiusDefault 1 .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Sphere ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:true .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SphereSensor a owl:Class ;
  rdfs:subClassOf :X3DDragSensorNode ;
  rdfs:label "SphereSensor converts pointing device motion into a spherical rotation about the origin of the local coordinate system." .
# :autoOffset inheritedFrom=X3DDragSensorNode with accessType=inputOutput, type=SFBool, default=true
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
:offset a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SphereSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "Sends event and remembers last value sensed." ;
  :offsetDefault ( 0 1 0 0 ) .
:rotation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SphereSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "rotation_changed events equal sum of relative bearing changes plus offset value." .
# :trackPoint_changed inheritedFrom=X3DDragSensorNode with accessType=outputOnly, type=SFVec3f
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SplinePositionInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "SplinePositionInterpolator performs non-linear interpolation among paired lists of 3-tuple values and velocities to produce an SFVec3f value_changed output event." .
:closed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SplinePositionInterpolator ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not the curve is closed (i." ;
  :closedDefault xsd:false .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:keyVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator ;
  rdfs:range :MFVec3f ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:normalizeVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator ;
  rdfs:range :SFBool ;
  rdfs:label "normalizeVelocity field specifies whether the velocity vectors are normalized to produce smooth speed transitions, or transformed into tangency vectors." ;
  :normalizeVelocityDefault xsd:false .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SplinePositionInterpolator ;
  rdfs:range :SFVec3f ;
  rdfs:label "Nonlinearly interpolated output value computed by using current time fraction along with corresponding key, keyValue and keyVelocity values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SplinePositionInterpolator2D a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "SplinePositionInterpolator2D performs non-linear interpolation among paired lists of 2-tuple values and velocities to produce an SFVec2f value_changed output event." .
:closed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SplinePositionInterpolator2D ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not the curve is closed (i." ;
  :closedDefault xsd:false .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:keyVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:normalizeVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplinePositionInterpolator2D ;
  rdfs:range :SFBool ;
  rdfs:label "normalizeVelocity field specifies whether the velocity vectors are normalized to produce smooth speed transitions, or transformed into tangency vectors." ;
  :normalizeVelocityDefault xsd:false .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SplinePositionInterpolator2D ;
  rdfs:range :SFVec2f ;
  rdfs:label "Nonlinearly interpolated output value computed by using current time fraction along with corresponding key, keyValue and keyVelocity values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SplineScalarInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "SplineScalarInterpolator performs non-linear interpolation among paired lists of float values and velocities to produce an SFFloat value_changed output event." .
:closed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SplineScalarInterpolator ;
  rdfs:range :SFBool ;
  rdfs:label "Whether or not the curve is closed (i." ;
  :closedDefault xsd:false .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplineScalarInterpolator ;
  rdfs:range :MFFloat ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:keyVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplineScalarInterpolator ;
  rdfs:range :MFFloat ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:normalizeVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SplineScalarInterpolator ;
  rdfs:range :SFBool ;
  rdfs:label "normalizeVelocity field specifies whether the velocity vectors are normalized to produce smooth speed transitions, or transformed into tangency vectors." ;
  :normalizeVelocityDefault xsd:false .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SplineScalarInterpolator ;
  rdfs:range :SFFloat ;
  rdfs:label "Nonlinearly interpolated output value computed by using current time fraction along with corresponding key, keyValue and keyVelocity values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SpotLight a owl:Class ;
  rdfs:subClassOf :X3DLightNode ;
  rdfs:label "Linear attenuation may occur at level 2, full support at level 3." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
:attenuation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Constant, linear-distance and squared-distance dropoff factors as radial distance increases from the source." ;
  :attenuationDefault ( 1 0 0 ) .
:beamWidth a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFFloat ;
  rdfs:label "Inner conical solid angle (in radians) where light source has uniform full intensity." ;
  :beamWidthDefault 0.589049 .
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
:cutOffAngle a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFFloat ;
  rdfs:label "Outer conical solid angle (in radians) where light source intensity becomes zero." ;
  :cutOffAngleDefault 1.570796 .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Orientation vector of light relative to local coordinate system." ;
  :directionDefault ( 0 0 -1 ) .
:global a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFBool ;
  rdfs:label "Global lights illuminate all objects within their volume of lighting influence." ;
  :globalDefault xsd:true .
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
:location a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position of light relative to local coordinate system." ;
  :locationDefault ( 0 0 0 ) .
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
:radius a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SpotLight ;
  rdfs:range :SFFloat ;
  rdfs:label "Maximum effective distance of light relative to local light position, affected by ancestor scaling." ;
  :radiusDefault 100 .
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SquadOrientationInterpolator a owl:Class ;
  rdfs:subClassOf :X3DInterpolatorNode ;
  rdfs:label "SquadOrientationInterpolator performs non-linear interpolation among paired lists of rotation values to produce an SFRotation value_changed output event." .
# :key inheritedFrom=X3DInterpolatorNode with accessType=inputOutput, type=MFFloat
:keyValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SquadOrientationInterpolator ;
  rdfs:range :MFRotation ;
  rdfs:label "Output values for nonlinear interpolation, each corresponding to an input-fraction value in the key array." .
:normalizeVelocity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :SquadOrientationInterpolator ;
  rdfs:range :SFBool ;
  rdfs:label "normalizeVelocity field specifies whether the velocity vectors are normalized to produce smooth speed transitions, or transformed into tangency vectors." ;
  :normalizeVelocityDefault xsd:false .
# :set_fraction inheritedFrom=X3DInterpolatorNode with accessType=inputOnly, type=SFFloat
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :SquadOrientationInterpolator ;
  rdfs:range :SFRotation ;
  rdfs:label "Nonlinearly interpolated output value computed by using current time fraction along with corresponding key, keyValue and keyVelocity values." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:StaticGroup a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "StaticGroup is similar to Group node but does not allow access to children after creation time." .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :StaticGroup ;
  rdfs:range :X3DChildNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Grouping nodes contain an ordered list of children nodes." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentStaticGroup .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:StreamAudioDestination a owl:Class ;
  rdfs:subClassOf :X3DSoundDestinationNode ;
  rdfs:label "StreamAudioDestination node represents the final audio destination via a media stream." .
# :channelCount inheritedFrom=X3DSoundDestinationNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StreamAudioDestination ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentStreamAudioDestination .
# :description inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSoundNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DSoundDestinationNode with accessType=outputOnly, type=SFBool
# :mediaDeviceID inheritedFrom=X3DSoundDestinationNode with accessType=inputOutput, type=SFString
:streamIdentifier a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StreamAudioDestination ;
  rdfs:range :SFString ;
  rdfs:label "Stream identification TBD Hint: W3C Media Capture and Streams https://www." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:StreamAudioSource a owl:Class ;
  rdfs:subClassOf :X3DSoundSourceNode ;
  rdfs:label "StreamAudioSource operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs." .
:channelCountMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StreamAudioSource ;
  rdfs:range :channelCountModeChoices ;
  rdfs:label "channelCountMode determines how individual channels are counted when up-mixing and down-mixing connections to any inputs." ;
  :channelCountModeDefault "max" .
:channelInterpretation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StreamAudioSource ;
  rdfs:range :channelInterpretationChoices ;
  rdfs:label "channelInterpretation determines how individual channels are treated when up-mixing and down-mixing connections to any inputs." ;
  :channelInterpretationDefault "speakers" .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundSourceNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:streamIdentifier a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StreamAudioSource ;
  rdfs:range :SFString ;
  rdfs:label "Stream identification TBD Hint: W3C Media Capture and Streams https://www." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:StringSensor a owl:Class ;
  rdfs:subClassOf :X3DKeyDeviceSensorNode ;
  rdfs:label "StringSensor generates events as the user presses keys on the keyboard." .
:deletionAllowed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :StringSensor ;
  rdfs:range :SFBool ;
  rdfs:label "If deletionAllowed is true, then previously entered character in enteredText can be removed." ;
  :deletionAllowedDefault xsd:true .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:enteredText a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :StringSensor ;
  rdfs:range :SFString ;
  rdfs:label "Events generated as character-producing keys are pressed on keyboard." .
:finalText a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :StringSensor ;
  rdfs:range :SFString ;
  rdfs:label "Events generated when sequence of keystrokes matches keys in terminationText string when this condition occurs, enteredText is moved to finalText and enteredText is set to empty string." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:SurfaceEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "SurfaceEmitter generates particles from the surface of an object." .
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SurfaceEmitter ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices are applied to contained Coordinate values in order to define randomly generated initial geometry of the particles." ;
  :coordIndexDefault ( -1 ) .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:set_coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :SurfaceEmitter ;
  rdfs:range :MFInt32 .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
:hasSurface a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :SurfaceEmitter ;
  rdfs:range :X3DGeometryNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The geometry node provides geometry used as the emitting surface." .
:fieldSurfaceHasParentSurfaceEmitter a owl:ObjectProperty ;
  owl:inverseOf :hasSurface ;
  rdfs:subPropertyOf :hasParentSurfaceEmitter .
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Switch a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "Switch is a Grouping node that only renders one (or zero) child at a time." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
:whichChoice a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Switch ;
  rdfs:range :SFInt32 ;
  rdfs:label "Index of active child choice, counting from 0." ;
  :whichChoiceDefault -1 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TexCoordChaser2D a owl:Class ;
  rdfs:subClassOf :X3DChaserNode ;
  rdfs:label "TexCoordChaser2D generates a series of single floating-point values that progressively change from initial value to destination value." .
# :duration inheritedFrom=X3DChaserNode with accessType=initializeOnly, type=SFTime, default=1
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TexCoordChaser2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Initial destination value for this node." .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TexCoordChaser2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Initial starting value for this node." .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :TexCoordChaser2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :TexCoordChaser2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "set_value resets current value of this node." .
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TexCoordChaser2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TexCoordDamper2D a owl:Class ;
  rdfs:subClassOf :X3DDamperNode ;
  rdfs:label "TexCoordDamper2D generates a series of 2D floating-point arrays that progressively change from initial value to destination value." .
:initialDestination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TexCoordDamper2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Initial destination value for this node." .
:initialValue a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TexCoordDamper2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Initial starting value for this node." .
# :isActive inheritedFrom=X3DFollowerNode with accessType=outputOnly, type=SFBool
# :order inheritedFrom=X3DDamperNode with accessType=initializeOnly, type=SFInt32, default=3
:set_destination a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :TexCoordDamper2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "set_destination resets destination value of this node." .
:set_value a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :TexCoordDamper2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "set_value resets current value of this node." .
# :tau inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFTime, default=0.3
# :tolerance inheritedFrom=X3DDamperNode with accessType=inputOutput, type=SFFloat, default=-1
:value_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TexCoordDamper2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "Computed output value that approaches within tolerance of destination value, as determined by elapsed time, order and tau." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Text a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "Text is a 2D (flat) geometry node that can contain multiple lines of string values." .
:hasFontStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Text ;
  rdfs:range :X3DFontStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The fontStyle field can contain a FontStyle or ScreenFontStyle node defining size, family, and style for presented text." .
:fieldFontStyleHasParentText a owl:ObjectProperty ;
  owl:inverseOf :hasFontStyle ;
  rdfs:subPropertyOf :hasParentText .
:length a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Text ;
  rdfs:range :MFFloat ;
  rdfs:label "Array of length values for each text string in the local coordinate system." .
:lineBounds a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :Text ;
  rdfs:range :MFVec2f ;
  rdfs:label "Array of 2D bounding box values for each line of text in the local coordinate system." .
:maxExtent a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Text ;
  rdfs:range :SFFloat ;
  rdfs:label "Limits/compresses all text strings if max string length is longer than maxExtent, as measured in local coordinate system." ;
  :maxExtentDefault 0.0 .
:origin a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :Text ;
  rdfs:range :SFVec3f ;
  rdfs:label "origin of the text local coordinate system, in units of the coordinate system in which the Text node is embedded." .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Text ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:false .
:string a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Text ;
  rdfs:range :MFString ;
  rdfs:label "Single or multiple string values to present as Text." .
:textBounds a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :Text ;
  rdfs:range :SFVec2f ;
  rdfs:label "2D bounding box value for all lines of text in the local coordinate system." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureBackground a owl:Class ;
  rdfs:subClassOf :X3DBackgroundNode ;
  rdfs:label "TextureBackground simulates ground and sky, using vertical arrays of wraparound color values, TextureBackground can also provide backdrop texture images on all six sides." .
:hasBackTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldBackTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasBackTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:hasBottomTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldBottomTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasBottomTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
:hasFrontTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldFrontTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasFrontTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
# :groundAngle inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFFloat
# :groundColor inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFColor
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
:hasLeftTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldLeftTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasLeftTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
:hasRightTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldRightTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasRightTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
# :skyAngle inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFFloat
# :skyColor inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=MFColor, default=0 0 0
:hasTopTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureBackground ;
  rdfs:range  [ owl:unionOf (:X3DTexture2DNode :MultiTexture) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Parent TextureBackground element can contain up to six image nodes (ImageTexture PixelTexture MovieTexture MultiTexture)." .
:fieldTopTextureHasParentTextureBackground a owl:ObjectProperty ;
  owl:inverseOf :hasTopTexture ;
  rdfs:subPropertyOf :hasParentTextureBackground .
# :transparency inheritedFrom=X3DBackgroundNode with accessType=inputOutput, type=SFFloat, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureCoordinate a owl:Class ;
  rdfs:subClassOf :X3DSingleTextureCoordinateNode ;
  rdfs:label "TextureCoordinate specifies 2D (s,t) texture-coordinate points, used by vertex-based geometry nodes (such as IndexedFaceSet or ElevationGrid) to map textures to vertices (and patches to NURBS surfaces)." .
# :mapping inheritedFrom=X3DSingleTextureCoordinateNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureCoordinate ;
  rdfs:range :MFVec2f ;
  rdfs:label "pairs of 2D (s,t) texture coordinates, either in range [0,1] or higher if repeating." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureCoordinate3D a owl:Class ;
  rdfs:subClassOf :X3DSingleTextureCoordinateNode ;
  rdfs:label "TextureCoordinate3D specifies a set of 3D texture coordinates used by vertex-based geometry nodes (such as IndexedFaceSet or ElevationGrid) to map 3D textures to vertices." .
# :mapping inheritedFrom=X3DSingleTextureCoordinateNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureCoordinate3D ;
  rdfs:range :MFVec3f ;
  rdfs:label "triplets of 3D (s,t,r) texture coordinates, either in range [0,1] or higher if repeating." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureCoordinate4D a owl:Class ;
  rdfs:subClassOf :X3DSingleTextureCoordinateNode ;
  rdfs:label "TextureCoordinate4D specifies a set of 4D (homogeneous 3D) texture coordinates used by vertex-based geometry nodes (such as IndexedFaceSet or ElevationGrid) to map 3D textures to vertices." .
# :mapping inheritedFrom=X3DSingleTextureCoordinateNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:point a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureCoordinate4D ;
  rdfs:range :MFVec4f ;
  rdfs:label "4-tuple values of 4D texture coordinates, either in range [0,1] or higher if repeating." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureCoordinateGenerator a owl:Class ;
  rdfs:subClassOf :X3DSingleTextureCoordinateNode ;
  rdfs:label "TextureCoordinateGenerator computes 2D (s,t) texture-coordinate points, used by vertex-based geometry nodes (such as IndexedFaceSet or ElevationGrid) to map textures to vertices (and patches to NURBS surfaces)." .
# :mapping inheritedFrom=X3DSingleTextureCoordinateNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:mode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureCoordinateGenerator ;
  rdfs:range :textureCoordinateGeneratorModeChoices ;
  rdfs:label "parameter field defines the algorithm used to compute texture coordinates." ;
  :modeDefault "SPHERE" .
:parameter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureCoordinateGenerator ;
  rdfs:range :MFFloat ;
  rdfs:label "parameter array contains scale and translation (x y z) values for Perlin NOISE mode, parameter[0] contains index of refraction for SPHERE-REFLECT mode, parameter[0] contains index of refraction and parameter[1 to 3] contains the eye point in local coordinates for SPHERE-REFLECT-LOCAL mode." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureProjector a owl:Class ;
  rdfs:subClassOf :X3DTextureProjectorNode ;
  rdfs:label "TextureProjector is similar to a light that projects a texture into the scene, illuminating geometry that intersects the perspective projection volume." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
# :aspectRatio inheritedFrom=X3DTextureProjectorNode with accessType=outputOnly, type=SFFloat
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
# :description inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFString
# :direction inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFVec3f, default=0 0 1
# :farDistance inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFFloat, default=-1
:fieldOfView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProjector ;
  rdfs:range :SFFloat ;
  rdfs:label "Preferred minimum viewing angle for this projection in radians, providing minimum height or minimum width (whichever is smaller)." ;
  :fieldOfViewDefault 0.7854 .
# :global inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFBool, default=true
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :location inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :nearDistance inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFFloat, default=-1
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
# :texture inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFNode, default=NULL
:upVector a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProjector ;
  rdfs:range :SFVec3f ;
  rdfs:label "upVector describes the roll of the camera by saying which direction is up for the camera's orientation." ;
  :upVectorDefault ( 0 0 1 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureProjectorParallel a owl:Class ;
  rdfs:subClassOf :X3DTextureProjectorNode ;
  rdfs:label "TextureProjectorParallel is similar to a light that projects a texture into the scene, illuminating geometry that intersects the parallel projection volume." .
# :ambientIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=0
# :aspectRatio inheritedFrom=X3DTextureProjectorNode with accessType=outputOnly, type=SFFloat
# :color inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFColor, default=1 1 1
# :description inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFString
# :direction inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFVec3f, default=0 0 1
# :farDistance inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFFloat, default=-1
:fieldOfView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProjectorParallel ;
  rdfs:range :SFVec4f ;
  rdfs:label "Minimum and maximum extents of projection texture in units of local coordinate system." ;
  :fieldOfViewDefault ( -1 -1 1 1 ) .
# :global inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFBool, default=true
# :intensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :location inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :nearDistance inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFFloat, default=-1
# :on inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=true
# :shadowIntensity inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFFloat, default=1
# :shadows inheritedFrom=X3DLightNode with accessType=inputOutput, type=SFBool, default=false
# :texture inheritedFrom=X3DTextureProjectorNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureProperties a owl:Class ;
  rdfs:subClassOf :X3DNode ;
  rdfs:label "TextureProperties allows precise fine-grained control over application of image textures to geometry." .
:anisotropicDegree a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "anisotropicDegree defines minimum degree of anisotropy to account for in texture filtering (1=no effect for symmetric filtering, otherwise provide higher value)." ;
  :anisotropicDegreeDefault 1 .
:borderColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "borderColor defines border pixel color." ;
  :borderColorDefault ( 0 0 0 0 ) .
:borderWidth a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :SFInt32 ;
  rdfs:label "borderWidth number of pixels for texture border." ;
  :borderWidthDefault 0 .
:boundaryModeR a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureBoundaryModeChoices ;
  rdfs:label "boundaryModeR describes handling of texture-coordinate boundaries." ;
  :boundaryModeRDefault "REPEAT" .
:boundaryModeS a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureBoundaryModeChoices ;
  rdfs:label "boundaryModeS describes handling of texture-coordinate boundaries." ;
  :boundaryModeSDefault "REPEAT" .
:boundaryModeT a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureBoundaryModeChoices ;
  rdfs:label "boundaryModeT describes handling of texture-coordinate boundaries." ;
  :boundaryModeTDefault "REPEAT" .
:generateMipMaps a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TextureProperties ;
  rdfs:range :SFBool ;
  rdfs:label "Determines whether MIPMAPs are generated for texture images." ;
  :generateMipMapsDefault xsd:false .
:magnificationFilter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureMagnificationModeChoices ;
  rdfs:label "magnificationFilter indicates texture filter when image is smaller than screen space representation." ;
  :magnificationFilterDefault "FASTEST" .
:minificationFilter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureMinificationModeChoices ;
  rdfs:label "minificationFilter indicates texture filter when image is larger than screen space representation." ;
  :minificationFilterDefault "FASTEST" .
:textureCompression a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :textureCompressionModeChoices ;
  rdfs:label "textureCompression indicates compression algorithm selection mode." ;
  :textureCompressionDefault "FASTEST" .
:texturePriority a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureProperties ;
  rdfs:range :SFFloat ;
  rdfs:label "texturePriority defines relative priority for this texture when allocating texture memory, an important rendering resource in graphics-card hardware." ;
  :texturePriorityDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureTransform a owl:Class ;
  rdfs:subClassOf :X3DTextureTransformNode ;
  rdfs:label "TextureTransform shifts 2D texture coordinates for positioning, orienting and scaling image textures on geometry." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform ;
  rdfs:range :SFVec2f ;
  rdfs:label "center point in 2D (s,t) texture coordinates for rotation and scaling." ;
  :centerDefault ( 0 0 ) .
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform ;
  rdfs:range :SFFloat ;
  rdfs:label "single rotation angle of texture about center (opposite effect appears on geometry)." ;
  :rotationDefault 0 .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform ;
  rdfs:range :SFVec2f ;
  rdfs:label "Non-uniform planar scaling of texture about center (opposite effect appears on geometry)." ;
  :scaleDefault ( 1 1 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform ;
  rdfs:range :SFVec2f ;
  rdfs:label "Lateral/vertical shift in 2D (s,t) texture coordinates (opposite effect appears on geometry)." ;
  :translationDefault ( 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureTransform3D a owl:Class ;
  rdfs:subClassOf :X3DTextureTransformNode ;
  rdfs:label "TextureTransform3D applies a 3D transformation to texture coordinates." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform3D ;
  rdfs:range :SFVec3f ;
  rdfs:label "center point in 2D (s,t) texture coordinates for rotation and scaling." ;
  :centerDefault ( 0 0 0 ) .
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform3D ;
  rdfs:range :SFRotation ;
  rdfs:label "rotation angle of texture about center (opposite effect appears on geometry)." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform3D ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform planar scaling of texture about center (opposite effect appears on geometry)." ;
  :scaleDefault ( 1 1 1 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransform3D ;
  rdfs:range :SFVec3f ;
  rdfs:label "Lateral/vertical shift in 2D (s,t) texture coordinates (opposite effect appears on geometry)." ;
  :translationDefault ( 0 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TextureTransformMatrix3D a owl:Class ;
  rdfs:subClassOf :X3DTextureTransformNode ;
  rdfs:label "TextureTransformMatrix3D applies a 3D transformation to texture coordinates." .
:matrix a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TextureTransformMatrix3D ;
  rdfs:range :SFMatrix4f ;
  rdfs:label "matrix is a generalized, unfiltered 4x4 transformation matrix to modify texture (opposite effect appears on geometry)." ;
  :matrixDefault ( 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TimeSensor a owl:Class ;
  rdfs:subClassOf :X3DTimeDependentNode ;
  rdfs:subClassOf :X3DSensorNode ;
  rdfs:label "TimeSensor continuously generates events as time passes." .
:cycleInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TimeSensor ;
  rdfs:range :SFTime ;
  rdfs:label "cycleInterval is loop duration in seconds." ;
  :cycleIntervalDefault 1.0 .
:cycleTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TimeSensor ;
  rdfs:range :SFTime ;
  rdfs:label "cycleTime sends a time outputOnly at startTime, and also at the beginning of each new cycle (useful for synchronization with other time-based objects)." .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:fraction_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TimeSensor ;
  rdfs:range :SFFloat ;
  rdfs:label "fraction_changed continuously sends value in range [0,1] showing time progress in the current cycle." .
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:loop a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TimeSensor ;
  rdfs:range :SFBool ;
  rdfs:label "Repeat indefinitely when loop=true, repeat only once when loop=false." ;
  :loopDefault xsd:false .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
:time a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TimeSensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time continuously sends the absolute time (value 0." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TimeTrigger a owl:Class ;
  rdfs:subClassOf :X3DTriggerNode ;
  rdfs:label "TimeTrigger converts boolean true events to time events." .
:set_boolean a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :TimeTrigger ;
  rdfs:range :SFBool ;
  rdfs:label "If input event set_boolean is true, send output triggerTime event." .
:triggerTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TimeTrigger ;
  rdfs:range :SFTime ;
  rdfs:label "triggerTime is output time event, sent when input event set_boolean is true." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ToneMappedVolumeStyle a owl:Class ;
  rdfs:subClassOf :X3DComposableVolumeRenderStyleNode ;
  rdfs:label "ToneMappedVolumeStyle specifies that volumetric data is rendered with Gooch shading model of two-toned warm/cool coloring." .
:coolColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ToneMappedVolumeStyle ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "coolColor is used for surfaces facing away from the light direction." ;
  :coolColorDefault ( 0 0 1 0 ) .
# :enabled inheritedFrom=X3DVolumeRenderStyleNode with accessType=inputOutput, type=SFBool, default=true
:hasSurfaceNormals a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ToneMappedVolumeStyle ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The surfaceNormals field contains a 3D texture with at least three component values." .
:fieldSurfaceNormalsHasParentToneMappedVolumeStyle a owl:ObjectProperty ;
  owl:inverseOf :hasSurfaceNormals ;
  rdfs:subPropertyOf :hasParentToneMappedVolumeStyle .
:warmColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ToneMappedVolumeStyle ;
  rdfs:range :SFColorRGBA ;
  rdfs:label "warmColor is used for surfaces facing towards the light." ;
  :warmColorDefault ( 1 1 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TouchSensor a owl:Class ;
  rdfs:subClassOf :X3DTouchSensorNode ;
  rdfs:label "TouchSensor tracks location and state of the pointing device, detecting when a user points at or selects (activates) geometry." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:hitNormal_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TouchSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "When pointing device selects geometry, send event containing surface normal vector at the hitPoint." .
:hitPoint_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TouchSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "When pointing device selects geometry, send event containing 3D point on surface of underlying geometry, as measured in reference frame for TouchSensor's local coordinate system." .
:hitTexCoord_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TouchSensor ;
  rdfs:range :SFVec2f ;
  rdfs:label "When pointing device selects geometry, send event containing texture coordinates of surface at the hitPoint." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :isOver inheritedFrom=X3DPointingDeviceSensorNode with accessType=outputOnly, type=SFBool
# :touchTime inheritedFrom=X3DTouchSensorNode with accessType=outputOnly, type=SFTime
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Transform a owl:Class ;
  rdfs:subClassOf :X3DGroupingNode ;
  rdfs:label "Transform is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Transform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system, applied prior to rotation or scaling." ;
  :centerDefault ( 0 0 0 ) .
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
:rotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Transform ;
  rdfs:range :SFRotation ;
  rdfs:label "Orientation (axis, angle in radians) of children relative to local coordinate system." ;
  :rotationDefault ( 0 0 1 0 ) .
:scale a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Transform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Non-uniform x-y-z scale of child coordinate system, adjusted by center and scaleOrientation." ;
  :scaleDefault ( 1 1 1 ) .
:scaleOrientation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Transform ;
  rdfs:range :SFRotation ;
  rdfs:label "Preliminary rotation of coordinate system before scaling (to allow scaling around arbitrary orientations)." ;
  :scaleOrientationDefault ( 0 0 1 0 ) .
:translation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Transform ;
  rdfs:range :SFVec3f ;
  rdfs:label "Position (x, y, z in meters) of children relative to local coordinate system." ;
  :translationDefault ( 0 0 0 ) .
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TransformSensor a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentalSensorNode ;
  rdfs:label "TransformSensor generates output events when its targetObject enters, exits, and moves within a region in space (defined by a box)." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransformSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:enterTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransformSensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when targetObject enters the box region for sensor." .
:exitTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransformSensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when targetObject exits the box region for sensor." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:orientation_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransformSensor ;
  rdfs:range :SFRotation ;
  rdfs:label "Sends rotation event relative to center whenever the target object is contained within the box region and results change." .
:position_changed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransformSensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Sends translation event relative to center whenever the target object is contained within the box region and results change." .
# :size inheritedFrom=X3DEnvironmentalSensorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
:hasTargetObject a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransformSensor ;
  rdfs:range  [ owl:unionOf (:X3DGroupingNode :X3DShapeNode) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "targetObject is the movable geometry represented by any valid X3DGroupingNode or X3DShapeNode which may enter or exit the box." .
:fieldTargetObjectHasParentTransformSensor a owl:ObjectProperty ;
  owl:inverseOf :hasTargetObject ;
  rdfs:subPropertyOf :hasParentTransformSensor .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TransmitterPdu a owl:Class ;
  rdfs:subClassOf :X3DNetworkSensorNode ;
  rdfs:subClassOf :X3DBoundedObject ;
  rdfs:label "TransmitterPdu is a networked Protocol Data Unit (PDU) information node that provides detailed information about a radio transmitter modeled in a simulation." .
:address a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFString ;
  rdfs:label "Multicast network address, or else 'localhost'." ;
  :addressDefault "localhost" .
:antennaLocation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFVec3f ;
  rdfs:label "World coordinates for antenna location." ;
  :antennaLocationDefault ( 0 0 0 ) .
:antennaPatternLength a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "." ;
  :antennaPatternLengthDefault 0 .
:antennaPatternType a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Antenna shape pattern: 0 for omnidirectional, 1 for beam, 2 for spherical harmonic (deprecated), or optional higher value." ;
  :antennaPatternTypeDefault 0 .
:applicationID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Each simulation application that can respond to simulation management PDUs needs to have a unique applicationID." ;
  :applicationIDDefault 0 .
# :bboxCenter inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DBoundedObject with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
:cryptoKeyID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Nonzero value corresponding to the simulated cryptographic key." ;
  :cryptoKeyIDDefault 0 .
:cryptoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Indicates type of crypto system being used, even if the encryption equipment is not keyed." ;
  :cryptoSystemDefault 0 .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:entityID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "EntityID unique ID for entity within that application." ;
  :entityIDDefault 0 .
:frequency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Transmission frequency in Hz." ;
  :frequencyDefault 0 .
:geoCoords a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFVec3d ;
  rdfs:label "Geographic location (specified in current geoSystem coordinates) for children geometry (specified in relative coordinate system, in meters)." ;
  :geoCoordsDefault ( 0 0 0 ) .
:geoSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :MFString ;
  rdfs:label "Identifies spatial reference frame: Geodetic (GD), Geocentric (GC), Universal Transverse Mercator (UTM)." ;
  :geoSystemDefault ( "GD" "WE" ) .
:inputSource a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Source of transmission input." ;
  :inputSourceDefault 0 .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
:isNetworkReader a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='remote' (listen to network as copy of remote entity)." .
:isNetworkWriter a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='master' (output to network as master entity at writeInterval)." .
:isRtpHeaderHeard a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether incoming DIS packets have an RTP header prepended." .
:isStandAlone a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether networkMode='local' (ignore network but still respond to local events)." .
:lengthOfModulationParameters a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "." ;
  :lengthOfModulationParametersDefault 0 .
:modulationTypeDetail a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumeration containing detailed information depending on the major modulation type." ;
  :modulationTypeDetailDefault 0 .
:modulationTypeMajor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumeration containing major classification of the modulation type." ;
  :modulationTypeMajorDefault 0 .
:modulationTypeSpreadSpectrum a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Indicates the spread spectrum technique or combination of spread spectrum techniques in use." ;
  :modulationTypeSpreadSpectrumDefault 0 .
:modulationTypeSystem a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Specifies radio system associated with this Transmitter PDU and used to interpret other fields whose values depend on a specific radio system." ;
  :modulationTypeSystemDefault 0 .
:multicastRelayHost a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFString ;
  rdfs:label "Fallback server address if multicast not available locally." .
:multicastRelayPort a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Fallback server port if multicast not available locally." ;
  :multicastRelayPortDefault 0 .
:networkMode a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :networkModeChoices ;
  rdfs:label "Whether this entity is ignoring the network, sending DIS packets to the network, or receiving DIS packets from the network." ;
  :networkModeDefault "standAlone" .
:port a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Multicast network port, for example: 3000." ;
  :portDefault 0 .
:power a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFFloat ;
  rdfs:label "Power that radio would be capable of outputting if on and transmitting, independent of actual transmit state of the radio." ;
  :powerDefault 0.0 .
:radioEntityTypeCategory a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumeration containing EntityType of transmitter radio." ;
  :radioEntityTypeCategoryDefault 0 .
:radioEntityTypeCountry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for country to which the design of the entity or its design specification is attributed." ;
  :radioEntityTypeCountryDefault 0 .
:radioEntityTypeDomain a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for domain in which the entity operates: LAND, AIR, SURFACE, SUBSURFACE, SPACE or OTHER." ;
  :radioEntityTypeDomainDefault 0 .
:radioEntityTypeKind a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value for whether entity is a PLATFORM, MUNITION, LIFE_FORM, ENVIRONMENTAL, CULTURAL_FEATURE, SUPPLY, RADIO, EXPENDABLE, SENSOR_EMITTER or OTHER." ;
  :radioEntityTypeKindDefault 0 .
:radioEntityTypeNomenclature a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Integer enumerations value indicating nomenclature (name) for a particular emitter." ;
  :radioEntityTypeNomenclatureDefault 0 .
:radioEntityTypeNomenclatureVersion a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Named equipment version number." ;
  :radioEntityTypeNomenclatureVersionDefault 0 .
:radioID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Identifies a particular radio within a given entity." ;
  :radioIDDefault 0 .
:readInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between read updates, 0 means no reading." ;
  :readIntervalDefault 0.1 .
:relativeAntennaLocation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFVec3f ;
  rdfs:label "Relative coordinates for antenna location." ;
  :relativeAntennaLocationDefault ( 0 0 0 ) .
:rtpHeaderExpected a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFBool ;
  rdfs:label "Whether RTP headers are prepended to DIS PDUs." ;
  :rtpHeaderExpectedDefault xsd:false .
:siteID a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Simulation/exercise siteID of the participating LAN or organization." ;
  :siteIDDefault 0 .
:timestamp a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFTime ;
  rdfs:label "DIS timestamp in X3D units (value 0." .
:transmitFrequencyBandwidth a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFFloat ;
  rdfs:label "Bandwidth of the particular transmitter measured between the half-power (-3 dB) points (this value represents total bandwidth, not the deviation from the center frequency)." ;
  :transmitFrequencyBandwidthDefault 0 .
:transmitState a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Specify radio transmission state where enumerations value 0 is for off, value 1 for powered but not transmitting, or value 1 is for powered and transmitting,." ;
  :transmitStateDefault 0 .
# :visible inheritedFrom=X3DBoundedObject with accessType=inputOutput, type=SFBool, default=true
:whichGeometry a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFInt32 ;
  rdfs:label "Select geometry to render: -1 for no geometry, 0 for text trace, 1 for default geometry, (optional) higher values to render different states." ;
  :whichGeometryDefault 1 .
:writeInterval a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TransmitterPdu ;
  rdfs:range :SFTime ;
  rdfs:label "Seconds between write updates, 0 means no writing (sending)." ;
  :writeIntervalDefault 1.0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TriangleFanSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "TriangleFanSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
:fanCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TriangleFanSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "fanCount array provides number of vertices in each fan." .
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TriangleSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "TriangleSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TriangleSet2D a owl:Class ;
  rdfs:subClassOf :X3DGeometryNode ;
  rdfs:label "TriangleSet2D is a geometry node that defines a set of filled 2D triangles in X-Y plane." .
:solid a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TriangleSet2D ;
  rdfs:range :SFBool ;
  rdfs:label "Setting solid true means draw only one side of polygons (backface culling on), setting solid false means draw both sides of polygons (backface culling off)." ;
  :solidDefault xsd:false .
:vertices a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TriangleSet2D ;
  rdfs:range :MFVec2f ;
  rdfs:label "2D coordinates of TriangleSet2D vertices." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TriangleStripSet a owl:Class ;
  rdfs:subClassOf :X3DComposedGeometryNode ;
  rdfs:label "TriangleStripSet is a geometry node containing a Coordinate|CoordinateDouble node, and can also contain Color|ColorRGBA, Normal and TextureCoordinate nodes." .
# :attrib inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=MFNode
# :ccw inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :color inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :colorPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :coord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :fogCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normal inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :normalPerVertex inheritedFrom=X3DComposedGeometryNode with accessType=initializeOnly, type=SFBool, default=true
# :solid inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFBool, default=true
:stripCount a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TriangleStripSet ;
  rdfs:range :MFInt32 ;
  rdfs:label "stripCount array provides number of vertices in each strip." .
# :texCoord inheritedFrom=X3DComposedGeometryNode with accessType=inputOutput, type=SFNode, default=NULL
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:TwoSidedMaterial a owl:Class ;
  rdfs:subClassOf :X3DMaterialNode ;
  rdfs:label "TwoSidedMaterial specifies surface rendering properties for associated geometry nodes, for outer (front) and inner (back) sides of polygons." .
:ambientIntensity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how much ambient omnidirectional light is reflected from all light sources." ;
  :ambientIntensityDefault 0.2 .
:backAmbientIntensity a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how much ambient omnidirectional light is reflected from all light sources." ;
  :backAmbientIntensityDefault 0.2 .
:backDiffuseColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much direct, angle-dependent light is reflected from all light sources." ;
  :backDiffuseColorDefault ( 0.8 0.8 0.8 ) .
:backEmissiveColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much glowing light is emitted from this object." ;
  :backEmissiveColorDefault ( 0 0 0 ) .
:backShininess a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "Lower shininess values provide soft specular glows, while higher values result in sharper, smaller highlights." ;
  :backShininessDefault 0.2 .
:backSpecularColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "specular highlights are brightness reflections (example: shiny spots on an apple)." ;
  :backSpecularColorDefault ( 0 0 0 ) .
:backTransparency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how 'clear' an object is: 1." ;
  :backTransparencyDefault 0 .
:diffuseColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much direct, angle-dependent light is reflected from all light sources." ;
  :diffuseColorDefault ( 0.8 0.8 0.8 ) .
:emissiveColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much glowing light is emitted from this object." ;
  :emissiveColorDefault ( 0 0 0 ) .
:separateBackColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFBool ;
  rdfs:label "separateBackColor determines whether separate Material values are used for back faces." ;
  :separateBackColorDefault xsd:false .
:shininess a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "Lower shininess values provide soft specular glows, while higher values result in sharper, smaller highlights." ;
  :shininessDefault 0.2 .
:specularColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "specular highlights are brightness reflections (example: shiny spots on an apple)." ;
  :specularColorDefault ( 0 0 0 ) .
:transparency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :TwoSidedMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how 'clear' an object is: 1." ;
  :transparencyDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:UniversalJoint a owl:Class ;
  rdfs:subClassOf :X3DRigidJointNode ;
  rdfs:label "UniversalJoint is like a BallJoint that constrains an extra degree of rotational freedom." .
:anchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "anchorPoint is joint center, specified in world coordinates." ;
  :anchorPointDefault ( 0 0 0 ) .
:axis1 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis1 defines axis vector of joint connection to body1." ;
  :axis1Default ( 1 0 0 ) .
:axis2 a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "axis2 defines axis vector of joint connection to body2." ;
  :axis2Default ( 0 1 0 ) .
# :body1 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body1AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f .
:body1Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f .
# :body2 inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=SFNode, default=NULL
:body2AnchorPoint a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFVec3f .
:body2Axis a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFFloat .
# :forceOutput inheritedFrom=X3DRigidJointNode with accessType=inputOutput, type=MFString, default="NONE", simpleType=forceOutputValues
:stop1Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop1BounceDefault 0 .
:stop1ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop1ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop1ErrorCorrectionDefault 0.8 .
:stop2Bounce a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop2Bounce is velocity factor for bounce back once stop point is reached." ;
  :stop2BounceDefault 0 .
:stop2ErrorCorrection a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UniversalJoint ;
  rdfs:range :SFFloat ;
  rdfs:label "stop2ErrorCorrection is fraction of error correction performed during time step once stop point is reached." ;
  :stop2ErrorCorrectionDefault 0.8 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:UnlitMaterial a owl:Class ;
  rdfs:subClassOf :X3DOneSidedMaterialNode ;
  rdfs:label "UnlitMaterial specifies surface rendering properties for associated geometry nodes." .
:emissiveColor a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UnlitMaterial ;
  rdfs:range :SFColor ;
  rdfs:label "how much glowing light is emitted from this object." ;
  :emissiveColorDefault ( 1 1 1 ) .
:hasEmissiveTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UnlitMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying emissiveColor for this material node, the contained texture provides Physically Based Rendering (PBR) modulation for each pixel." .
:fieldEmissiveTextureHasParentUnlitMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasEmissiveTexture ;
  rdfs:subPropertyOf :hasParentUnlitMaterial .
# :emissiveTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :normalScale inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFFloat, default=1
:hasNormalTexture a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UnlitMaterial ;
  rdfs:range :X3DSingleTextureNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "When applying normalScale for this material node, the contained texture modulates the texture across the surface." .
:fieldNormalTextureHasParentUnlitMaterial a owl:ObjectProperty ;
  owl:inverseOf :hasNormalTexture ;
  rdfs:subPropertyOf :hasParentUnlitMaterial .
# :normalTextureMapping inheritedFrom=X3DOneSidedMaterialNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
:transparency a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :UnlitMaterial ;
  rdfs:range :SFFloat ;
  rdfs:label "how 'clear' an object is: 1." ;
  :transparencyDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Viewpoint a owl:Class ;
  rdfs:subClassOf :X3DViewpointNode ;
  rdfs:label "Viewpoint provides a specific location and direction where the user may view the scene." .
# :bindTime inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFTime
:centerOfRotation a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Viewpoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "centerOfRotation specifies center point about which to rotate user's eyepoint when in EXAMINE or LOOKAT mode." ;
  :centerOfRotationDefault ( 0 0 0 ) .
# :description inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFString
# :farDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
:fieldOfView a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Viewpoint ;
  rdfs:range :SFFloat ;
  rdfs:label "Preferred minimum viewing angle from this viewpoint in radians, providing minimum height or minimum width (whichever is smaller)." ;
  :fieldOfViewDefault 0.7854 .
# :isBound inheritedFrom=X3DBindableNode with accessType=outputOnly, type=SFBool
# :jump inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=true
# :navigationInfo inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFNode, default=NULL
# :nearDistance inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFFloat, default=-1
# :orientation inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFRotation, default=0 0 1 0
:position a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Viewpoint ;
  rdfs:range :SFVec3f ;
  rdfs:label "position (x, y, z in meters) relative to local coordinate system." ;
  :positionDefault ( 0 0 10 ) .
# :retainUserOffsets inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :set_bind inheritedFrom=X3DBindableNode with accessType=inputOnly, type=SFBool
# :viewAll inheritedFrom=X3DViewpointNode with accessType=inputOutput, type=SFBool, default=false
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:ViewpointGroup a owl:Class ;
  rdfs:subClassOf :X3DChildNode ;
  rdfs:label "ViewpointGroup can contain Viewpoint, OrthoViewpoint, GeoViewpoint and other ViewpointGroup nodes for better user-navigation support with a shared description on the viewpoint list." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range :SFVec3f ;
  rdfs:label "center specifies center point of proximity box within which ViewpointGroup is usable and displayed on viewpoint list." ;
  :centerDefault ( 0 0 0 ) .
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range  [ owl:unionOf (:X3DViewpointNode :ViewpointGroup) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "ViewpointGroup contains Viewpoint, OrthoViewpoint, GeoViewpoint and other ViewpointGroup nodes that each have containerField='children' default value." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentViewpointGroup .
:description a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range :SFString ;
  rdfs:label "Text description or navigation hint to identify this ViewpointGroup." .
:displayed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range :SFBool ;
  rdfs:label "displayed determines whether this ViewpointGroup is displayed in the current viewpoint list." ;
  :displayedDefault xsd:true .
:retainUserOffsets a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range :SFBool ;
  rdfs:label "Retain (true) or reset to zero (false) any prior user navigation offsets from defined viewpoint position, orientation." ;
  :retainUserOffsetsDefault xsd:false .
:size a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :ViewpointGroup ;
  rdfs:range :SFVec3f ;
  rdfs:label "Size of proximity box around center location within which ViewpointGroup is usable and displayed on viewpoint list." ;
  :sizeDefault ( 0 0 0 ) .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:Viewport a owl:Class ;
  rdfs:subClassOf :X3DViewportNode ;
  rdfs:label "Viewport is a Grouping node that can contain most nodes." .
# :addChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :bboxCenter inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DGroupingNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :children inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=MFNode
:clipBoundary a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :Viewport ;
  rdfs:range :MFFloat ;
  rdfs:label "clipBoundary is specified in fractions of the normal render surface in the sequence left/right/bottom/top." ;
  :clipBoundaryDefault ( 0 1 0 1 ) .
# :removeChildren inheritedFrom=X3DGroupingNode with accessType=inputOnly, type=MFNode
# :visible inheritedFrom=X3DGroupingNode with accessType=inputOutput, type=SFBool, default=true
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:VisibilitySensor a owl:Class ;
  rdfs:subClassOf :X3DEnvironmentalSensorNode ;
  rdfs:label "VisibilitySensor detects when user can see a specific object or region as they navigate the world." .
:center a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :VisibilitySensor ;
  rdfs:range :SFVec3f ;
  rdfs:label "Translation offset from origin of local coordinate system." ;
  :centerDefault ( 0 0 0 ) .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
:enterTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :VisibilitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera enters visibility region for sensor." .
:exitTime a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeOutputOnly ;
  rdfs:domain :VisibilitySensor ;
  rdfs:range :SFTime ;
  rdfs:label "Time event generated when user's camera exits visibility region for sensor." .
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :size inheritedFrom=X3DEnvironmentalSensorNode with accessType=inputOutput, type=SFVec3f, default=0 0 0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:VolumeData a owl:Class ;
  rdfs:subClassOf :X3DVolumeDataNode ;
  rdfs:label "VolumeData displays a simple non-segmented voxel dataset with a single RenderStyle node." .
# :bboxCenter inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=0 0 0
# :bboxDisplay inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=false
# :bboxSize inheritedFrom=X3DVolumeDataNode with accessType=initializeOnly, type=SFVec3f, default=-1 -1 -1
# :dimensions inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFVec3f, default=1 1 1
:hasRenderStyle a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :VolumeData ;
  rdfs:range :X3DVolumeRenderStyleNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DVolumeRenderStyleNode node that defines specific rendering technique for this volumetric object." .
:fieldRenderStyleHasParentVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasRenderStyle ;
  rdfs:subPropertyOf :hasParentVolumeData .
# :visible inheritedFrom=X3DVolumeDataNode with accessType=inputOutput, type=SFBool, default=true
:hasVoxels a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :VolumeData ;
  rdfs:range :X3DTexture3DNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Single contained X3DTexture3DNode (ComposedTexture3D, ImageTexture3D, PixelTexture3D) that provides raw voxel information utilized by corresponding rendering styles." .
:fieldVoxelsHasParentVolumeData a owl:ObjectProperty ;
  owl:inverseOf :hasVoxels ;
  rdfs:subPropertyOf :hasParentVolumeData .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:VolumeEmitter a owl:Class ;
  rdfs:subClassOf :X3DParticleEmitterNode ;
  rdfs:label "VolumeEmitter emits particles from a random position confined within the given closed geometry volume." .
:hasCoord a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :VolumeEmitter ;
  rdfs:range :X3DCoordinateNode ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "Coordinates for the geometry used as the emitting volume." .
:fieldCoordHasParentVolumeEmitter a owl:ObjectProperty ;
  owl:inverseOf :hasCoord ;
  rdfs:subPropertyOf :hasParentVolumeEmitter .
:coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :VolumeEmitter ;
  rdfs:range :MFInt32 ;
  rdfs:label "coordIndex indices are applied to contained Coordinate values in order to define randomly generated initial geometry of the particles." ;
  :coordIndexDefault ( -1 ) .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :VolumeEmitter ;
  rdfs:range :SFVec3f ;
  rdfs:label "Initial direction from which particles emanate." ;
  :directionDefault ( 0 1 0 ) .
:internal a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInitializeOnly ;
  rdfs:domain :VolumeEmitter ;
  rdfs:range :SFBool ;
  rdfs:label "TODO, X3D specification is undefined." ;
  :internalDefault xsd:true .
# :mass inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :on inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFBool, default=true
:set_coordIndex a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOnly ;
  rdfs:domain :VolumeEmitter ;
  rdfs:range :MFInt32 .
# :speed inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :surfaceArea inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0
# :variation inheritedFrom=X3DParticleEmitterNode with accessType=inputOutput, type=SFFloat, default=0.25
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:VolumePickSensor a owl:Class ;
  rdfs:subClassOf :X3DPickSensorNode ;
  rdfs:label "VolumePickSensor tests picking intersections using the pickingGeometry against the pickTarget geometry volume." .
# :description inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFString
# :enabled inheritedFrom=X3DSensorNode with accessType=inputOutput, type=SFBool, default=true
# :intersectionType inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=BOUNDS, simpleType=intersectionTypeValues, baseType=xsd:NMTOKEN
# :isActive inheritedFrom=X3DSensorNode with accessType=outputOnly, type=SFBool
# :matchCriterion inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFString, default=MATCH_ANY, simpleType=pickSensorMatchCriterionChoices, baseType=xsd:NMTOKEN
# :objectType inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFString, default="ALL", simpleType=pickableObjectTypeValues
# :pickedGeometry inheritedFrom=X3DPickSensorNode with accessType=outputOnly, type=MFNode
# :pickingGeometry inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=SFNode, default=NULL
# :pickTarget inheritedFrom=X3DPickSensorNode with accessType=inputOutput, type=MFNode
# :sortOrder inheritedFrom=X3DPickSensorNode with accessType=initializeOnly, type=SFString, default=CLOSEST, simpleType=pickSensorSortOrderValues, baseType=xsd:NMTOKEN
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:WaveShaper a owl:Class ;
  rdfs:subClassOf :X3DSoundProcessingNode ;
  rdfs:label "WaveShaper node represents a nonlinear distorter that applies a wave-shaping distortion curve to the signal." .
# :channelCount inheritedFrom=X3DSoundProcessingNode with accessType=outputOnly, type=SFInt32
# :channelCountMode inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=max, simpleType=channelCountModeChoices
# :channelInterpretation inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFString, default=speakers, simpleType=channelInterpretationChoices
:hasChildren a owl:ObjectProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WaveShaper ;
  rdfs:range  [ owl:unionOf (:Analyser :AudioClip :AudioDestination :BiquadFilter :BufferAudioSource :ChannelMerger :ChannelSelector :ChannelSplitter :Convolver :Delay :DynamicsCompressor :Gain :ListenerPointSource :MicrophoneSource :MovieTexture :OscillatorSource :Sound :SpatialSound :StreamAudioDestination :StreamAudioSource :WaveShaper) ] ;
  rdfs:subPropertyOf :hasChild ;
  rdfs:label "The children field specifies audio-graph sound sources providing input signals for this node." .
:fieldChildrenHasParent a owl:ObjectProperty ;
  owl:inverseOf :hasChildren ;
  rdfs:subPropertyOf :hasParentWaveShaper .
# :description inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFString
# :elapsedTime inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFTime
# :enabled inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFBool, default=true
# :gain inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFFloat, default=1
# :isActive inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
# :isPaused inheritedFrom=X3DTimeDependentNode with accessType=outputOnly, type=SFBool
:oversample a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WaveShaper ;
  rdfs:range :waveShaperOversampleChoices ;
  rdfs:label "The oversample field is specifies what type of oversampling (if any) should be used when applying the shaping curve." ;
  :oversampleDefault "none" .
# :pauseTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :resumeTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :startTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :stopTime inheritedFrom=X3DTimeDependentNode with accessType=inputOutput, type=SFTime, default=0
# :tailTime inheritedFrom=X3DSoundProcessingNode with accessType=inputOutput, type=SFTime, default=0
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:WindPhysicsModel a owl:Class ;
  rdfs:subClassOf :X3DParticlePhysicsModelNode ;
  rdfs:label "WindPhysicsModel applies a wind effect to the particles." .
:direction a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WindPhysicsModel ;
  rdfs:range :SFVec3f ;
  rdfs:label "direction in which wind is travelling in the form of a normalized, unit vector." ;
  :directionDefault ( 1 0 0 ) .
# :enabled inheritedFrom=X3DParticlePhysicsModelNode with accessType=inputOutput, type=SFBool, default=true
:gustiness a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WindPhysicsModel ;
  rdfs:range :SFFloat ;
  rdfs:label "gustiness specifies how much wind speed varies from the average speed." ;
  :gustinessDefault 0.1 .
:speed a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WindPhysicsModel ;
  rdfs:range :SFFloat ;
  rdfs:label "Initial linear speed (default is m/s) imparted to all particles along their direction of movement." ;
  :speedDefault 0.1 .
:turbulence a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WindPhysicsModel ;
  rdfs:range :SFFloat ;
  rdfs:label "turbulence field specifies how much the wind acts directly in line with the direction, and how much variation is applied in directions other than the wind direction." ;
  :turbulenceDefault 0 .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

:WorldInfo a owl:Class ;
  rdfs:subClassOf :X3DInfoNode ;
  rdfs:label "WorldInfo contains a title and simple persistent metadata information about an X3D scene. This node is strictly for documentation purposes and has no effect on the visual appearance or behaviour of the world." .
:info a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WorldInfo ;
  rdfs:range :MFString ;
  rdfs:label "Additional information about this model." .
:title a owl:DatatypeProperty ;
  rdfs:subPropertyOf :accessTypeInputOutput ;
  rdfs:domain :WorldInfo ;
  rdfs:range :SFString ;
  rdfs:label "title of this world, placed in window title." .
# :DEF inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:ID
# :USE inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:IDREF
# :hasIS inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :hasMetadata inheritedFrom=X3DNode with accessType=inputOutput, type=SFNode, default=NULL
# :class inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKENS
# :id inheritedFrom=X3DNode with accessType=inputOutput, type=SFString, baseType=xsd:NMTOKEN
# :style inheritedFrom=X3DNode with accessType=inputOutput, type=SFString

###############################################
            
# Temporary knowledge base for testing

:n1 rdf:type owl:NamedIndividual .
:n2 rdf:type owl:NamedIndividual ;
  :hasParent :n1 .
:n3 rdf:type owl:NamedIndividual ;
  :hasParent :n2 .

###############################################
